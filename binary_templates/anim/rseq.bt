//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rseq.bt
//   Authors: Rika
//   Version: 0.3
//   Purpose: Respawn Sequence Files
//  Category: Animation
// File Mask: *.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------

local bool canParseAnim = true;
local int boneCount = 0;
local int animCount = 0;

#ifdef USE_BIG_NUMBERS
int GetOffset(int offset)
{
    return offset;
}
#else
int GetOffset(unsigned short offset)
{
    return FIX_OFFSET(offset);
}
#endif

#ifdef FEATURE_STATICSTRUCTS
// HACK HACK
// this works because the first bone normally has fixed position or rotation making the size > 0x8
// and if an animation has a track it will also be larger than 0x8
// note: this could be used for an external data template
void BoneCountCheat(const int64_t baseptr)
{
    if (boneCount == 0 && !canParseAnim)
    {
        FSeek(baseptr);
        nibble tmpFlags[256] <optimize=false, hidden=true>;
        local uint8_t tmpFlag = 0;

        local int tmpIdx = 0;
        for (tmpIdx = 0; tmpIdx < 256; tmpIdx++)
        {
            tmpFlag = tmpFlags[tmpIdx].bits;
            if (tmpFlag & 0x8)
                break;
        }

        boneCount = (tmpIdx / 2) * 2;
    }
}
#endif

uint16_t ParseRLEAnimationOffset(const int count)
{
    return ((((4 * count + 7) / 8) + 1) & ~1);
}

struct rle_value
{
    mstudioanimvalue_t value;

    switch (value.num.valid)
    {
    case 0:
        short values[value.num.total];
        break;
    case 1:
        short value_base;
        char value_diff[value.num.total - 1];
        break;
    default:
        local const int bitLUTIndex = ((value.num.valid - 2) / 6);
        local const int numUnkValue = ((value.num.valid - 2) % 6);

        short value_base;

        short value_unk[numUnkValue];

        if (bitLUTIndex)
        {
            struct {
                BitfieldDisablePadding();
                uint8_t bits : s_FrameBitCountLUT[bitLUTIndex];
                BitfieldEnablePadding(); 
            } value_bits[value.num.total] <optimize=false>;
        };
        break;
    }
};

struct rle_valuetrack(int frameCount)
{
    rle_value value;
    FSeek(startof(value.value) + (GetAnimValueOffset(value.value) * sizeof(mstudioanimvalue_t)));

    local uint8_t total = value.value.num.total;
    // on animations without sections the number of 'total' values will equal the number of frames
    // on animations with sections, sections preceeding the last sectiion will have a 'total' of (sectionframes + 1)
    // the extra value is seemingly the first value of the next section.
    // this difference is handled when passed to the func
    local int k = frameCount;

    while(total <= k)
    {
        rle_value value;
        FSeek(startof(value.value) + (GetAnimValueOffset(value.value) * sizeof(mstudioanimvalue_t)));

        k -= total;
        total = value.value.num.total;
    };
};

struct rle_valueptr(const int frameCount)
{
    mstudioanim_valueptr_t ptr;

    local const uint64_t valoff = (startof(ptr) + ptr.offset);
    local const uint64_t values[3] = { valoff, valoff + (ptr.axisIdx1 * sizeof(mstudioanimvalue_t)), valoff + (ptr.axisIdx2 * sizeof(mstudioanimvalue_t)) };

    local int j = 0;
    for (j = 0; j < 3; j++)
    {
        if (ptr.flags & (STUDIO_ANIMPTR_X >> j))
        {
            FSeek(values[j]);
            
            switch (j)
            {
            case 0:
                rle_valuetrack track_x(frameCount);
                break;
            case 1:
                rle_valuetrack track_y(frameCount);
                break;
            case 2:
                rle_valuetrack track_z(frameCount);
                break;
            }
        }
    }
};

struct rle_bone(const uint8_t boneFlags, const int frameCount)
{
    mstudio_rle_anim_t header <fgcolor=0xAA3366>;

    local uint64_t localPos = FTell();
    if (boneFlags & STUDIO_ANIM_POS)
    {
        if (header.flags & STUDIO_ANIM_ANIMPOS)
        {
            float posscale <fgcolor=0x99CC99>;
            rle_valueptr pPos(frameCount) <fgcolor=cLtGreen>;

            localPos += 8;
        }
        else
        {
            Vector48 pos <fgcolor=cLtGreen>;

            localPos += 6;
        }
    }

    FSeek(localPos);
    if (boneFlags & STUDIO_ANIM_ROT)
    {
        if (header.flags & STUDIO_ANIM_ANIMROT)
        {
            rle_valueptr pRot(frameCount) <fgcolor=cLtRed>;

            localPos += 4;
        }
        else
        {
            Quaternion64 rot <fgcolor=cLtRed>;

            localPos += 8;
        }
    }

    FSeek(localPos);
    if (boneFlags & STUDIO_ANIM_SCALE)
    {
        if (header.flags & STUDIO_ANIM_ANIMSCALE)
        {
            rle_valueptr pScale(frameCount) <fgcolor=cLtYellow>;
        }
        else
        {
            Vector48 scale <fgcolor=cLtYellow>;
        }
    }
};

struct rle_anim(const uint64_t baseptr, const int animindex, const int frameCount)
{
    local const uint64_t animbase = (baseptr + animindex);

#ifdef FEATURE_STATICSTRUCTS
#ifndef RIG_PRESENT
    // for anims without weightlist
    BoneCountCheat(animbase);
#endif
#endif

    FSeek(animbase);
    struct {
        nibble boneFlag[boneCount] <optimize=false, read=ReadFlags(this.bits, flags_animBone_r5)>;
    } boneFlags <fgcolor=0xaa8822>;

    FSeek(animbase + ParseRLEAnimationOffset(boneCount));

    local int boneIdx = 0;
    local uint8_t flags = 0;
    for (boneIdx = 0; boneIdx < boneCount; boneIdx++)
    {
        flags = boneFlags.boneFlag[boneIdx].bits;
        if (!(flags & STUDIO_ANIM_DATA))
            continue;

        rle_bone bone(flags, frameCount);

        FSeek(startof(bone) + bone.header.size);
    };
};

struct dp_rot_2x1 (const int frameCount)
{
    uint8_t valid <fgcolor=0x2255ff>;   
    uint8_t total <fgcolor=0x2255ff>;           
    
    if (valid < frameCount)
    {
        uint8_t frameIndices[total] <fgcolor=0x2266dd>;
    }
    
    AnimQuat32 packedQuats[valid] <fgcolor=0x5522ff>;
    AxisFixup_t axisFixups[total] <fgcolor=0x3344ff>;
};

// flag 0x8
struct dp_pos_1x1 (const int frameCount)
{
    uint8_t total <fgcolor=0x55ff22>;       
    
    float16 scale <fgcolor=0x22ff88>;

    if (total < frameCount)
    {
        uint8_t frameIndices[total] <fgcolor=0x66dd22>;
    }
    
    AxisFixup_t axisFixups[total] <fgcolor=0x44ff33>;
};

// flag 0x10
struct dp_pos_2x1 (const int frameCount)
{
    uint8_t valid <fgcolor=0x55ff22>;   
    uint8_t total <fgcolor=0x55ff22>;     
    
    if (!total)
        return;

    if (valid < frameCount)
    {
        uint8_t frameIndices[total] <fgcolor=0x66dd22>;
    }
    
    AnimPos64 packedPositions[valid] <fgcolor=0x22ff88>;
    AxisFixup_t axisFixups[total] <fgcolor=0x44ff33>;
};

// framemovements
struct dp_pos_2x2 (const int frameCount)
{
    uint16_t valid <fgcolor=0x55ff22>;   
    uint16_t total <fgcolor=0x55ff22>;     
    
    if (!total)
        return;

    if (valid < frameCount)
    {
        uint16_t frameIndices[total] <fgcolor=0x66dd22>;
    }
    
    AnimPos64 packedPositions[valid] <fgcolor=0x22ff88>;
    AxisFixup_t axisFixups[total] <fgcolor=0x44ff33>;
};


struct dp_scale (const int frameCount)
{
    uint8_t total <fgcolor=0x22ddff>;       
    
    if (total < frameCount)
    {
        uint8_t frameIndices[total] <fgcolor=0x33bbff>;
    }
    
    Vector48 scales[total] <fgcolor=0x2288ff>;
};


// singles, framemovement
struct dp_single_1x2 (const int frameCount)
{
    uint16_t total <fgcolor=0xff3355>;

    if (!total)
        return;

    if (total < frameCount)
    {
        uint16_t frameIndices[total] <fgcolor=0xdd6644>;
    }
    
    float16 singles[total] <fgcolor=0xff5522>;
};

struct dp_bone(const uint8_t boneFlags, const int frameCount)
{
    mstudio_rle_anim_t header <fgcolor=0xAA3366>;

    local uint64_t localPos = FTell();

    if (boneFlags & STUDIO_ANIM_ROT)
    {
        dp_rot_2x1 rot(frameCount);
    }

    if (boneFlags & STUDIO_ANIM_POS)
    {
        if (boneFlags & STUDIO_ANIM_UNK8)
        {
            dp_pos_1x1 pos(frameCount);
        }
        else
        {
            dp_pos_2x1 pos(frameCount);
        }
    }

    if (boneFlags & STUDIO_ANIM_SCALE)
    {
        dp_scale scale(frameCount);
    }
};

struct dp_anim(const uint64_t baseptr, const int animindex, const int frameCount)
{
    local const uint64_t animbase = (baseptr + animindex);

#ifdef FEATURE_STATICSTRUCTS
#ifndef RIG_PRESENT
    // for anims without weightlist
    BoneCountCheat(animbase);
#endif
#endif

    FSeek(animbase);
    struct {
        nibble boneFlag[boneCount] <optimize=false, read=ReadFlags(this, flags_animBone_r5)>;
    } boneFlags <fgcolor=0xaa8822>;

    FSeek(animbase + ParseRLEAnimationOffset(boneCount));

    local int boneIdx = 0;
    local uint8_t flags = 0;
    for (boneIdx = 0; boneIdx < boneCount; boneIdx++)
    {
        flags = boneFlags.boneFlag[boneIdx].bits;
        if (!(flags & STUDIO_ANIM_DATA))
            continue;

        dp_bone bone(flags, frameCount);

        FSeek(startof(bone) + bone.header.size);
    };
};

// da ik
struct ikerror_section(const int frameCount)
{
    int16_t offsets[6] <fgcolor=0x779911>;

    local int idx = 0;
    // rotation tracks are invalid? and the game does not care or handle it, on paper this is a bug with apex.
    // it appears on some sections there is empty animvalues, but others alignment cuts it off
    // I bet this will be studiomdl writing offsets despite there being no data
    for (idx = 0; idx < 3; idx++)
    {
        if (!offsets[idx])
            continue;

        FSeek(startof(offsets) + offsets[idx]);

        switch (idx)
        {
        case 0:
            rle_valuetrack track_pos_x(frameCount) <fgcolor=0x228822>;
            break;
        case 1:
            rle_valuetrack track_pos_y(frameCount) <fgcolor=0x228822>;
            break;
        case 2:
            rle_valuetrack track_pos_z(frameCount) <fgcolor=0x228822>;
            break;
        case 3:
            rle_valuetrack track_rot_x(frameCount) <fgcolor=0x228822>;
            break;
        case 4:
            rle_valuetrack track_rot_y(frameCount) <fgcolor=0x228822>;
            break;
        case 5:
            rle_valuetrack track_rot_z(frameCount) <fgcolor=0x228822>;
            break;
        }
    }
};

struct anim_ikrule(mstudioanimdesc_t& animdesc)
{
    mstudioikrule_t ikrule <fgcolor=cGreen>;

    if(ikrule.compressedikerror.sectionframes)
    {
        FSeek(startof(ikrule) + ikrule.compressedikerrorindex);
        struct {
            local int sectionCount = ((float)(animdesc.numframes - 1) / (float)ikrule.compressedikerror.sectionframes) + 1;
            local int sectionFrameCount = ikrule.compressedikerror.sectionframes;

#ifdef USE_BIG_NUMBERS
            int sectionindices[sectionCount] <bgcolor=cDkGreen>;
#else
            uint16_t sectionindices[sectionCount] <bgcolor=cDkGreen>;
#endif

            local int idx = 0;
            for (idx = 0; idx < sectionCount; idx++)
            {
                if (idx == (sectionCount - 1))
                    sectionFrameCount = (animdesc.numframes - 1) % ikrule.compressedikerror.sectionframes;

                FSeek(startof(ikrule) + GetOffset(sectionindices[idx]));
                ikerror_section section(sectionFrameCount);
            };

        } compressedikerror;
    }

    // supported but never seen it used
    if(ikrule.szattachmentindex)
    {
        FSeek(startof(ikrule) + GetOffset(ikrule.szattachmentindex));
        string attachment <fgcolor=cGreen>;
    }
};

// da mover
struct movement_section(const int frameCount)
{
    int16_t offsets[4] <fgcolor=0x77ccbb>;

    local int idx = 0;
    for (idx = 0; idx < 4; idx++)
    {
        if (!offsets[idx])
            continue;

        FSeek(startof(offsets) + offsets[idx]);

        switch (idx)
        {
        case 0:
            rle_valuetrack track_pos_x(frameCount) <fgcolor=0x99CC99>;
            break;
        case 1:
            rle_valuetrack track_pos_y(frameCount) <fgcolor=0x99CC99>;
            break;
        case 2:
            rle_valuetrack track_pos_z(frameCount) <fgcolor=0x99CC99>;
            break;
        case 3:
            rle_valuetrack track_yaw(frameCount) <fgcolor=0xAADDAA>;
            break;
        }
    }
};

struct anim_movement(mstudioanimdesc_t& animdesc)
{
    mstudioframemovement_t movement <fgcolor=0x77ccbb>;

    local int sectionCount = ((float)(animdesc.numframes - 1) / (float)movement.sectionframes) + 1;
    local int sectionFrameCount = movement.sectionframes;

#ifdef USE_BIG_NUMBERS
    int sectionindices[sectionCount] <fgcolor=0x99ffcc>;
#else
    uint16_t sectionindices[sectionCount] <fgcolor=0x99ffcc>;
#endif

    if (animdesc.flags & STUDIO_DATAPOINTANIM)
    {
        dp_pos_2x2 positions(movement.sectionframes);   
        dp_single_1x2 yaws(movement.sectionframes);

        return;
    }

    local int idx = 0;
    for (idx = 0; idx < sectionCount; idx++)
    {
        if (idx == (sectionCount - 1))
            sectionFrameCount = (animdesc.numframes - 1) % movement.sectionframes;

        FSeek(startof(movement) + GetOffset(sectionindices[idx]));
        movement_section section(sectionFrameCount);
    };
};

int GetSectionLength_RLE(mstudioanimdesc_t&, const int section, const int numSections)
{
    // no sections use numframes
    if (!animdesc.sectionframes)
        return numframes;

#ifdef FEATURE_STALL
    const int sectionstallframes = animdesc.sectionstallframes;
#else
    const int sectionstallframes = 0;
#endif

    // stall section
    if (sectionstallframes && section == 0)
        return sectionstallframes;
    
    // final section always has one frame with static values
    if (section == (numSections - 1))
        return 1;

    const bool useStall = sectionstallframes ? true : false;

    // how many "real" sections here, we don't want to include stall in this
    const int sectionbase = section - useStall;
    const int frameoffset = sectionstallframes + (sectionbase * animdesc.sectionframes);
    
    const int remainingframes = animdesc.numframes - frameoffset - 1;
    
    if (remainingframes <= animdesc.sectionframes)
	    return remainingframes;

    return animdesc.sectionframes;
}

const int GetSectionLength_DP(mstudioanimdesc_t& animdesc, const int section)
{
    // no sections use numframes
    if (!animdesc.sectionframes)
        return numframes;

    // stall section
    if (animdesc.sectionstallframes && section == 0)
        return animdesc.sectionstallframes;
    
    // how many "real" sections here, we don't want to include stall in this
    const int sectionbase = section - 1;
    const int frameoffset = animdesc.sectionstallframes + (sectionbase * animdesc.sectionframes);
    
    const int remainingframes = animdesc.numframes - frameoffset;
    
    if (remainingframes <= animdesc.sectionframes)
	    return remainingframes;

    return animdesc.sectionframes;
}

// these functions subtract one to make the number of frames the max index
// if we don't do this, sections that are not full length will cause issues
const int GetSectionCount(mstudioanimdesc_t& animdesc)
{
    const int useTrailSection = (animdesc.flags & STUDIO_DATAPOINTANIM) ? false : true;

    local int useStallSection = 0;
#ifndef FEATURE_EXTERNAL_ANIM
#ifdef FEATURE_STALL
    useStallSection = animdesc.sectionstallframes ? true : false;
#endif
#endif

    const int sectionbase = (animdesc.numframes - animdesc.sectionstallframes - 1) / animdesc.sectionframes; // subtract one to get the max frame index
    const int sectionindex = sectionbase + useTrailSection + useStallSection; // add the trailing section and stall section
    return sectionindex + 1; // make this index a count
}

void ParseAnimdesc(const uint64_t baseptr, const int animindex)
{
    FSeek(baseptr + GetOffset(animindex));
    struct {
        mstudioanimdesc_t animdesc <fgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;

        local int j = 0;

        const bool isDataPoint = animdesc.flags & STUDIO_DATAPOINTANIM ? true : false;

        if ((animdesc.flags & STUDIO_HAS_ANIM) && animdesc.sectionframes > 0)
        {
            // this equation gets the max INDEX of the array, if we add one to this, we'll get the section count
            local const int sectionCount = GetSectionCount(animdesc);
            local int maxFrames = 0;

            FSeek(startof(animdesc) + GetOffset(animdesc.sectionindex));
            mstudioanimsections_t sections[sectionCount] <fgcolor=cLtBlue>;

#ifndef FEATURE_EXTERNAL_ANIM
            for (j = 0; j < sectionCount; j++)
            {
                // check if this section is stored externally!
#ifdef FEATURE_STALL
#ifdef USE_BIG_NUMBERS
                if (sections[j].isExternal == true)
                    continue;
#else
                if (sections[j].animindex < 0)
                    continue;
#endif
#endif

                maxFrames = isDataPoint ? GetSectionLength_DP(animdesc, j) : GetSectionLength_RLE(animdesc, j, sectionCount);

                FSeek(startof(animdesc) + sections[j].animindex);
                if (isDataPoint)
                    dp_anim section(startof(animdesc), sections[j].animindex, maxFrames);
                else
                    rle_anim section(startof(animdesc), sections[j].animindex, maxFrames);
            };
#endif
        }

#ifndef FEATURE_EXTERNAL_ANIM
        if ((animdesc.flags & STUDIO_HAS_ANIM) && animdesc.sectionframes == 0)
        {
            FSeek(startof(animdesc) + animdesc.animindex);
            if (isDataPoint)
                dp_anim animation(startof(animdesc), animdesc.animindex, animdesc.numframes);
            else
                rle_anim animation(startof(animdesc), animdesc.animindex, animdesc.numframes - 1);
            
        }
#endif

        if(animdesc.numikrules && !(animdesc.ikruleindex == 3 || animdesc.ikruleindex == 5))
        {
            for(j = 0; j < animdesc.numikrules; j++)
            {
                FSeek(startof(animdesc) + GetOffset(animdesc.ikruleindex) + (sizeof(mstudioikrule_t) * j));
                anim_ikrule ikrule(animdesc);
            }
        }

        if ((animdesc.flags & STUDIO_FRAMEMOVEMENT) && animdesc.framemovementindex)
        {
            FSeek(startof(animdesc) + animdesc.framemovementindex);
            anim_movement movement(animdesc);
        }

    } anim <read=ReadString(startof(this.animdesc) + this.animdesc.sznameindex)>;
}

void ParseSeqdesc()
{
    mstudioseqdesc_t seqdesc <fgcolor=0xf0b27a, read=Str("label: %s; activity: %s;", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;
    
    // hacky but there really is no better way to get this without the rrig or rmdl
#ifndef RIG_PRESENT
    boneCount = (GetOffset(seqdesc.activitymodifierindex) - GetOffset(seqdesc.weightlistindex)) / 4;
#endif
    animCount = (seqdesc.groupsize[0] * seqdesc.groupsize[1]);

#ifdef FEATURE_STATICSTRUCTS
    if (seqdesc.weightlistindex == 1 || seqdesc.weightlistindex == 3)
    {
#ifndef RIG_PRESENT
        boneCount = 0;
#endif
        canParseAnim = false;
    }
#endif

    // pose keys
    if(seqdesc.posekeyindex)
    {
        FSeek(startof(seqdesc) + GetOffset(seqdesc.posekeyindex));
        float posekey[seqdesc.groupsize[0] + seqdesc.groupsize[1]] <fgcolor=0x55ee00>;
    }
    
    // events
    if(seqdesc.numevents)
    {
        FSeek(startof(seqdesc) + GetOffset(seqdesc.eventindex));
        mstudioevent_t seqevent[seqdesc.numevents] <fgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
    }
    
    // auto layers
    if(seqdesc.numautolayers)
    {
        FSeek(startof(seqdesc) + GetOffset(seqdesc.autolayerindex));
        mstudioautolayer_t autolayers[seqdesc.numautolayers] <fgcolor=0x226600>;
    }
    
    // bone weights
    if (boneCount && canParseAnim)
    {
        FSeek(startof(seqdesc) + GetOffset(seqdesc.weightlistindex));
        float weightlist[boneCount] <fgcolor=0xe1f27a>;
    }
    
    // act mods
    if (seqdesc.numactivitymodifiers)
    {
        FSeek(startof(seqdesc) + GetOffset(seqdesc.activitymodifierindex));
        mstudioactivitymodifier_t activitymodifier[seqdesc.numactivitymodifiers] <fgcolor=0x119900, read=ReadString(startof(this) + this.sznameindex)>;
    };
    
    // animdesc offsets
    FSeek(startof(seqdesc) + GetOffset(seqdesc.animindexindex));
    #ifdef USE_BIG_NUMBERS
    int blends[seqdesc.groupsize[0] * seqdesc.groupsize[1]] <fgcolor=0xffff00>;
    #else
    uint16_t blends[seqdesc.groupsize[0] * seqdesc.groupsize[1]] <fgcolor=0xffff00>;
    #endif

    for(i = 0; i < animCount; i++)
    {
        ParseAnimdesc(startof(seqdesc), blends[i]);
    }
    
    if(seqdesc.weightFixupCount)
    {
        FSeek(startof(seqdesc) + seqdesc.weightFixupOffset);
        mstudioseqweightfixup_t weightfixup[seqdesc.weightFixupCount] <fgcolor=0x9900BB>;
    }
    
#ifdef FEATURE_NOINTERPFRAMES
    if (seqdesc.noInterpFrameCount)
    {
        local const int dataSize = GetOffset(seqdesc.szlabelindex) - GetOffset(seqdesc.noInterpFrameOffset);
        local const bool usePairs = seqdesc.noInterpFrameCount * sizeof(mstudio_nointerpframes_t) == dataSize;
    
        FSeek(startof(seqdesc) + GetOffset(seqdesc.noInterpFrameOffset));
        if (usePairs)
            mstudio_nointerpframes_t nointerpframes[seqdesc.noInterpFrameCount]  <fgcolor=0x60e060>;
        else
            int nointerpframes[seqdesc.noInterpFrameCount] <fgcolor=0x60e060>;
    }
#endif
}