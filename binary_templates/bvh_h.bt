//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: bvh_h.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: reSource BVH4 Collision
//  Category: Dependency
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../source_math.bt"

#ifndef BVH_H
#define BVH_H

// leaves
enum dbvhchildtype_e
{
	BVH4_LEAF_NODE,
	BVH4_LEAF_NO_CHILD,
	BVH4_LEAF_INVALID = 2,
	BVH4_LEAF_ARRAY,
	BVH4_LEAF_PRIM_TRI,         // triangle primitive using float3 verts
	BVH4_LEAF_PRIM_TRI_PACKED,  // triangle primitive using uint16 verts
	BVH4_LEAF_PRIM_QUAD,        // quad primitive using float3 verts
	BVH4_LEAF_PRIM_QUAD_PACKED, // quad primitive using uint16 verts
	BVH4_LEAF_UNK_8,
	BVH4_LEAF_STATIC_PROP,
};

struct dbvhleaf_poly_t
{
	uint32_t unk : 12;
	uint32_t polyCount : 4; // +1
	uint32_t baseVertexOffset : 16; // used when the leaf refers to verts beyond an index of 1024
};

// type 3 elements
struct dbvhsubleaf_t
{
	uint8_t cmIndex;
	uint8_t primitiveType;
	uint16_t length; // in dwords
};

// type 8 leaf
struct dbvhtype8_t
{
	uint8_t vertexCount;
	uint8_t faceCount;
	uint8_t triCount;
	uint8_t quadCount;
	Vector origin;
	float decodeScale;
};

struct dbvhtri_t
{
	uint32_t vertAIndex : 11;
	uint32_t vertBIndex : 9;
	uint32_t vertCIndex : 9;
	uint32_t edgeMask : 3;
};

struct dbvhquad_t
{
	uint32_t vertAIndex : 10;
	uint32_t vertBIndex : 9;
	uint32_t vertCIndex : 9;
	uint32_t edgeMask : 4;
};

// nodes
struct dbvhaxis_t
{
	short minChild0;
	short maxChild0;

	short minChild1;
	short maxChild1;

	short minChild2;
	short maxChild2;

	short minChild3;
	short maxChild3;
};

struct dbvhnode_t
{
	dbvhaxis_t x;
	dbvhaxis_t y;
	dbvhaxis_t z;

	uint32_t cmIndex : 8; // 8-bit index into 32-bit collision mask array
	uint32_t index0 : 24;

	uint32_t pad : 8;
	uint32_t index1 : 24;

	uint32_t child0Type : 4;
	uint32_t child1Type : 4;
	uint32_t index2 : 24;

	uint32_t child2Type : 4;
	uint32_t child3Type : 4;
	uint32_t index3 : 24;
};

#endif