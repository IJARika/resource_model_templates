//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: starpak.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Starpak Files
//  Category: Archive
// File Mask: *.starpak
//  ID Bytes: 53 52 50 6B
//   History:
//------------------------------------------------

#include "../source_math.bt"

const local int64_t s_StarpakChunkAlignment = 4096;

struct starpakhdr_t
{
    int id <fgcolor=cGreen>;
    int version <fgcolor=cLtRed>;
};

struct starpakentry_t
{
    int64_t entryOffset;
    int64_t entrySize;
};

starpakhdr_t hdr;

FSeek(s_StarpakChunkAlignment); // chunks aligned to 4096
local int64_t pPos = FileSize();
local int64_t entryIndex;

pPos -= sizeof(int64_t);
FSeek(pPos);
int64_t entryCount <fgcolor=0xffaacc>;

pPos -= (sizeof(starpakentry_t) * entryCount);
FSeek(pPos);
starpakentry_t entries[entryCount] <fgcolor=0x66aaaa, read=Str("offset: %Ld size: %Ld", this.entryOffset, this.entrySize)>;

for (entryIndex = 0; entryIndex < entryCount; entryIndex++)
{
    FSeek(entries[entryIndex].entryOffset);
    struct {
        local int64_t localIndex  = entryIndex;
        char data[entries[entryIndex].entrySize];
    } entryData <fgcolor=cLtBlue, read=Str("size: %LX", entries[localIndex].entrySize)>;
}