//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: pakfile_core.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Pak Files
//  Category: Archive
// File Mask: *.rpak
//  ID Bytes: 52 50 61 6b
//   History: 
//------------------------------------------------

// pak header
PakHdr_t pakhdr <fgcolor=0xffffaa>;

if (pakhdr.magic != 0x6B615052)
{
    Printf("File was not a valid RPak");
    return;
}

const local uint64_t fileSize = FileSize();

// v6 pak is uncompressed
if (pakhdr.version > 6)
{
    if (pakhdr.flags & 0x100 && fileSize != pakhdr.dcmpSize)
    {
        Printf("Pak was compressed with respawn compression");
        return;
    }
    
    if (pakhdr.flags & 0x200 && fileSize != (pakhdr.dcmpSize + sizeof(PakHdr_t)))
    {
        Printf("Pak was compressed with oodle compression");
        return;
    }
}

// patches
if (exists(pakhdr.patchCount) && pakhdr.patchCount > 0)
{
    
    PakPatchDataHdr_t patchDataHeader;
    PakPatchFileHdr_t patchFileHeaders[pakhdr.patchCount];

    uint16_t patchIndices[pakhdr.patchCount];
}

// starpak paths
if (exists(pakhdr.streamingFilesBufSize))
    char streamFilePaths[pakhdr.streamingFilesBufSize] <fgcolor=0x22ff77>;

if (exists(pakhdr.optStreamingFilesBufSize))
    char optStreamFilePaths[pakhdr.optStreamingFilesBufSize] <fgcolor=0xaaff77>;

// patch data ?

// non paged data
PakSegmentHdr_t segments[pakhdr.numSegments] <fgcolor=0xccffcc>;
PakPageHdr_t pages[pakhdr.numPages] <fgcolor=0xffccaa, read=Str("sz %08x | seg (f: 0x%02x align: 0x%02x) | 0x%02x", this.size, segments[this.segment].flags, segments[this.segment].align, this.align), comment = ReadSegmentFlags(segments[this.segment].flags)>;
PakPointerHdr_t pointers[pakhdr.numPointers] <fgcolor=0xffaacc, read=Str("{page: %i ofs: %i}", this.index, this.offset)>;
PakAsset_t assets[pakhdr.numAssets] <fgcolor=0xbbaaaa, read=Str("%s - %LX", this.type.text, this.guid), comment=Str("v%i sz: %i", this.version, this.headerStructSize)>;

// asset guids within this pak, assets index into this
if(pakhdr.numGuidRefs)
{
    struct
    {
        for(i = 0; i < pakhdr.numAssets; i++)
        {
            if(!assets[i].dependenciesCount)
                continue;

            struct
            {
                local int asset = i;
                PakGuidRefHdr_t guidRef[assets[i].dependenciesCount];
            } guidRefByAsset <read = Str("%s - %LX", assets[this.asset].type.text, assets[this.asset].guid)>;
        }
    } guidRefs <fgcolor=0xddaaff>;
}

// which assets use this asset per asset
if(pakhdr.numDependencies)
{
    struct
    {
        for(i = 0; i < pakhdr.numAssets; i++)
        {
            if(!assets[i].dependentsCount)
                continue;
            
            struct
            {
                local int asset = i;
                int dependent[assets[i].dependentsCount] <read = Str("%s - %LX", assets[this].type.text, assets[this].guid), comment = Str("Asset Entry Index: %i", this)>;
            } dependentsByAsset <read = Str("%s - %LX", assets[this.asset].type.text, assets[this.asset].guid)>;
        }
    } dependents <fgcolor=0xff66ff>;
}

if(pakhdr.numExternalAssetRefs)
{
    int externalAssetOffset[pakhdr.numExternalAssetRefs] <bgcolor = cLtGreen, read = ReadString(startof(referencedAssetOffset[0]) + (pakhdr.ExternalAssetCount * 4) + this)>;
    char externalAssetBuffer[pakhdr.externalAssetRefsSize] <fgcolor=cLtGreen>;
}

if(exists(pakhdr.unkDataSize_74) && pakhdr.unkDataSize_74 > 0)
    char data_unk74[pakhdr.unkDataSize_74];

if(exists(pakhdr.unkDataSize_78) && pakhdr.unkDataSize_78 > 0)
    char data_unk78[pakhdr.unkDataSize_78];

if (exists(pakhdr.patchCount) && pakhdr.patchCount > 0)
{
    //char patchData[patchDataHeader.patchDataStreamSize];
}

// some functions and vars for data processing
local uint64_t pageoffsets[pakhdr.numPages]; // store the offset for each page

uint64_t PageTell(const PagePtr_t& ptr)
{
    return pageoffsets[ptr.index] + ptr.offset;
}

void PageSeek(const PagePtr_t& ptr)
{
    FSeek(PageTell(ptr));
}

string PageString(const PagePtr_t& ptr)
{
    if (!PtrIsValid(ptr))
        return "";

    return ReadString(PageTell(ptr));
}

string DefaultAssetName(const PakAsset_t& asset)
{
    return Str("%s - 0x%LX", asset.type.text, asset.guid);
}

string GetAssetName(const PakAsset_t& asset, const PagePtr_t& ptr)
{
    if (!PtrIsValid(ptr))
        return DefaultAssetName(asset);

    return ReadString(PageTell(ptr));
}

string GetAssetNameFull(const PakAsset_t& asset, const PagePtr_t& ptr, const string prefix, const string suffix)
{
    if (!PtrIsValid(ptr))
        return DefaultAssetName(asset);

    string name = ReadString(PageTell(ptr));

    const int prefixLength = Strlen(prefix);
    if (Strncmp(name, prefix, prefixLength))
        name = Str("%s\\%s", prefix, name);

    const int suffixLength = Strlen(suffix);
    const int suffixOffset = Strlen(name) - suffixLength;
    if (Strncmp(SubStr(name, suffixOffset, suffixLength), suffix, suffixLength))
        name = Str("%s%s", name, suffix);

    return name;
}

// paged data
struct {
    for (i = 0; i < pakhdr.numPages; i++)
    {
        pageoffsets[i] = FTell();

        struct
        {
            local int idx = i;
            char data[pages[i].size];
        } page <read = ReadSegmentFlags(segments[pages[this.idx].segment].flags), comment = Str("%i", this.idx)>;
    }
} page_data;

// asset deps
#include "../model/headers/studio_r5_h.bt"

// asset data
#include "./pakfile_txtr.bt"
#include "./pakfile_matl.bt"
#include "./pakfile_msnp.bt"
#include "./pakfile_mdl_.bt"
#include "./pakfile_arig.bt"
#include "./pakfile_aseq.bt"
#include "./pakfile_rpsk.bt"
#include "./pakfile_font.bt"
#include "./pakfile_uimg.bt"
#include "./pakfile_ui.bt"
#include "./pakfile_Ptch.bt"
#include "./pakfile_vers.bt"

FSeek(startof(page_data));
struct
{
    for(i = 0; i < pakhdr.numAssets; i++)
    {
        FSeek(startof(page_data));
        switch(assets[i].type.value)
        {
        case ID_TXTR:
        {
            struct {
                local int index = i;
                HandleTexture(assets[index], pageoffsets);
            } asset_txtr <read=GetAssetNameFull(assets[index], this.hdr.name, "texture", ".rpak")>;

            break;
        }
        case ID_MATL:
        {
            struct {
                local int index = i;
                HandleMaterial(assets[index], pageoffsets);
            } asset_matl <read = GetAssetName(assets[index], this.hdr.name)>;

            break;
        }
        case ID_MSNP:
        {
            struct {
                local int index = i;
                HandleMaterialSnapshot(assets[index], pageoffsets);
            } asset_msnp <read = DefaultAssetName(assets[index])>;

            break;
        }
        case ID_MDL_:
        {
            struct {
                local int index = i;
                HandleModel(assets[index], pageoffsets);
            } asset_mdl <read=GetAssetName(assets[index], this.hdr.name)>;

            break;
        }
        case ID_ARIG:
        {
            struct {
                local int index = i;
                HandleAnimRig(assets[index], pageoffsets);
            } asset_arig <read=GetAssetName(assets[index], this.hdr.name)>;

            break;
        }
        case ID_ASEQ:
        {
            struct {
                local int index = i;
                HandleAnimSeq(assets[index], pageoffsets);
            } asset_aseq <read=GetAssetName(assets[index], this.hdr.name)>;

            break;
        }
        case ID_RPSK:
        {
            struct {
                local int index = i;
                HandleParticleScript(assets[index], pageoffsets);
            } asset_rpsk <read=GetAssetNameFull(assets[index], this.hdr.name, "particle_script", ".rpak")>;

            break;
        }
        case ID_FONT:
        {
            struct {
                local int index = i;
                HandleUIFontAtlas(assets[index], pageoffsets);
            } asset_font <read=DefaultAssetName(assets[index])>;

            break;
        }
        case ID_UIMG:
        {
            struct {
                local int index = i;
                HandleUIImageAtlas(assets[index], pageoffsets);
            } asset_uimg <read=DefaultAssetName(assets[index])>;

            break;
        }
        case ID_UI:
        {
            struct {
                local int index = i;
                HandleUI(assets[index], pageoffsets);
            } asset_ui <read=GetAssetNameFull(assets[index], this.hdr.name, "ui", ".rpak")>;

            break;
        }
        case ID_PTCH:
        {
            struct {
                local int index = i;
                HandlePTCH(assets[index], pageoffsets);
            } asset_Ptch <read="patch_master.rpak">;

            break;
        }
        case ID_VERS:
        {
            struct {
                local int index = i;
                HandleVERS(assets[index], pageoffsets);
            } asset_vers <read="patch_master.rpak">;

            break;
        }
        default:
        {
            struct {
                local int index = i;
                PageSeek(assets[index].headPagePtr);
                char data[assets[index].headerStructSize];
            } asset_stub <read=DefaultAssetName(assets[index])>;

            break;
        }
        }
    }
} asset_data;

// after asset data as it can take a while
if (pakhdr.numGuidRefs)
{
    FSeek(startof(guidRefs));
    PakGuidRefHdr_t internalGuidRefs[pakhdr.numGuidRefs] <hidden=true>;

    for(i = 0; i < pakhdr.numGuidRefs; i++)
    {
        PageSeek(internalGuidRefs[i]);
        uint64_t guid <hidden=true, fgcolor=cYellow>;
    }
}

// color pointers
local const int64_t numPointersClamped = pakhdr.numPointers > 0xFFFF ? 0xFFFF : pakhdr.numPointers;

for (i = 0; i < numPointersClamped; i++)
{
    PageSeek(pointers[i]);
    PagePtr_t ptr <hidden=true, fgcolor=0xCCCC00, optimize=true>;
}