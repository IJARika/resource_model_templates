//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vtx.bt
//   Authors: Valve
//   Version: 7
//   Purpose: Valve Mesh Strip File
//  Category: Struct
// File Mask: *.vtx, *.sw.vtx, *.dx80.vtx, *.dx90.vtx, *.dx11.vtx
//  ID Bytes: 07 00 00 00
//   History: 
//------------------------------------------------

#include "../source_math.bt"

#define MAX_NUM_LODS 8
#define MAX_NUM_BONES_PER_VERT 3

//
// vtx structs
//
struct FileHeader_t
{
	// file version as defined by OPTIMIZED_MODEL_FILE_VERSION (currently 7)
	int version;

	// hardware params that affect how the model is to be optimized.
	int vertCacheSize;
	unsigned short maxBonesPerStrip;
	unsigned short maxBonesPerFace;
	int maxBonesPerVert;

	// must match checkSum in the .mdl
	int checkSum;

	int numLODs; // Also specified in ModelHeader_t's and should match

	// Offset to materialReplacementList Array. one of these for each LOD, 8 in total
	int materialReplacementListOffset;

    // Defines the size and location of the body part array
	int numBodyParts;
	int bodyPartOffset;
};

struct BodyPartHeader_t
{
	// Model array
	int numModels;
	int modelOffset;
};

struct ModelHeader_t
{
	//LOD mesh array
	int numLODs;   //This is also specified in FileHeader_t
	int lodOffset;
};

struct ModelLODHeader_t
{
    //Mesh array
	int numMeshes;
	int meshOffset;

	float switchPoint;
};

enum <ubyte> MeshFlags_t
{ 
	// these are both material properties, and a mesh has a single material.
	MESH_IS_TEETH	= 0x01, 
	MESH_IS_EYES	= 0x02
};

struct MeshHeader_t
{
	int numStripGroups;
	int stripGroupHeaderOffset;

	MeshFlags_t flags;
};

enum <ubyte> StripGroupFlags_t
{
	STRIPGROUP_IS_HWSKINNED		 = 0x02,
	STRIPGROUP_IS_DELTA_FLEXED	 = 0x04,
	STRIPGROUP_SUPPRESS_HW_MORPH = 0x08,	// NOTE: This is a temporary flag used at run time.
};

struct StripGroupHeader_t
{
	// These are the arrays of all verts and indices for this mesh.  strips index into this.
	int numVerts;
	int vertOffset;

	int numIndices;
	int indexOffset;

	int numStrips;
	int stripOffset;

	StripGroupFlags_t flags;

	// The following fields are only present if MDL version is >=49
	// Points to an array of unsigned shorts (16 bits each)
	int numTopologyIndices;
	int topologyOffset;
};

enum <ubyte> StripHeaderFlags_t
{
	STRIP_IS_TRILIST		= 0x01,
	STRIP_IS_QUADLIST_REG	= 0x02,		// Regular sub-d quads
	STRIP_IS_QUADLIST_EXTRA = 0x04		// Extraordinary sub-d quads
};


// A strip is a piece of a stripgroup which is divided by bones 
struct StripHeader_t
{
	int numIndices;
	int indexOffset;

	int numVerts;    
	int vertOffset;

	short numBones;

	StripHeaderFlags_t flags;

	int numBoneStateChanges;
	int boneStateChangeOffset;

	// MDL Version 49 and up only
	int numTopologyIndices;
	int topologyOffset;
};

struct Vertex_t
{
	// these index into the mesh's vert[origMeshVertID]'s bones
	unsigned char boneWeightIndex[MAX_NUM_BONES_PER_VERT];
	unsigned char numBones;

	unsigned short origMeshVertID;

	// for sw skinned verts, these are indices into the global list of bones
	// for hw skinned verts, these are hardware bone indices
	char boneID[MAX_NUM_BONES_PER_VERT];
};

struct MaterialReplacementHeader_t
{
	short materialID;
	int replacementMaterialNameOffset;
};

struct MaterialReplacementListHeader_t
{
	int numReplacements;
	int replacementOffset;
};

struct BoneStateChangeHeader_t
{
	int hardwareID;
	int newBoneID;
};

struct vertgroup
{
    Vertex_t vtx_stripverts[vtx_stripgrphdr[i].numVerts] <bgcolor=cPurple>;
};

struct indicegroup
{
    int16 indice[vtx_stripgrphdr[i].numIndices] <bgcolor=cDkPurple>;
};

struct bonestategroup
{
    BoneStateChangeHeader_t bonestate[vtx_strips[i].numBoneStateChanges] <bgcolor=cLtPurple>;
};

//
// vtx template
//
FileHeader_t vtxhdr <bgcolor=cLtPurple>;

// if this is in a studio model (such as v53) we can read the names for these parts
const bool inStudioModel = exists(hdr) && exists(bodyparts) && exists(textures) ? true : false;

struct vtxstripgrphdr_t
{
    StripGroupHeader_t stripgroup <fgcolor=cDkPurple>;
    
    local int stripIdx;
    for(stripIdx = 0; stripIdx < stripgroup.numStrips; stripIdx++)
    {
        FSeek(startof(stripgroup) + stripgroup.stripOffset + (sizeof(StripHeader_t) * stripIdx));
        struct {
            StripHeader_t strip <fgcolor=cLtPurple>;
    
            FSeek(startof(stripgroup) + stripgroup.vertOffset + (strip.vertOffset * sizeof(Vertex_t)));
            Vertex_t verts[strip.numVerts] <bgcolor=cPurple>;
    
            FSeek(startof(stripgroup) + stripgroup.indexOffset + (strip.indexOffset * 2));
            unsigned short indices[strip.numIndices] <bgcolor=cDkPurple>;
    
            if(strip.boneStateChangeOffset && strip.numBoneStateChanges)
            {
                FSeek(startof(strip) + strip.boneStateChangeOffset);
                BoneStateChangeHeader_t bonestate[strip.numBoneStateChanges] <bgcolor=cLtPurple>;
            }
        } strip;
    }
};

struct vtxmesh_t(const int bpIdx, const int modelIdx, const int meshIdx)
{
    local string name = "";
    if (inStudioModel)
    {
        local const int material = bodyparts.bodypart[bpIdx].models[modelIdx].meshes[meshIdx].material;
        name = ReadString(startof(textures[material]) + textures[material].sznameindex);
    }

    MeshHeader_t mesh <fgcolor=cPurple>;

    if (mesh.numStripGroups)
    {
        local int stripGrpIdx = 0;
        for (stripGrpIdx = 0; stripGrpIdx < mesh.numStripGroups; stripGrpIdx++)
        {
            FSeek(startof(mesh) + mesh.stripGroupHeaderOffset + (sizeof(StripGroupHeader_t) * stripGrpIdx));
            vtxstripgrphdr_t stripgroup;
        }
    }
};

struct vtxlod_t(const int bpIdx, const int modelIdx)
{
    ModelLODHeader_t lod <fgcolor=cLtPurple>;

    if (lod.numMeshes)
    {
        local int meshIdx = 0;
        for (meshIdx = 0; meshIdx < lod.numMeshes; meshIdx++)
        {
            FSeek(startof(lod) + lod.meshOffset + (sizeof(MeshHeader_t) * meshIdx));
            vtxmesh_t mesh(bpIdx, modelIdx, meshIdx) <read=this.name>;
        }
    }
};

struct vtxmodel_t(const int bpIdx, const int modelIdx)
{
    local string name = "";
    if (inStudioModel)
        name = bodyparts.bodypart[bpIdx].models[modelIdx].model.name;

    ModelHeader_t model <fgcolor=cDkPurple>;

    if (model.numLODs)
    {
        local int lodIdx = 0;
        for (lodIdx = 0; lodIdx < model.numLODs; lodIdx++)
        {
            FSeek(startof(model) + model.lodOffset + (sizeof(ModelLODHeader_t) * lodIdx));
            vtxlod_t lod(bpIdx, modelIdx);
        }
    }
};

struct vtxbodypart_t(const int idx)
{
    local string name = "";
    if (inStudioModel)
        name = ReadString(startof(bodyparts.bodypart[idx].bodypart) + bodyparts.bodypart[idx].bodypart.sznameindex);

    BodyPartHeader_t bodypart <fgcolor=cPurple>;
    
    if (bodypart.numModels)
    {
        local int modelIdx = 0;
        for (modelIdx = 0; modelIdx < bodypart.numModels; modelIdx++)
        {
            FSeek(startof(bodypart) + bodypart.modelOffset + (sizeof(ModelHeader_t) * modelIdx));
            vtxmodel_t model(idx, modelIdx) <read=this.name>;
        }
    }
};

local int partIdx = 0;
for (partIdx = 0; partIdx < vtxhdr.numBodyParts; partIdx++)
{
    FSeek(startof(vtxhdr) + vtxhdr.bodyPartOffset + (sizeof(BodyPartHeader_t) * partIdx));
    vtxbodypart_t bodypart(partIdx) <read=this.name>;
};


FSeek(startof(vtxhdr) + vtxhdr.materialReplacementListOffset);
MaterialReplacementListHeader_t materialReplacementList[vtxhdr.numLODs] <bgcolor=0xDD00AA>;