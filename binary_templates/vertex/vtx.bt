//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vtx.bt
//   Authors: Valve
//   Version: 7
//   Purpose: Valve Mesh Strip File
//  Category: Model
// File Mask: *.vtx, *.sw.vtx, *.dx80.vtx, *.dx90.vtx, *.dx11.vtx
//  ID Bytes: 07 00 00 00
//   History: 
//------------------------------------------------

#include "../source_math.bt"
#include "../vertex/headers/vertex_h.bt"

struct vertgroup
{
    Vertex_t vtx_stripverts[vtx_stripgrphdr[i].numVerts] <bgcolor=cPurple>;
};

struct indicegroup
{
    int16 indice[vtx_stripgrphdr[i].numIndices] <bgcolor=cDkPurple>;
};

struct bonestategroup
{
    BoneStateChangeHeader_t bonestate[vtx_strips[i].numBoneStateChanges] <bgcolor=cLtPurple>;
};

//
// vtx template
//
FileHeader_t vtxhdr <bgcolor=cLtPurple>;

// if this is in a studio model (such as v53) we can read the names for these parts
const bool inStudioModel = exists(hdr) && exists(bodyparts) && exists(textures) ? true : false;

struct vtxstripgrphdr_t
{
    StripGroupHeader_t stripgroup <fgcolor=cDkPurple>;
    
    local int stripIdx;
    for(stripIdx = 0; stripIdx < stripgroup.numStrips; stripIdx++)
    {
        FSeek(startof(stripgroup) + stripgroup.stripOffset + (sizeof(StripHeader_t) * stripIdx));
        struct {
            StripHeader_t strip <fgcolor=cLtPurple>;
    
            FSeek(startof(stripgroup) + stripgroup.vertOffset + (strip.vertOffset * sizeof(Vertex_t)));
            Vertex_t verts[strip.numVerts] <bgcolor=cPurple>;
    
            FSeek(startof(stripgroup) + stripgroup.indexOffset + (strip.indexOffset * 2));
            unsigned short indices[strip.numIndices] <bgcolor=cDkPurple>;
    
            if(strip.boneStateChangeOffset && strip.numBoneStateChanges)
            {
                FSeek(startof(strip) + strip.boneStateChangeOffset);
                BoneStateChangeHeader_t bonestate[strip.numBoneStateChanges] <bgcolor=cLtPurple>;
            }
        } strip;
    }
};

struct vtxmesh_t(const int bpIdx, const int modelIdx, const int meshIdx)
{
    local string name = "";
    if (inStudioModel)
    {
        local const int material = bodyparts.bodypart[bpIdx].models[modelIdx].meshes[meshIdx].material;
        name = ReadString(startof(textures[material]) + textures[material].sznameindex);
    }

    MeshHeader_t mesh <fgcolor=cPurple>;

    if (mesh.numStripGroups)
    {
        local int stripGrpIdx = 0;
        for (stripGrpIdx = 0; stripGrpIdx < mesh.numStripGroups; stripGrpIdx++)
        {
            FSeek(startof(mesh) + mesh.stripGroupHeaderOffset + (sizeof(StripGroupHeader_t) * stripGrpIdx));
            vtxstripgrphdr_t stripgroup;
        }
    }
};

struct vtxlod_t(const int bpIdx, const int modelIdx)
{
    ModelLODHeader_t lod <fgcolor=cLtPurple>;

    if (lod.numMeshes)
    {
        local int meshIdx = 0;
        for (meshIdx = 0; meshIdx < lod.numMeshes; meshIdx++)
        {
            FSeek(startof(lod) + lod.meshOffset + (sizeof(MeshHeader_t) * meshIdx));
            vtxmesh_t mesh(bpIdx, modelIdx, meshIdx) <read=this.name>;
        }
    }
};

struct vtxmodel_t(const int bpIdx, const int modelIdx)
{
    local string name = "";
    if (inStudioModel)
        name = bodyparts.bodypart[bpIdx].models[modelIdx].model.name;

    ModelHeader_t model <fgcolor=cDkPurple>;

    if (model.numLODs)
    {
        local int lodIdx = 0;
        for (lodIdx = 0; lodIdx < model.numLODs; lodIdx++)
        {
            FSeek(startof(model) + model.lodOffset + (sizeof(ModelLODHeader_t) * lodIdx));
            vtxlod_t lod(bpIdx, modelIdx);
        }
    }
};

struct vtxbodypart_t(const int idx)
{
    local string name = "";
    if (inStudioModel)
        name = ReadString(startof(bodyparts.bodypart[idx].bodypart) + bodyparts.bodypart[idx].bodypart.sznameindex);

    BodyPartHeader_t bodypart <fgcolor=cPurple>;
    
    if (bodypart.numModels)
    {
        local int modelIdx = 0;
        for (modelIdx = 0; modelIdx < bodypart.numModels; modelIdx++)
        {
            FSeek(startof(bodypart) + bodypart.modelOffset + (sizeof(ModelHeader_t) * modelIdx));
            vtxmodel_t model(idx, modelIdx) <read=this.name>;
        }
    }
};

local int partIdx = 0;
for (partIdx = 0; partIdx < vtxhdr.numBodyParts; partIdx++)
{
    FSeek(startof(vtxhdr) + vtxhdr.bodyPartOffset + (sizeof(BodyPartHeader_t) * partIdx));
    vtxbodypart_t bodypart(partIdx) <read=this.name>;
};


struct MaterialReplacement_t(const int64_t baseptr, const int idx)
{
    FSeek(baseptr + (sizeof(MaterialReplacementListHeader_t) * idx));
    MaterialReplacementListHeader_t listhdr <bgcolor=0xDD00AA>;

    if (listhdr.numReplacements)
    {
        FSeek(startof(listhdr) + listhdr.replacementOffset);
        MaterialReplacementHeader_t replaceheader[listhdr.numReplacements] <fgcolor=0xDD00AA, read=ReadString(startof(this) + this.replacementMaterialNameOffset)>;
    }
};

const int64_t materialReplacementBaseptr = FTell();

FSeek(materialReplacementBaseptr);
struct (FileHeader_t& vtxhdr){
    local const int numLODs = vtxhdr.numLODs;

    for (i = 0; i < vtxhdr.numLODs; i++)
    {
        FSeek(materialReplacementBaseptr);
        MaterialReplacement_t materialReplacementList(startof(vtxhdr) + vtxhdr.materialReplacementListOffset, i) <read=Str("%i replacements", this.listhdr.numReplacements)>;
    }
} materialReplacements(vtxhdr) <read=Str("%i material replacement lists (LODs)", numLODs)>;