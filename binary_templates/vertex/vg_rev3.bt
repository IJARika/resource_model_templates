//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vtx.bt
//   Authors: Valve
//   Version: 7
//   Purpose: Valve Mesh Strip File
//  Category: Struct
// File Mask: *.vtx, *.sw.vtx, *.dx80.vtx, *.dx90.vtx, *.dx11.vtx
//  ID Bytes: 07 00 00 00
//   History: 
//------------------------------------------------

#define HWDATA

#include "../source_math.bt"
#include "../vertex/headers/vertex_h.bt"

BitfieldDisablePadding();
// potential for several per file
struct VertexGroupHeader_t
{
	int id;			// 0x47567430	'0tVG'
	int version;	// 0x1

	int lodIndex;	// 
	int lodCount;	// number of lods contained within this group
	int groupIndex;	// vertex group index
	int lodMap;		// lods in this group, each bit is a lod

	int64_t lodOffset;
};

struct MeshHeader_t
{
	uint64_t flags;

    uint32_t vertCacheSize;			// number of bytes used from the vertex buffer
    uint32_t vertCount;				// number of vertices
    
    int64_t indexOffset;			// start offset for this mesh's "indices"
    int64_t indexCount : 56;        // number of indices
    int64_t indexType : 8;			// tri quad? StripHeaderFlags_t

    int64_t vertOffset;             // start offset for this mesh's vertices
    int64_t vertBufferSize;         // TOTAL size of vertex buffer

    int64_t extraBoneWeightOffset;	// start offset for this mesh's extra bone weights
    int64_t extraBoneWeightSize;    // size or count of extra bone weights

    // unused now
    int64_t deprecated_legacyWeightOffset;	// seems to be an offset into the "external weights" buffer for this mesh
    int64_t deprecated_legacyWeightCount;	// seems to be the number of "external weights" that this mesh uses
    
    int64_t deprecated_stripOffset;			// Index into the strips structs
    int64_t deprecated_stripCount;
    
    int64_t blendShapeVertOffset;
    int64_t blendShapeVertBufferSize;		// shapeCount = meshCountBlends in mstudiomodel_t
};

struct ModelLODHeader_t
{
	int dataOffset; // stolen from rmdl
	int dataSize;

	// this is like the section in rmdl, but backwards for some reason
	uint8_t meshCount;
	uint8_t meshIndex;	// for lod, probably 0 in most cases
	uint8_t lodLevel;		// lod level that this header represents
	uint8_t groupIndex;	// vertex group index

	float switchPoint;

	int64_t meshOffset;
};
BitfieldEnablePadding();

VertexGroupHeader_t hdr <fgcolor=0x99CC44>;

struct Mesh_t
{
    MeshHeader_t mesh <fgcolor=cLtRed>;

    if (!mesh.flags)
        return;
    
    FSeek(startof(mesh.indexOffset) + mesh.indexOffset);
    unsigned short indice[mesh.indexCount] <bgcolor=cLtBlue>;

    FSeek(startof(mesh.vertOffset) + mesh.vertOffset);
    if(mesh.extraBoneWeightSize)
    {
        local int64_t vertIdx;
        struct {
            for(vertIdx = 0; vertIdx < mesh.vertCount; vertIdx++)
            {
                FSeek(startof(mesh.vertOffset) + mesh.vertOffset + (mesh.vertCacheSize * vertIdx));
                VertexData_t vertex(mesh.flags, startof(mesh.extraBoneWeightOffset) + mesh.extraBoneWeightOffset);
            }
        } verts;
    }
    else
    {
        Vertex_t verts(mesh.flags)[mesh.vertCount] <bgcolor=cDkBlue, optimize=true>;
    }

    if (mesh.blendShapeVertBufferSize)
    {
        FSeek(startof(mesh.blendShapeVertOffset) + mesh.blendShapeVertOffset);
        BlendShapeVertex_s blendShapeVerts[mesh.blendShapeVertBufferSize / sizeof(BlendShapeVertex_s)] <fgcolor=cLtBlue>;
    }
};

struct LOD_t
{
    ModelLODHeader_t lod <bgcolor=cLtGray>;

    // assuming these are for loading chunks into memory instead of the whole file
    // these get referenced by studio_hw_groupdata_t
    // verify this
    if (FileSize() > 0x1000)
    {
        local const uint64_t beforeSize = Align(sizeof(VertexGroupHeader_t) + sizeof(ModelLODHeader_t), 16);

        FSeek(startof(lod.meshOffset) + lod.meshOffset - (beforeSize));
        VertexGroupHeader_t chunk_hdr <fgcolor=0x99CC44>;

        FSeek(startof(chunk_hdr.lodOffset) + chunk_hdr.lodOffset);
        ModelLODHeader_t chunk_lod <bgcolor=cLtGray>;
    }

    local int64_t meshIdx;
    for(meshIdx = 0; meshIdx < lod.meshCount; meshIdx++)
    {
        FSeek(startof(lod.meshOffset) + lod.meshOffset + (meshIdx * sizeof(MeshHeader_t)));
        Mesh_t mesh <read=Str("- %i vertices, %i indices, %i weights", this.mesh.vertCount, this.mesh.indexCount, this.mesh.extraBoneWeightSize / 4)>;
    }
};

for(i = 0; i < hdr.lodCount; i++)
{
    FSeek(startof(hdr.lodOffset) + hdr.lodOffset + (i * sizeof(ModelLODHeader_t)));
    LOD_t lod <read=Str("======== LOD %i ========", this.lod.switchPoint)>;
}