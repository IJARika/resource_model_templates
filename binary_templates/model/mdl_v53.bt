//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl_v53.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Model Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 49 44 53 54 35
//   History: 
//------------------------------------------------

#include "../source_math.bt"
#include "../model/headers/studio_h.bt"

// headers
struct studiohdr_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 53 (0x35,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2_t to the front of the main header.
	char name[64]; // The internal name of the model, padding with null chars.
	// Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in chars.

	Vector eyeposition;	// ideal eye position

	Vector illumposition;	// illumination center

	Vector hull_min;		// ideal movement hull size
	Vector hull_max;

	Vector view_bbmin;		// clipping bounding box
	Vector view_bbmax;

	int flags;

	// highest observed: 250
	// max is definitely 256 because 8bit uint limit
	int numbones; // bones
	int boneindex;

	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;

	int numhitboxsets;
	int hitboxsetindex;

	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions

	int numlocalseq; // sequences
	int	localseqindex;

	int activitylistversion; // initialization flag - have the sequences been indexed? set on load
	int eventsindexed;

	// mstudiotexture_t
	// short rpak path
	// raw textures
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;

	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;

	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;

	int numbodyparts;
	int bodypartindex;

	int numlocalattachments;
	int localattachmentindex;

	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
	int localNodeUnk; // something about having nodes while include models also have nodes??? used only three times in r2, never used in apex, removed in rmdl v16. super_spectre_v1, titan_buddy, titan_buddy_skyway

	int deprecated_flexdescindex;

	int deprecated_numflexcontrollers;
	int deprecated_flexcontrollerindex;

	int deprecated_numflexrules;
	int deprecated_flexruleindex;

	int numikchains;
	int ikchainindex;

	int uiPanelCount;
	int uiPanelOffset;

	int numlocalposeparameters;
	int localposeparamindex;

	int surfacepropindex;

	int keyvalueindex;
	int keyvaluesize;

	int numlocalikautoplaylocks;
	int localikautoplaylockindex;

	float mass;
	int contents <read=ReadFlags(this, contentsFlags)>;

	// external animations, models, etc.
	int numincludemodels;
	int includemodelindex;

	// implementation specific back pointer to virtual data
	int /* mutable void* */ virtualModel;

	int bonetablebynameindex;

	// if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	char constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	char rootLOD;

	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	char numAllowedRootLODs;

	char unused;

	float fadeDistance; // set to -1 to never fade. set above 0 if you want it to fade out, distance is in feet.
	// player/titan models seem to inherit this value from the first model loaded in menus.
	// works oddly on entities, probably only meant for static props

	int deprecated_numflexcontrollerui;
	int deprecated_flexcontrolleruiindex;

	float flVertAnimFixedPointScale;
	int surfacepropLookup; // this index must be cached by the loader, not saved in the file

	// stored maya files from used dmx files, animation files are not added. for internal tools likely
	// in r1 this is a mixed bag, some are null with no data, some have a four byte section, and some actually have the files stored.
	int sourceFilenameOffset;

	int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

	int m_nBoneFlexDriverCount;
	int m_nBoneFlexDriverIndex;

	// for static props (and maybe others)
	// Precomputed Per-Triangle AABB data
	int m_nPerTriAABBIndex;
	int m_nPerTriAABBNodeCount;
	int m_nPerTriAABBLeafCount;
	int m_nPerTriAABBVertCount;

	// always "" or "Titan", this is probably for internal tools
	int unkStringOffset;

	// ANIs are no longer used and this is reflected in many structs
	// start of interal file data
	int vtxOffset; // VTX
	int vvdOffset; // VVD / IDSV
	int vvcOffset; // VVC / IDCV 
	int phyOffset; // VPHY / IVPS

	int vtxSize; // VTX
	int vvdSize; // VVD / IDSV
	int vvcSize; // VVC / IDCV 
	int phySize; // VPHY / IVPS

	// for map collision, phys and this are merged in r5
	int collisionOffset;
	int staticCollisionCount; // number of sections for static props, one bone, or a phys that has one (1) solid. if set to 0, and this value is checked, defaults to 1

	// mostly seen on '_animated' suffixed models
	// manually declared bone followers are no longer stored in kvs under 'bone_followers', they are now stored in an array of ints with the bone index.
	int boneFollowerCount;
	int boneFollowerOffset; // index only written when numbones > 1, means whatever func writes this likely checks this (would make sense because bonefollowers need more than one bone to even be useful). maybe only written if phy exists

	int unused1[60];

};

// bones
struct mstudiobone_t
{
	int sznameindex;

	int parent; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation
	Vector scale; // base bone scale

	// compression scale
	Vector posscale; // scale muliplier for bone position in animations. depreciated in v53, as the posscale is stored in anim bone headers
	Vector rotscale; // scale muliplier for bone rotation in animations
	Vector scalescale; // scale muliplier for bone scale in animations

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

	int flags;
	int proctype;
	int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone
	// from what I can tell this is the section that is parented to this bone, and if this bone is not the parent of any sections, it goes up the bone chain to the nearest bone that does and uses that section index
	int surfacepropidx; // index into string tablefor property name

	int contents; // See BSPFlags.h for the contents flags

	int surfacepropLookup; // this index must be cached by the loader, not saved in the file

	// map collision
	uint16_t collisionIndex; // base index into collision shapes, 0xFFFF is no collision
	uint16_t collisionCount; // number of collision shapes for this bone, see: models\s2s\s2s_malta_gun_animated.mdl

	int unused[7]; // remove as appropriate
};

struct mstudiobbox_t
{
	int bone;
	int group;				// intersection group
	Vector bbmin;				// bounding box
	Vector bbmax;
	int szhitboxnameindex;	// offset to the name of the hitbox.

	int critShotOverride;	// value of one causes this to act as if it was group of 'head', may either be crit override or group override. mayhaps aligned boolean, look into this
	int hitdataGroupOffset;	// hit_data group in keyvalues this hitbox uses.

	int unused[6];
};

// animations
struct mstudioiklink_t
{
	int		bone;
	Vector	kneeDir;	// ideal bending direction (per link, if applicable)
	Vector	unused0;	// unused
};

struct mstudioikchain_t
{
	int	sznameindex;

	int	linktype;
	int	numlinks;
	int	linkindex;

	float unk_10;		// no clue what this does tbh, tweaking it does nothing
	                    // default value: 0.707f
	                    // this value is similar to default source engine ikchain values

	int	unused[3];	// these get cut in apex so I can't imagine this is used
};

#define STUDIO_ANIM_DELTA 0x01 // delta animation
#define STUDIO_ANIM_RAWPOS 0x02 // Vector48
#define STUDIO_ANIM_RAWROT 0x04 // Quaternion64
#define STUDIO_ANIM_RAWSCALE 0x08 // Vector48, drone_frag.mdl for scale track usage
#define STUDIO_ANIM_NOROT  0x10

struct mstudio_rle_anim_t
{
	float posscale; // does what posscale is used for

	uint8_t bone;
	uint8_t flags;

    FSeek(startof(this) + 28);
    int nextoffset;
};

struct mstudioanimsections_t
{
	int					animindex;
};

struct mstudioikrule_t
{
	int index;
	int type;
	int chain;
	int bone;

	int slot; // iktarget slot. Usually same as chain.
	float height;
	float radius;
	float floor;
	Vector pos;
	Quaternion q;

	int compressedikerrorindex;

	int iStart;
	int ikerrorindex;

	float start; // beginning of influence
	float peak; // start of full influence
	float tail; // end of full influence
	float end; // end of all influence

	float contact; // frame footstep makes ground concact
	float drop; // how far down the foot should drop when reaching for IK
	float top; // top of the foot box

	int szattachmentindex; // name of world attachment

	float endHeight; // new in v52
	// titan_buddy_mp_core.mdl

	int unused[8];
};

struct mstudioanimdesc_t
{
	int baseptr;

	int sznameindex;

	float fps; // frames per second	
	int flags; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int nummovements;
	int movementindex;

	int framemovementindex; // new in v52

	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl

	int numlocalhierarchy;
	int localhierarchyindex;

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used

	int unused[8];
};

struct mstudioactivitymodifier_t
{
	int sznameindex;
	bool negate; // if true will return false when checking if this layer (sequence) has this activity modifier, however it still has this activity modifier when checked in other places (?)
};

struct mstudioseqdesc_t
{
	int baseptr;

	int	szlabelindex;

	int szactivitynameindex;

	int flags; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;

	Vector bbmin; // per sequence bounding box
	Vector bbmax;

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait

	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

	int activitymodifierindex;
	int numactivitymodifiers;

	int ikResetMask;	// new in v52
						// titan_buddy_mp_core.mdl
						// reset all ikrules with this type???
	int unk_C4;	// previously 'unk1'
				// mayhaps this is the ik type applied to the mask if what's above it true

	int unused[8];
};

// meshes
struct mstudiomesh_t
{
	int material;

	int modelindex;

	int numvertices;	// number of unique vertices/normals/texcoords
	int vertexoffset;	// vertex mstudiovertex_t
	// offset by vertexoffset number of verts into vvd vertexes, relative to the models offset

	// Access thin/fat mesh vertex data (only one will return a non-NULL result)

	int deprecated_numflexes; // vertex animation
	int deprecated_flexindex;

	// special codes for material operations
	int deprecated_materialtype;
	int deprecated_materialparam;

	// a unique ordinal for this mesh
	int meshid;

	Vector center;

	mstudio_meshvertexloddata_t vertexloddata;

	uint64_t unkptr; // unknown memory pointer, probably one of the older vertex pointers but moved

	int unused[6];
};

struct mstudiomodel_t
{
	char name[64];

	int type;

	float boundingradius;

	int nummeshes;
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	// offset by vertexindex number of chars into vvd verts
	int tangentsindex; // tangents Vector
	// offset by tangentsindex number of chars into vvd tangents

	int numattachments;
	int attachmentindex;

	int deprecated_numeyeballs;
	int deprecated_eyeballindex;

	int pad[4];

	int colorindex; // vertex color
	// offset by colorindex number of chars into vvc vertex colors
	int uv2index; // vertex second uv map
	// offset by uv2index number of chars into vvc secondary uv map

	int unused[4];
};

struct UIPanelBounds_s
{
	Vector2D min;
	Vector2D max;

	Vector2D minScale;
	Vector2D maxScale;
};

struct UIPanelIndices_s
{
	// when properly used these will form a tri or quad.
	short vertexIndex[3];
};

struct UIPanelVertex_s
{
	int parent; // index into parent array, zero in most cases.
	Vector pos; // simple xyz pos local to bone.
};

struct UIPanelMesh_s
{
	int parentCount; // apparently you can have meshes parented to more than one bone(?)
	int vertexCount; // number of verts, max 256 per mesh (r2). limited by stack vertex buffer in parsing function
	int faceCount; // number of faces, max of 32 (r2). limited by faceBitField

	int parentOffset; // this gets padding out front of it to even off the struct
	int vertexOffset; // offset into vertex data
	int indiceOffset; // offsets into a vertex map for each face
	int boundsOffset; // offset into some bounds section, per face

	uint32_t faceBitField; // gets checked per face if bit is set to 1
};

struct UIPanelHeader_s
{
	int meshHash; // uses rui hash algo
	int meshOffset; // offset to the actual mesh, aligned to 16 bytes within the mdl
};

// materials
struct mstudiotexture_t
{
	int sznameindex;

	int unused_flags;
	int used;

	int unused[8];
};

// collision
struct mstudiocollface_t
{
	// normalized
	Vector normal;
	float normalScale;
};

struct mstudiocolledge_t
{
	Vector origin; // values are vert[0] ?
    Vector delta; // vert[0] - vert[1] 
	uint8_t vertIndices[2]; // index into verts
	uint8_t faceIndices[2]; // index into facee
};

struct mstudiocollhdr_t
{
	int faceCount;
	int faceAndUnkCount;
	int edgeCount; // face edges
	int vertCount; // vertices are standard vectors

	int dataOffset; // offset to the data
};

#define FEATURE_MAPCOLL
#define FEATURE_UIPANELS
#define FEATURE_STATIC_RLE_SIZE

#include "./mdl.bt"