//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl_v12.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Model Files
//  Category: Model
// File Mask: *.rmdl,*.rrig
//  ID Bytes: 49 44 53 54 36
//   History: 
//------------------------------------------------

#include "../source_math.bt"
#include "../bvh_h.bt"

// this is the only difference for v12 file, if needing to update for some reason, copy v8 and add this
#define FEATURE_BVH_SURFACEPROPS

#include "../model/headers/studio_r5_v8_h.bt"
#include "../model/headers/studio_r5_h.bt"
#include "../model/headers/studio_h.bt"

#include "../anim/headers/rseq_v7_h.bt"

// headers
struct studiohdr_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 54 (0x36,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null chars.
	int length; // Data size of MDL file in chars.

	Vector eyeposition;	// ideal eye position

	Vector illumposition;	// illumination center

	Vector hull_min;		// ideal movement hull size
	Vector hull_max;

	Vector view_bbmin;		// clipping bounding box
	Vector view_bbmax;

	int flags;

	int numbones; // bones
	int boneindex;

	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;

	int numhitboxsets;
	int hitboxsetindex;

	// seemingly unused now, as animations are per sequence
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions

	int numlocalseq; // sequences
	int	localseqindex;

	int activitylistversion; // initialization flag - have the sequences been indexed?

	// mstudiotexture_t
	// short rpak path
	// raw textures
	int materialtypesindex; // index into an array of char sized material type enums for each material used by the model
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;

	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;

	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;

	int numbodyparts;
	int bodypartindex;

	int numlocalattachments;
	int localattachmentindex;

	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
	int localNodeUnk; // used sparsely in r2, unused in apex, removed in v16 rmdl
	int localNodeDataOffset; // offset into an array of int sized offsets that read into the data for each node

	int meshOffset; // hard offset to the start of this models meshes

	// all flex related model vars and structs are stripped in respawn source
	int deprecated_numflexcontrollers;
	int deprecated_flexcontrollerindex;

	int deprecated_numflexrules;
	int deprecated_flexruleindex;

	int numikchains;
	int ikchainindex;

	// mesh panels for using rui on models, primarily for weapons
	int uiPanelCount;
	int uiPanelOffset;

	int numlocalposeparameters;
	int localposeparamindex;

	int surfacepropindex;

	int keyvalueindex;
	int keyvaluesize;

	int numlocalikautoplaylocks;
	int localikautoplaylockindex;

	float mass;
	int contents;

	// unused for packed models
	// technically still functional though I am unsure why you'd want to use it
	int numincludemodels;
	int includemodelindex;

	int /* mutable void* */ virtualModel;

	int bonetablebynameindex;

	// if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	char constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	char rootLOD;

	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	char numAllowedRootLODs;

	char unused;

	float fadeDistance;	// set to -1 to never fade. set above 0 if you want it to fade out, distance is in feet.
	// player/titan models seem to inherit this value from the first model loaded in menus.
	// works oddly on entities, probably only meant for static props

	float gatherSize;	// what. from r5r struct. no clue what this does, seemingly for early versions of apex bsp but stripped in release apex (season 0)
	// bad name, frustum culling
	// never written on disk, memory tbd

	int deprecated_numflexcontrollerui;
	int deprecated_flexcontrolleruiindex;

	float flVertAnimFixedPointScale; // to be verified
	int surfacepropLookup; // saved in the file

	// this is in most shipped models, probably part of their asset bakery.
	// doesn't actually need to be written pretty sure, only four chars when not present.
	// this is not completely true as some models simply have nothing, such as animation models.
	int sourceFilenameOffset;

	int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

	// used for adjusting weights in sequences, quick lookup into bones that have procbones, unsure what else uses this.
	int procBoneCount;
	int procBoneOffset; // in order array of procbones and their parent bone indice
	int linearProcBoneOffset; // byte per bone with indices into each bones procbone, 0xff if no procbone is present

	// depreciated as they are removed in 12.1
	int deprecated_m_nBoneFlexDriverCount;
	int deprecated_m_nBoneFlexDriverIndex;

	int deprecated_m_nPerTriAABBIndex;
	int deprecated_m_nPerTriAABBNodeCount;
	int deprecated_m_nPerTriAABBLeafCount;
	int deprecated_m_nPerTriAABBVertCount;

	// always "" or "Titan"
	int unkStringOffset;

	// offsets into vertex buffer for component files, suzes are per file if course
	// unused besides phy starting in rmdl v9
	int vtxOffset; // VTX
	int vvdOffset; // VVD / IDSV
	int vvcOffset; // VVC / IDCV 
	int phyOffset; // VPHY / IVPS

	int vtxSize;
	int vvdSize;
	int vvcSize;
	int phySize; // still used in models using vg

	// // removed from header in version 12.1
	int deprecated_collisionOffset;			// deprecated_imposterIndex
	int deprecated_staticCollisionCount;	// deprecated_numImposters

	// mostly seen on '_animated' suffixed models
	// manually declared bone followers are no longer stored in kvs under 'bone_followers', they are now stored in an array of ints with the bone index.
	int boneFollowerCount;
	int boneFollowerOffset;

	// BVH4 size (?)
	Vector bvhMin;
	Vector bvhMax; // seem to be the same as hull size

	int unk_208[3]; // never written on disk, memory tbd

	int bvhOffset; // bvh4 tree

	short bvhUnk[2]; // collision detail for bvh (?)

	// new in apex vertex weight file for verts that have more than three weights
	// vvw is a 'fake' extension name, we do not know the proper name.
	int vvwOffset; // index will come last after other vertex files
	int vvwSize;
};

// bones
struct mstudiobone_t
{
	int sznameindex;

	int parent; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation
	Vector scale; // base bone scale

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

	int flags;
	int proctype;
	int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone
	// from what I can tell this is the section that is parented to this bone, and if this bone is not the parent of any sections, it goes up the bone chain to the nearest bone that does and uses that section index
	int surfacepropidx; // index into string tablefor property name

	int contents; // See BSPFlags.h for the contents flags

	int surfacepropLookup; // this index must be cached by the loader, not saved in the file

	int unk_B0;

	int collisionIndex; // index into sections of collision, phy, bvh, etc. needs confirming
};

// animations

// meshes
struct mstudiomesh_t
{
	int material;

	int modelindex;

	int numvertices;	// number of unique vertices/normals/texcoords
	int vertexoffset;	// vertex mstudiovertex_t
	// offset by vertexoffset number of verts into vvd vertexes, relative to the models offset

	// Access thin/fat mesh vertex data (only one will return a non-NULL result)

	int deprecated_numflexes; // vertex animation
	int deprecated_flexindex;

	// special codes for material operations
	int deprecated_materialtype;
	int deprecated_materialparam;

	// a unique ordinal for this mesh
	int meshid;

	Vector center;

	mstudio_meshvertexloddata_t vertexloddata;

	uint64_t unkptr; // unknown memory pointer, probably one of the older vertex pointers but moved
};

struct mstudiomodel_t
{
	char name[64];

    int unkStringOffset; // goes to bones sometimes

	int type;

	float boundingradius;

	int nummeshes;
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	// offset by vertexindex number of chars into vvd verts
	int tangentsindex; // tangents Vector
	// offset by tangentsindex number of chars into vvd tangents

	int numattachments;
	int attachmentindex;

	int deprecated_numeyeballs;
	int deprecated_eyeballindex;

	int pad[4];

	int colorindex; // vertex color
	                // offset by colorindex number of chars into vvc vertex colors
	int uv2index;   // vertex second uv map
	                // offset by uv2index number of chars into vvc secondary uv map
};

#include "./rmdl.bt"