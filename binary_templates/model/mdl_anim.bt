//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl_anim.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Model Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------

// animation
struct rle_valuetrack(int frameCount)
{
    rle_value value;
    FSeek(startof(value.value) + (value.value.num.valid * sizeof(mstudioanimvalue_t)) + sizeof(mstudioanimvalue_t));

    local uint8_t total = value.value.num.total;
    // on animations without sections the number of 'total' values will equal the number of frames
    // on animations with sections, sections preceeding the last sectiion will have a 'total' of (sectionframes + 1)
    // the extra value is seemingly the first value of the next section.
    // this difference is handled when passed to the func
    local int k = frameCount;

    while(total <= k)
    {
        rle_value value;
        FSeek(startof(value.value) + (value.value.num.valid * sizeof(mstudioanimvalue_t)) + sizeof(mstudioanimvalue_t));

        k -= total;
        total = value.value.num.total;
    };
};

struct rle_valueptr(const int frameCount)
{
    mstudioanim_valueptr_t ptr;

    local int j = 0;
    for (j = 0; j < 3; j++)
    {
        if (!ptr.offset[j])
            continue;

        FSeek(startof(ptr) + ptr.offset[j]);
        switch (j)
        {
        case 0:
            rle_valuetrack track_x(frameCount);
            break;
        case 1:
            rle_valuetrack track_y(frameCount);
            break;
        case 2:
            rle_valuetrack track_z(frameCount);
            break;
        }
    }
};

struct rle_bone(const int frameCount)
{
    mstudio_rle_anim_t header <fgcolor=0xAA3366>;

    // r2
#ifdef FEATURE_ANIM_TITANFALL2
    local uint64_t localPos = startof(header) + 8;
    FSeek(localPos);
    if (!(header.flags & STUDIO_ANIM_NOROT))
    {
        if (header.flags & STUDIO_ANIM_RAWROT)
        {
            Quaternion64 rot <fgcolor=cLtRed>;
        }
        else
        {
            rle_valueptr pRot(frameCount) <fgcolor=cLtRed>;
        }
    }

    // move past rotation
    localPos += 8;

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWPOS)
    {
        Vector48 pos <fgcolor=cLtGreen>;
    }
    else
    {
        rle_valueptr pPos(frameCount) <fgcolor=cLtGreen>;
    }

    // move past position
    localPos += 6;

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWSCALE)
    {
        Vector48 scale <fgcolor=cLtYellow>;
    }
    else
    {
        rle_valueptr pScale(frameCount) <fgcolor=cLtYellow>;
    }

#else
    local uint64_t localPos = startof(header) + sizeof(mstudio_rle_anim_t);

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_ANIMROT)
    {
        rle_valueptr pRot(frameCount) <fgcolor=cLtRed>;

        localPos += sizeof(mstudioanim_valueptr_t);
    }

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_ANIMPOS)
    {
        rle_valueptr pPos(frameCount) <fgcolor=cLtGreen>;

        localPos += sizeof(mstudioanim_valueptr_t);
    }

#ifdef FEATURE_ANIM_TITANFALL
    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_ANIMSCALE)
    {
        rle_valueptr pScale(frameCount) <fgcolor=cLtYellow>;

        localPos += sizeof(mstudioanim_valueptr_t);
    }
#endif

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWROT)
    {
        Quaternion48 rot <fgcolor=cLtRed, read=ReadQuat48(this)>;

        localPos += sizeof(Quaternion48);
    }

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWROT2)
    {
        Quaternion64 rot <fgcolor=cLtRed>;

        localPos += sizeof(Quaternion64);
    }

    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWPOS)
    {
        Vector48 pos <fgcolor=cLtGreen>;

        localPos += sizeof(Vector48);
    }

#ifdef FEATURE_ANIM_TITANFALL
    FSeek(localPos);
    if (header.flags & STUDIO_ANIM_RAWSCALE)
    {
        Vector48 scale <fgcolor=cLtYellow>;

        localPos += sizeof(Vector48);
    }
#endif
#endif
};

struct rle_anim(const uint64_t baseptr, const int animindex, const int frameCount)
{
    FSeek(baseptr + animindex);

    local int boneIdx = 0;
    for (boneIdx = 0; boneIdx < boneCount; boneIdx++)
    {
        rle_bone bone(frameCount);

        if (!bone.header.nextoffset)
            break;

        FSeek(startof(bone) + bone.header.nextoffset);
    };
};

#ifdef FEATURE_FRAMEANIM
struct frame_bone(const uint8_t boneFlags, const int boneIdx, const bool isConstData)
{
    local int bone = boneIdx;

// titanfall
#ifdef FEATURE_ANIM_TITANFALL
    if(((boneFlags & STUDIO_FRAME_RAWROT) && isConstData) || ((boneFlags & STUDIO_FRAME_ANIMROT) && !isConstData))
    {
        if (boneFlags & STUDIO_FRAME_FULLANIM)
        {
            Quaternion48S rot <read=ReadQuat48S(this)>;
        }
        else
        {
            Quaternion48 rot <read=ReadQuat48(this)>;
        }
    }

    if(((boneFlags & STUDIO_FRAME_RAWPOS) && isConstData) || ((boneFlags & STUDIO_FRAME_ANIMPOS) && !isConstData))
    {
        if (boneFlags & STUDIO_FRAME_FULLANIM)
        {
            Vector pos;
        }
        else
        {
            Vector48 pos;
        }
    }

    if(((boneFlags & STUDIO_FRAME_RAWSCALE) && isConstData) || ((boneFlags & STUDIO_FRAME_ANIMSCALE) && !isConstData))
    {
        if (boneFlags & STUDIO_FRAME_FULLANIM)
        {
            Vector scale;
        }
        else
        {
            Vector48 scale;
        }
    }
// normal source
#else
    if (isConstData)
    {
        // pos
        if (boneFlags & STUDIO_FRAME_RAWPOS)
        {
            Vector48 pos;
        }
        else if (boneFlags & STUDIO_FRAME_FULLRAWPOS)
        {
            Vector pos;
        }

        // rot
        if (boneFlags & STUDIO_FRAME_RAWROT)
        {
            Quaternion48 rot <read=ReadQuat48(this)>;
        }
        else if (boneFlags & STUDIO_FRAME_FULLRAWROT)
        {
            Quaternion48S rot <read=ReadQuat48S(this)>;
        }
    }
    else
    {
        // pos
        if (boneFlags & STUDIO_FRAME_ANIMPOS)
        {
            Vector48 pos;
        }
        else if (boneFlags & STUDIO_FRAME_FULLANIMPOS)
        {
            Vector pos;
        }

        // rot
        if (boneFlags & STUDIO_FRAME_ANIMROT)
        {
            Quaternion48 rot <read=ReadQuat48(this)>;
        }
        else if (boneFlags & STUDIO_FRAME_FULLANIMROT)
        {
            Quaternion48S rot <read=ReadQuat48S(this)>;
        }
    }
#endif
};

void SkipBoneFrame(uint8_t flags, int& pConstData, int& pFrameData)
{
#ifdef USE_FRAMEANIM_R1
	uint8_t boneFlagsConst = flags & 7; // mask to constant data flags

	flags >>= 3; // shift to access per frame flags.

	uint8_t boneFlagsFrame = flags & 7; // mask to per frame data flags
	uint8_t fullAnim = flags & 8; // use this as a base offset into the lut, everything starting at idx 8 is for full sized vectors.

	pConstData += s_FrameAnimBoneSizeLUT[fullAnim | boneFlagsConst];
	pFrameData += s_FrameAnimBoneSizeLUT[fullAnim | boneFlagsFrame];
#else
    if (flags & STUDIO_FRAME_ANIMROT)
	{
		pFrameData += sizeof(Quaternion48);
	}
    else if (flags & STUDIO_FRAME_RAWROT)
	{
		pConstData += sizeof(Quaternion48);
	}

	if (flags & STUDIO_FRAME_ANIMPOS)
	{
		pFrameData += sizeof(Vector48);
	}
	else if (flags & STUDIO_FRAME_FULLANIMPOS)
	{
		pFrameData += sizeof(Vector);
	}
	else if (flags & STUDIO_FRAME_RAWPOS)
	{
		pConstData += sizeof(Vector48);
	}

#endif
}

struct frame_anim(const uint64_t baseptr, const int animindex, const int frameCount)
{
    FSeek(baseptr + animindex);
    mstudio_frame_anim_t frameanim <fgcolor=0x632970>;
                        
    uint8_t boneFlags[boneCount] <fgcolor=0xaa8822>;

#ifdef USE_FRAMEANIM_R1
    if (exists(frameanim.boneLookupTableOffset) && frameanim.boneLookupTableOffset)
    {
        FSeek(startof(frameanim) + frameanim.boneLookupTableOffset);
        mstudio_frame_anim_boneoffset_t lookupTable[boneCount] <fgcolor=0xaa8866>;
    }
#endif
    
    local int constOffset = 0;
    local int frameOffset = 0;

    if (frameanim.constantsoffset != frameanim.frameoffset)
    {
        const local int64_t constBaseptr = startof(frameanim) + frameanim.constantsoffset;
        FSeek(constBaseptr);
        struct {
            local int boneIdx;
            local uint8_t boneFlag;
            local int boneOffset = 0;
            for (boneIdx = 0; boneIdx < boneCount; boneIdx++)
            {
                boneFlag = boneFlags[boneIdx];

                if (!(boneFlag & STUDIO_FRAME_CONSTDATA))
                    continue;                

#ifdef USE_FRAMEANIM_R1
                if (exists(lookupTable))
                    boneOffset = lookupTable[boneIdx].constOffset;
                else
#else
                {
                    boneOffset = constOffset;
                    SkipBoneFrame(boneFlag, constOffset, frameOffset);
                }
#endif

                FSeek(constBaseptr + boneOffset);
                frame_bone bone(boneFlag, boneIdx, true) <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), fgcolor=0x321431>;
            };
        } data_const;
    }

    if (frameanim.framelength)
    {
        const local int64_t frameBaseptr = startof(frameanim) + frameanim.frameoffset;

        FSeek(frameBaseptr);
        struct(const int frameCount) {
            local int frameIdx;
            local int64_t frameBaseptrFrame;
            for (frameIdx = 0; frameIdx < frameCount; frameIdx++)
            {
                frameBaseptrFrame = frameBaseptr + (frameanim.framelength * frameIdx);

                FSeek(frameBaseptrFrame);
                struct {
                    local int boneIdx;
                    local int boneOffset;
                    local uint8_t boneFlag;
                    for (boneIdx = 0; boneIdx < boneCount; boneIdx++)
                    {
                        boneFlag = boneFlags[boneIdx];
                    
                        if (!(boneFlag & STUDIO_FRAME_FRAMEDATA))
                            continue;                
                    
#ifdef USE_FRAMEANIM_R1
                        if (exists(lookupTable))
                            boneOffset = lookupTable[boneIdx].constOffset;
                        else
#else
                        {
                            boneOffset = constOffset;
                            SkipBoneFrame(boneFlag, constOffset, frameOffset);
                        }
#endif
                    
                        FSeek(frameBaseptrFrame + boneOffset);
                        frame_bone bone(boneFlag, boneIdx, false) <read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex), fgcolor=0x844b78>;
                    };
                } frame;
            }
        } frames(frameCount);
    }
};
#endif

// da ik
struct compressedikerror_t(const int frameCount)
{
    mstudiocompressedikerror_t error <fgcolor=cDkGreen>;

    local int idx = 0;
    for (idx = 0; idx < 6; idx++)
    {
        if (!error.offset[idx])
            continue;
    
        FSeek(startof(error) + error.offset[idx]);
    
        switch (idx)
        {
        case 0:
            rle_valuetrack track_pos_x(frameCount) <fgcolor=0x228822>;
            break;
        case 1:
            rle_valuetrack track_pos_y(frameCount) <fgcolor=0x228822>;
            break;
        case 2:
            rle_valuetrack track_pos_z(frameCount) <fgcolor=0x228822>;
            break;
        case 3:
            rle_valuetrack track_rot_x(frameCount) <fgcolor=0x228822>;
            break;
        case 4:
            rle_valuetrack track_rot_y(frameCount) <fgcolor=0x228822>;
            break;
        case 5:
            rle_valuetrack track_rot_z(frameCount) <fgcolor=0x228822>;
            break;
        }
    }
};

struct anim_ikrule(const int frameCount)
{
    mstudioikrule_t ikrule <fgcolor=cGreen>;

    if(ikrule.compressedikerrorindex)
    {
        // compressedikerrors do not have a full track, they get cropped with a start offset and end offset
        local const int frameCountFixed = (float)frameCount * (ikrule.end - ikrule.start);

        FSeek(startof(ikrule) + ikrule.compressedikerrorindex);
        compressedikerror_t compressedikerror(frameCountFixed);
    }

    // supported but never seen it used
    if(ikrule.szattachmentindex)
    {
        FSeek(startof(ikrule) + ikrule.szattachmentindex);
        string attachment <fgcolor=cGreen>;
    }
};

// da mover
struct anim_movement(const int frameCount)
{
    mstudioframemovement_t movement <fgcolor=0x77ccbb>;

    local int idx = 0;
    for (idx = 0; idx < 4; idx++)
    {
        if (!movement.offset[idx])
            continue;

        FSeek(startof(movement) + movement.offset[idx]);

        switch (idx)
        {
        case 0:
            rle_valuetrack track_pos_x(frameCount) <fgcolor=0x99CC99>;
            break;
        case 1:
            rle_valuetrack track_pos_y(frameCount) <fgcolor=0x99CC99>;
            break;
        case 2:
            rle_valuetrack track_pos_z(frameCount) <fgcolor=0x99CC99>;
            break;
        case 3:
            rle_valuetrack track_yaw(frameCount) <fgcolor=0xAADDAA>;
            break;
        }
    }
};

int GetMaxFrameForSection_RLE(const int numframes, const int sectionframes, const int section, const int numSections)
{
    if (section == (numSections - 1))
        return 1;

    // the last full section will have less than sectionframes number of frames in most cases, doesn't seem to hurt stall style anims.
    if (section == (numSections - 2))
        return numframes - (section * sectionframes) - 1;

    return sectionframes;
}

int GetMaxFrameForSection_Frame(const int numframes, const int sectionframes, const int section, const int numSections)
{
    if (section == (numSections - 1))
        return 1;

    // the last full section will have less than sectionframes number of frames in most cases, doesn't seem to hurt stall style anims.
    if (section == (numSections - 2))
        return numframes - (section * sectionframes); // tbd if this is correct

    return sectionframes + 1; // always an extra frame!
}

#ifdef FEATURE_ZEROFRAME
struct ZeroFrameBone_t(const int boneIdx)
{
    local int boneId = boneIdx;

    if(bones[boneIdx].flags & BONE_HAS_SAVEFRAME_POS)
        Vector48 pos;

    if(bones[boneIdx].flags & BONE_HAS_SAVEFRAME_ROT64)
        Quaternion64 rot;

    if(bones[boneIdx].flags & BONE_HAS_SAVEFRAME_ROT32)
        Quaternion32 rot;
};

struct ZeroFrame_t
{
    local int boneIdx;
    for (boneIdx = 0; boneIdx < hdr.numbones; boneIdx++)
    {
        if (bones[boneIdx].flags & BONE_HAS_SAVEFRAME)
        {
             ZeroFrameBone_t transforms(boneIdx) <read=ReadString(startof(bones[boneId]) + bones[boneId].sznameindex), fgcolor=0xffaa88>;
        }
    }
};
#endif

enum AnimType_t
{
    ANIM_RLE = 0,
    ANIM_FRAME = 1,
    ANIM_BLUEPOINT = 2,
};

const AnimType_t GetAnimType(const int flags)
{
#ifdef FEATURE_FRAMEANIM
    if (flags & STUDIO_FRAMEANIM)
        return ANIM_FRAME;
#endif

#ifdef FEATURE_BPANIM
    if (flags & STUDIO_BPANIM)
        return ANIM_BLUEPOINT;
#endif

    return ANIM_RLE;
}

void ParseAnimdesc(const uint64_t baseptr, const int animindex)
{
    FSeek(baseptr + animindex);
    struct {
        mstudioanimdesc_t animdesc <fgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;

        local int j;

        const AnimType_t type = GetAnimType(animdesc.flags);

        if (animdesc.sectionframes > 0)
        {
            // this equation gets the max INDEX of the array, if we add one to this, we'll get the section count
            local const int sectionCount = ((animdesc.numframes - 1.0f) / animdesc.sectionframes) + 2;
    
            local int maxFrames = 0;
    
            FSeek(startof(animdesc) + animdesc.sectionindex);
            mstudioanimsections_t sections[sectionCount] <fgcolor=cLtBlue>;
    
            for (j = 0; j < sectionCount; j++)
            {
                // check if this section is stored externally!
                if (exists(sections[j].animblock) && sections[j].animblock)
                    continue;
    
                FSeek(startof(animdesc) + sections[j].animindex);
                switch (type)
                {
                case ANIM_RLE:
                {
                    maxFrames = GetMaxFrameForSection_RLE(animdesc.numframes, animdesc.sectionframes, j, sectionCount);
                    rle_anim section(startof(animdesc), sections[j].animindex, maxFrames);
                    break;
                }
#ifdef FEATURE_FRAMEANIM
                case ANIM_FRAME:
                {
                    maxFrames = GetMaxFrameForSection_Frame(animdesc.numframes, animdesc.sectionframes, j, sectionCount);
                    frame_anim section(startof(animdesc), sections[j].animindex, maxFrames);
                    break;
                }
#endif
#ifdef FEATURE_BPANIM
                case ANIM_BLUEPOINT:
                {
                    Assert(false);
                    break;
                }
#endif
                }
            };
        }

#ifdef FEATURE_ANIMBLOCK
        if (animdesc.sectionframes == 0 && !animdesc.animblock)
#else
        if (animdesc.sectionframes == 0)
#endif
        {
            FSeek(startof(animdesc) + animdesc.animindex);
            switch (type)
            {
            case ANIM_RLE:
            {
                rle_anim animation(startof(animdesc), animdesc.animindex, animdesc.numframes - 1);
                break;
            }
#ifdef FEATURE_FRAMEANIM
            case ANIM_FRAME:
            {
                frame_anim animation(startof(animdesc), animdesc.animindex, animdesc.numframes);
                break;
            }
#endif
#ifdef FEATURE_BPANIM
            case ANIM_BLUEPOINT:
            {
                Assert(false);
                break;
            }
#endif
            }
            
        }

#ifdef FEATURE_ANIMBLOCK
        if(animdesc.numikrules && !animdesc.animblockikruleindex)
#else
        if(animdesc.numikrules)
#endif
        {
            for(j = 0; j < animdesc.numikrules; j++)
            {
                FSeek(startof(animdesc) + animdesc.ikruleindex + (sizeof(mstudioikrule_t) * j));
                anim_ikrule ikrule(animdesc.numframes - 1);
            }
        }

        if ((animdesc.flags & STUDIO_FRAMEMOVEMENT) && exists(animdesc.framemovementindex) && animdesc.framemovementindex)
        {
            FSeek(startof(animdesc) + animdesc.framemovementindex);
            anim_movement movement(animdesc.numframes - 1);
        }

        if(animdesc.nummovements)
        {
            FSeek(startof(animdesc) + animdesc.movementindex);
            mstudiomovement_t movement[animdesc.nummovements] <fgcolor=0xaa7722>;
        }

#ifdef FEATURE_ZEROFRAME
        if(animdesc.zeroframeindex)
        {
            FSeek(startof(animdesc) + animdesc.zeroframeindex);
    
            struct {
                local int zeroFrameIdx;
                for(zeroFrameIdx = 0; zeroFrameIdx < animdesc.zeroframecount; zeroFrameIdx++)
                {
                    ZeroFrame_t frame;
                }
    
                if(animdesc.numikrules && exists(animdesc.ikrulezeroframeindex))
                {
                    FSeek(startof(animdesc) + animdesc.ikrulezeroframeindex);
                    mstudioikrulezeroframe_t zeroframeikrule[animdesc.numikrules] <fgcolor=cGreen>;
                }
            } zeroframe;
        }
#endif

    } anim <read=ReadString(startof(this.animdesc) + this.animdesc.sznameindex)>;
}

void ParseSeqdesc(const uint64_t baseptr, const int seqindex)
{
    FSeek(baseptr + seqindex);
    struct {
        // sequence
        mstudioseqdesc_t seqdesc <fgcolor=0xf0b27a, read=ReadString(startof(this) + this.szactivitynameindex)>;
        
        // num blends
        local int animCount = (seqdesc.groupsize[0] * seqdesc.groupsize[1]);
        
        // pose keys
        if(seqdesc.posekeyindex)
        {
            FSeek(startof(seqdesc) + seqdesc.posekeyindex);
            float posekey[seqdesc.groupsize[0] + seqdesc.groupsize[1]] <fgcolor=0x55ee00>;
        }
        
        // events
        if(seqdesc.numevents)
        {
            FSeek(startof(seqdesc) + seqdesc.eventindex);
            mstudioevent_t seqevent[seqdesc.numevents] <fgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
        }
        
        // auto layers
        if(seqdesc.numautolayers)
        {
            FSeek(startof(seqdesc) + seqdesc.autolayerindex);
            mstudioautolayer_t autolayers[seqdesc.numautolayers] <fgcolor=0x226600>;
        }
        
        // bone weights
        FSeek(startof(seqdesc) + seqdesc.weightlistindex);
        float weightlist[boneCount] <fgcolor=0xe1f27a>;
        
        // act mods
        if (seqdesc.numactivitymodifiers)
        {
            FSeek(startof(seqdesc) + seqdesc.activitymodifierindex);
            mstudioactivitymodifier_t activitymodifier[seqdesc.numactivitymodifiers] <fgcolor=0x119900, read=ReadString(startof(this) + this.sznameindex)>;
        };

        if (seqdesc.numiklocks)
        {
            FSeek(startof(seqdesc) + seqdesc.iklockindex);
            mstudioiklock_t iklock[seqdesc.numiklocks] <fgcolor=0x88CC22>;
        }

        if (animCount)
        {
            FSeek(startof(seqdesc) + seqdesc.animindexindex);
            uint16_t blends[animCount] <fgcolor=0xffff00, read=ReadString(startof(anims.anim[this].animdesc) + anims.anim[this].animdesc.sznameindex)>;
        }
    } seq <read=ReadString(startof(this.seqdesc) + this.seqdesc.szlabelindex)>;
}