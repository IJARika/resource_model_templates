//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: studio_h.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Model Files
//  Category: Model
// File Mask: *.rmdl,*.rrig,*.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../source_math.bt"

#ifndef STUDIO_R5_H
#define STUDIO_R5_H

int FIX_OFFSET(unsigned short offset)
{
    local int fixedOffset = ((offset & 0xFFFE) << (4 * (offset & 1)));

    return fixedOffset;
}


//
// bones
//

struct mstudiojigglebone_t
{
	uint8_t flags;
	uint8_t bone; // id of bone, might be single byte

	char pad[2];

	// general params
	float length; // how far from bone base, along bone, is tip
	float tipMass;
	float tipFriction; // friction applied to tip velocity, 0-1

	// flexible params
	float yawStiffness;
	float yawDamping;
	float pitchStiffness;
	float pitchDamping;
	float alongStiffness;
	float alongDamping;

	// angle constraint
	float angleLimit; // maximum deflection of tip in radians

	// yaw constraint
	float minYaw; // in radians
	float maxYaw; // in radians
	float yawFriction;
	float yawBounce;

	// pitch constraint
	float minPitch; // in radians
	float maxPitch; // in radians
	float pitchFriction;
	float pitchBounce;

	// base spring
	float baseMass;
	float baseStiffness;
	float baseDamping;
	float baseMinLeft;
	float baseMaxLeft;
	float baseLeftFriction;
	float baseMinUp;
	float baseMaxUp;
	float baseUpFriction;
	float baseMinForward;
	float baseMaxForward;
	float baseForwardFriction;
};


//
// animations
//
#define STUDIO_HAS_ANIM         0x20000
#define STUDIO_FRAMEMOVEMENT    0x40000 // framemovements are only read if this flag is present
#define STUDIO_DATAPOINTANIM    0x200000

local FlagArray_t flags_animDesc_r5(32, "NONE");
InitFlagEntry(flags_animDesc_r5.strings[0], "STUDIO_LOOPING");
InitFlagEntry(flags_animDesc_r5.strings[1], "STUDIO_SNAP");
InitFlagEntry(flags_animDesc_r5.strings[2], "STUDIO_DELTA");
InitFlagEntry(flags_animDesc_r5.strings[3], "STUDIO_AUTOPLAY");
InitFlagEntry(flags_animDesc_r5.strings[4], "STUDIO_POST");
InitFlagEntry(flags_animDesc_r5.strings[5], "STUDIO_ALLZEROS");
InitFlagEntry(flags_animDesc_r5.strings[6], "STUDIO_ANIM_UNK40");
InitFlagEntry(flags_animDesc_r5.strings[7], "STUDIO_CYCLEPOSE");
InitFlagEntry(flags_animDesc_r5.strings[8], "STUDIO_REALTIME");
InitFlagEntry(flags_animDesc_r5.strings[9], "STUDIO_LOCAL");
InitFlagEntry(flags_animDesc_r5.strings[10], "STUDIO_HIDDEN");
InitFlagEntry(flags_animDesc_r5.strings[11], "STUDIO_OVERRIDE");
InitFlagEntry(flags_animDesc_r5.strings[12], "STUDIO_ACTIVITY");
InitFlagEntry(flags_animDesc_r5.strings[13], "STUDIO_EVENT");
InitFlagEntry(flags_animDesc_r5.strings[14], "STUDIO_WORLD");
InitFlagEntry(flags_animDesc_r5.strings[15], "STUDIO_NOFORCELOOP");
InitFlagEntry(flags_animDesc_r5.strings[16], "STUDIO_EVENT_CLIENT");
InitFlagEntry(flags_animDesc_r5.strings[17], "STUDIO_HAS_ANIM");
InitFlagEntry(flags_animDesc_r5.strings[18], "STUDIO_FRAMEMOVEMENT");
InitFlagEntry(flags_animDesc_r5.strings[19], "STUDIO_SINGLE_FRAME");
// mia
InitFlagEntry(flags_animDesc_r5.strings[21], "STUDIO_DATAPOINTANIM");

// animdesc flags but 0x20000 is different
local FlagArray_t flags_seqDesc_r5(32, "NONE");
InitFlagEntry(flags_seqDesc_r5.strings[0], "STUDIO_LOOPING");
InitFlagEntry(flags_seqDesc_r5.strings[1], "STUDIO_SNAP");
InitFlagEntry(flags_seqDesc_r5.strings[2], "STUDIO_DELTA");
InitFlagEntry(flags_seqDesc_r5.strings[3], "STUDIO_AUTOPLAY");
InitFlagEntry(flags_seqDesc_r5.strings[4], "STUDIO_POST");
InitFlagEntry(flags_seqDesc_r5.strings[5], "STUDIO_ALLZEROS");
InitFlagEntry(flags_seqDesc_r5.strings[6], "STUDIO_ANIM_UNK40");
InitFlagEntry(flags_seqDesc_r5.strings[7], "STUDIO_CYCLEPOSE");
InitFlagEntry(flags_seqDesc_r5.strings[8], "STUDIO_REALTIME");
InitFlagEntry(flags_seqDesc_r5.strings[9], "STUDIO_LOCAL");
InitFlagEntry(flags_seqDesc_r5.strings[10], "STUDIO_HIDDEN");
InitFlagEntry(flags_seqDesc_r5.strings[11], "STUDIO_OVERRIDE");
InitFlagEntry(flags_seqDesc_r5.strings[12], "STUDIO_ACTIVITY");
InitFlagEntry(flags_seqDesc_r5.strings[13], "STUDIO_EVENT");
InitFlagEntry(flags_seqDesc_r5.strings[14], "STUDIO_WORLD");
InitFlagEntry(flags_seqDesc_r5.strings[15], "STUDIO_NOFORCELOOP");
InitFlagEntry(flags_seqDesc_r5.strings[16], "STUDIO_EVENT_CLIENT");
InitFlagEntry(flags_seqDesc_r5.strings[17], "STUDIO_HAS_SCALE");
InitFlagEntry(flags_seqDesc_r5.strings[18], "STUDIO_FRAMEMOVEMENT");
InitFlagEntry(flags_seqDesc_r5.strings[19], "STUDIO_SINGLE_FRAME");

#define STUDIO_ANIM_POS     0x1 // bone has pos values
#define STUDIO_ANIM_ROT     0x2 // bone has rot values
#define STUDIO_ANIM_SCALE   0x4 // bone has scale values
#define STUDIO_ANIM_UNK8    0x8 // special position used for virtual models
#define STUDIO_ANIM_DATA (STUDIO_ANIM_POS | STUDIO_ANIM_ROT | STUDIO_ANIM_SCALE) // bone has animation data

#define STUDIO_ANIM_ANIMSCALE 0x01 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMROT 0x02 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMPOS 0x04 // mstudioanim_valueptr_t

local FlagArray_t flags_animBone_r5(4, "NONE");
InitFlagEntry(flags_animBone_r5.strings[0], "STUDIO_ANIM_POS"); 
InitFlagEntry(flags_animBone_r5.strings[1], "STUDIO_ANIM_ROT"); 
InitFlagEntry(flags_animBone_r5.strings[2], "STUDIO_ANIM_SCALE");
InitFlagEntry(flags_animBone_r5.strings[3], "STUDIO_ANIM_UNK8");

local FlagArray_t flags_rleHeader_r5(3, "");
InitFlagEntry(flags_rleHeader_r5.strings[0], "STUDIO_ANIM_ANIMSCALE"); 
InitFlagEntry(flags_rleHeader_r5.strings[1], "STUDIO_ANIM_ANIMROT"); 
InitFlagEntry(flags_rleHeader_r5.strings[2], "STUDIO_ANIM_ANIMPOS");

struct mstudio_rle_anim_t
{
	short size : 13; // total size of all animation data, not next offset because even the last one has it
	short flags : 3 <read=ReadFlags(this, flags_rleHeader_r5)>;
};

#define STUDIO_ANIMPTR_Z 0x01
#define STUDIO_ANIMPTR_Y 0x02
#define STUDIO_ANIMPTR_X 0x04

local FlagArray_t flags_valuePtr_r5(3, "NONE");
InitFlagEntry(flags_valuePtr_r5.strings[0], "STUDIO_ANIMPTR_Z"); 
InitFlagEntry(flags_valuePtr_r5.strings[1], "STUDIO_ANIMPTR_Y"); 
InitFlagEntry(flags_valuePtr_r5.strings[2], "STUDIO_ANIMPTR_X");

struct mstudioanim_valueptr_t
{
    short offset : 13;
    short flags : 3 <read=ReadFlags(this, flags_valuePtr_r5)>;
    uint8_t axisIdx1; // these two are definitely unsigned
    uint8_t axisIdx2;
 };

local int s_AnimSeekLUT[60] =
{
	1,  15, 16, 2,  7,  8,  2,  15, 0,  3,  15, 0,  4,  15, 0,  5,
	15, 0,  6,  15, 0,  7,  15, 0,  2,  15, 2,  3,  15, 2,  4,  15,
	2,  5,  15, 2,  6,  15, 2,  7,  15, 2,  2,  15, 4,  3,  15, 4,
	4,  15, 4, 5, 15, 4, 6, 15, 4,  7,  15, 4
};

local char s_FrameBitCountLUT[4] = { 0, 2, 4, 0 };

union mstudioanimvalue_t
{
	struct
	{
		uint8_t	valid;
		uint8_t	total;
	} num;
	short value;
};

uint64_t GetAnimValueOffset(mstudioanimvalue_t& panimvalue)
{
    const local int valid = panimvalue.num.valid;
    const local int total = panimvalue.num.total;

    return (s_AnimSeekLUT[3 * valid] + (int)((int)(s_AnimSeekLUT[3 * valid + 1] + total * s_AnimSeekLUT[3 * valid + 2]) / 16));
}

// datapoint animation
struct AxisFixup_t
{
    int8_t adjustment[3]; // per indice
};

struct AnimQuat32
{
    // saved components
    uint32_t value0 : 7;
    uint32_t value1 : 7;
    uint32_t value2 : 7;

    uint32_t scaleFactor : 3; // used to set two different scaling floats for unpacking components
    uint32_t droppedAxis : 2; // axis/indice of the dropped component
    
    uint32_t numInterpFrames : 6; // frame gap between this and the next quat (?)
};

struct AnimPos64
{
    // saved components
    int16_t values[3]; // x, y, z

    int16_t scaleFactor : 9;
    
    int16_t numInterpFrames : 7; // frame gap between this and the next quat (?)
};

struct mstudioiklink_t
{
	int		bone;
	Vector	kneeDir;	// ideal bending direction (per link, if applicable)
};

struct mstudionodetransition_t
{
    // in normal source this is an array of char[numlocalnode] per node, with each char holding a value
    // in r5 this seems to be compacted into a smaller format, with the number of "transitions"(?) listed,
    // followed by that a list of nodes with the index it would've been in the array

    uint16_t transition;    // the node for transition ? (in normal source)
    uint16_t index;         // the index that would have been if this was old style source
};


//
// meshes
//

struct UIPanelBounds_s
{
	Vector2D min;
	Vector2D max;

	Vector2D minScale;
	Vector2D maxScale;
};

struct UIPanelIndices_s
{
	// when properly used these will form a tri or quad.
	short vertexIndex[3];
};

struct UIPanelUnknown_s
{
	uint8_t unk_0[2];
};

struct UIPanelVertex_s
{
	int parent; // index into parent array, zero in most cases.
	Vector pos; // simple xyz pos local to bone.
};

struct UIPanelMesh_s
{
	short parentCount; // apparently you can have meshes parented to more than one bone(?)    
    short vertexCount; // number of verts
    short faceCount; // number of faces
    short unkCount;
    
    int parentOffset; // this gets padding out front of it to even off the struct
    int vertexOffset; // offset into vertex data
    int unkOffset;
    int indiceOffset; // offsets into a vertex map for each face
    int boundsOffset; // offset into uv section
};

struct UIPanelHeader_s
{
	int meshHash; // uses rui hash algo
	int meshOffset; // offset to the actual mesh, aligned to 16 bytes within the mdl
};


//
// collision
//

// headers
struct mstudiocollmodel_t
{
	int contentMasksIndex;
	int surfacePropsIndex;
	int surfaceNamesIndex;
	int headerCount;
};

#ifndef FEATURE_BVH_SURFACEPROPS
struct mstudiocollheader_t
{
	int unk_0;
	int bvhNodeIndex;
	int vertIndex;
	int bvhLeafIndex;

	float origin[3];
	float scale;
};
#else
struct mstudiocollheader_t
{
	int unk_0;
	int bvhNodeIndex;
	int vertIndex;
	int bvhLeafIndex;

	// [amos]
	// A new index that indexes into a buffer that contains surfacePropId's
	// The number of surfacePropId's is determined by surfacePropCount.
	// surfacePropArrayCount determines how many of these buffers we have,
	// they are the same size but sometimes with different surfacePropId's.
	int surfacePropDataIndex;

	uint8_t surfacePropArrayCount;
	uint8_t surfacePropCount;

	short padding_maybe;

	float origin[3];
	float scale;
};
#endif

struct dsurfaceproperty_t
{
	short unk_0;
	uint8_t surfacePropId;
	uint8_t contentMaskOffset;
	int surfaceNameOffset;
};

// for mstudiocollheader_t v12 
struct dsurfacepropertydata_t
{
	uint8_t surfacePropId1;
	uint8_t surfacePropId2;
	uint16_t flags;
};

#endif