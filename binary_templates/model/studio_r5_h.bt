//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: studio_h.bt
//   Authors: Rika
//   Version: 0.1
//   Purpose: Respawn Model Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../source_math.bt"

#ifndef STUDIO_R5_H
#define STUDIO_R5_H

#define MAX_NUM_LODS 8

int FIX_OFFSET(unsigned short offset)
{
    local int fixedOffset = ((offset & 0xFFFE) << (4 * (offset & 1)));

    return fixedOffset;
}

//
// bones
//


//
// animations
//
#define STUDIO_HAS_ANIM         0x20000
#define STUDIO_FRAMEMOVEMENT    0x40000 // framemovements are only read if this flag is present

#define STUDIO_ANIM_POS 0x1 // bone has pos values
#define STUDIO_ANIM_ROT 0x2 // bone has rot values
#define STUDIO_ANIM_SCALE 0x4 // bone has scale values
#define STUDIO_ANIM_DATA (STUDIO_ANIM_POS | STUDIO_ANIM_ROT | STUDIO_ANIM_SCALE) // bone has animation data

#define STUDIO_ANIM_ANIMSCALE 0x01 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMROT 0x02 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMPOS 0x04 // mstudioanim_valueptr_t

struct mstudio_rle_anim_t
{
	short size : 13; // total size of all animation data, not next offset because even the last one has it
	short flags : 3;
};

#define STUDIO_ANIMPTR_Z 0x01
#define STUDIO_ANIMPTR_Y 0x02
#define STUDIO_ANIMPTR_X 0x04


struct mstudioanim_valueptr_t
{
    short offset : 13;
    short flags : 3;
    uint8_t axisIdx1; // these two are definitely unsigned
    uint8_t axisIdx2;
 };

local int s_AnimSeekLUT[60] =
{
	1,  15, 16, 2,  7,  8,  2,  15, 0,  3,  15, 0,  4,  15, 0,  5,
	15, 0,  6,  15, 0,  7,  15, 0,  2,  15, 2,  3,  15, 2,  4,  15,
	2,  5,  15, 2,  6,  15, 2,  7,  15, 2,  2,  15, 4,  3,  15, 4,
	4,  15, 4, 5, 15, 4, 6, 15, 4,  7,  15, 4
};

local char s_FrameBitCountLUT[4] = { 0, 2, 4, 0 };

union mstudioanimvalue_t
{
	struct
	{
		uint8_t	valid;
		uint8_t	total;
	} num;
	short value;
};

uint64_t GetAnimValueOffset(mstudioanimvalue_t& panimvalue)
{
    const local int valid = panimvalue.num.valid;
    const local int total = panimvalue.num.total;

    return (s_AnimSeekLUT[3 * valid] + (int)((int)(s_AnimSeekLUT[3 * valid + 1] + total * s_AnimSeekLUT[3 * valid + 2]) / 16));
}


//
// meshes
//


//
// collision
//

#endif