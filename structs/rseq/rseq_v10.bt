//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rseq
//   Authors: Rika
//   Version: 10
//   Purpose: rseq animations
//  Category: Animation
// File Mask: *.rseq
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../rmdl/rmdl_structs.bt"

local int g = 0;
local int i = 0;
local int j = 0;
local int k = 1;
local int l = 0;
local int si = 0;

mstudioseqdesc_t_v54 seqdesc <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;

local int numanims = seqdesc.groupsize[0] * seqdesc.groupsize[1];
local int numbones = (seqdesc.activitymodifierindex - seqdesc.weightlistindex) / 4;
local int numsections;

if((seqdesc.unkindex - seqdesc.animindexindex) < sizeof(mstudioanimdesc_t_v54_v121))
    numanims = 0;

// generate all the sequences data structures
if(seqdesc.posekeyindex)
{
    FSeek(startof(seqdesc) + seqdesc.posekeyindex);
    float posekey[seqdesc.groupsize[0] + seqdesc.groupsize[1]] <bgcolor=0x55ee00>;
}

if(seqdesc.numevents)
{
    FSeek(startof(seqdesc) + seqdesc.eventindex);
    mstudioevent_t_v54_v122 seqevent[seqdesc.numevents] <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
}

if(seqdesc.numautolayers)
{
    FSeek(startof(seqdesc) + seqdesc.autolayerindex);
    mstudioautolayer_t_v54 autolayers[seqdesc.numautolayers] <bgcolor=0x226600>;
}

FSeek(startof(seqdesc) + seqdesc.weightlistindex);
float weightlist[numbones] <bgcolor=0xe1f27a>;

FSeek(startof(seqdesc) + seqdesc.activitymodifierindex);
for(j = 0; j < seqdesc.numactivitymodifiers; j++)
{
    mstudioactivitymodifier_t_v52 activitymodifier <bgcolor=0x119900, read=Str("%s : %i", ReadString(startof(this) + this.sznameindex), this.negate)>;
    FSeek(startof(seqdesc) + seqdesc.activitymodifierindex + ((sizeof(activitymodifier.sznameindex) * 2) * (j + 1)));
}

FSeek(startof(seqdesc) + seqdesc.animindexindex);
int blends[seqdesc[si].groupsize[0] * seqdesc[si].groupsize[1]] <bgcolor=0xffff00>;

local int valueOffset = 0;
for(k = 0; k < numanims; k++)
{
    FSeek(startof(seqdesc) + blends[k]);
    mstudioanimdesc_t_v54_v121 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
    
    struct {
        if (!(animdesc[k].flags & STUDIO_ALLZEROS))
        {
            if(animdesc[k].sectionindex)
            {
                struct {
                    // porter says this is ((numframes - unk - 1) / sectionframes) + 2
                    // however I have not found a case where that would give another result than what's seen below.
                    // infact, there have been anims that would actually break if using the above equation.
                    // trying something new because 010 is weird
                    local int sectionlength = Ceil(((float)animdesc.numframes) / (float)animdesc.sectionframes) + 1;
    
                    FSeek(startof(animdesc[k]) + animdesc[k].sectionindex);
                    mstudioanimsections_t_v54_v121 sectionindexes[sectionlength] <read=Str("idx %i", this.animindex), bgcolor=cLtBlue>;
        
                    local int nullsections = 0;

                    // respawn really needs to cut this out
                    if(numanims > 1 && numanims > (k + 1))
                    {
                        if((blends[k] + sectionindexes[0].animindex) >= blends[k + 1])
                        {
                            nullsections = 1;
                        }
                    }

                    for(i = 0; i < sectionlength; i++)
                    {
                        if(sectionindexes[i].animindex && !sectionindexes[i].isExternal && (blends[k] + sectionindexes[i].animindex) < seqdesc.szlabelindex && !nullsections)
                        {
                            struct {
                                FSeek(startof(animdesc[k]) + sectionindexes[i].animindex);
                                boneflagarray_t_loose flagarray;
                        
                                for(j = 0; j < numbones; j++)
                                {
                                    if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                                    {
                                        mstudio_rle_anim_t_v54 sectionanimheader <bgcolor=0x771122>;
                                        
                                        if(sectionanimheader.flags & STUDIO_ANIM_ANIMPOS_54)
                                        {
                                            valueOffset = startof(sectionanimheader.animpos) + (sectionanimheader.animpos.offset);
                                            FSeek(valueOffset);

                                            struct {
                                                if(sectionanimheader.animpos.flags & STUDIO_ANIMPTR_X)
                                                    mstudioanimvalue_t x <fgcolor=cLtGreen>;

                                                FSeek(valueOffset + (sectionanimheader.animpos.idx1 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animpos.flags & STUDIO_ANIMPTR_Y)
                                                    mstudioanimvalue_t y <fgcolor=cLtGreen>;

                                                FSeek(valueOffset + (sectionanimheader.animpos.idx2 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animpos.flags & STUDIO_ANIMPTR_Z)
                                                    mstudioanimvalue_t z <fgcolor=cLtGreen>;

                                            } posvalues;
                                            
                                        }

                                        if(sectionanimheader.flags & STUDIO_ANIM_ANIMROT_54)
                                        {
                                            valueOffset = startof(sectionanimheader.animrot) + (sectionanimheader.animrot.offset);
                                            FSeek(valueOffset);

                                            struct {
                                                if(sectionanimheader.animrot.flags & STUDIO_ANIMPTR_X)
                                                    mstudioanimvalue_t x <fgcolor=cLtRed>;

                                                FSeek(valueOffset + (sectionanimheader.animrot.idx1 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animrot.flags & STUDIO_ANIMPTR_Y)
                                                    mstudioanimvalue_t y <fgcolor=cLtRed>;

                                                FSeek(valueOffset + (sectionanimheader.animrot.idx2 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animrot.flags & STUDIO_ANIMPTR_Z)
                                                    mstudioanimvalue_t z <fgcolor=cLtRed>;

                                            } rotvalues;
                                        }

                                        if(sectionanimheader.flags & STUDIO_ANIM_ANIMSCALE_54)
                                        {
                                            valueOffset = startof(sectionanimheader.animscale) + (sectionanimheader.animscale.offset);
                                            FSeek(valueOffset);

                                            struct {
                                                if(sectionanimheader.animscale.flags & STUDIO_ANIMPTR_X)
                                                    mstudioanimvalue_t x <fgcolor=cLtYellow>;

                                                FSeek(valueOffset + (sectionanimheader.animscale.idx1 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animscale.flags & STUDIO_ANIMPTR_Y)
                                                    mstudioanimvalue_t y <fgcolor=cLtYellow>;

                                                FSeek(valueOffset + (sectionanimheader.animscale.idx2 * sizeof(mstudioanimvalue_t)));

                                                if(sectionanimheader.animscale.flags & STUDIO_ANIMPTR_Z)
                                                    mstudioanimvalue_t z <fgcolor=cLtYellow>;

                                            } scalevalues;
                                        }

                                        FSeek(startof(sectionanimheader) + sectionanimheader.size);
                                    }
                                }
                            } section;
                        }
                    }
                } sectionanimation;
            }
            else
            {
                struct {
                    FSeek(startof(animdesc[k]) + animdesc[k].animindex);
                    boneflagarray_t_loose flagarray;
    
                    for(j = 0; j < numbones; j++)
                    {
                        if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
                        {
                            mstudio_rle_anim_t_v54 animheader <bgcolor=cBlue>;

                            if(animheader.flags & STUDIO_ANIM_ANIMPOS_54)
                            {
                                valueOffset = startof(animheader.animpos) + (animheader.animpos.offset);
                                FSeek(valueOffset);

                                struct {
                                    if(animheader.animpos.flags & STUDIO_ANIMPTR_X)
                                        mstudioanimvalue_t x <fgcolor=cLtGreen>;

                                    FSeek(valueOffset + (animheader.animpos.idx1 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animpos.flags & STUDIO_ANIMPTR_Y)
                                        mstudioanimvalue_t y <fgcolor=cLtGreen>;

                                    FSeek(valueOffset + (animheader.animpos.idx2 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animpos.flags & STUDIO_ANIMPTR_Z)
                                        mstudioanimvalue_t z <fgcolor=cLtGreen>;

                                } posvalues;
                                
                            }

                            if(animheader.flags & STUDIO_ANIM_ANIMROT_54)
                            {
                                valueOffset = startof(animheader.animrot) + (animheader.animrot.offset);
                                FSeek(valueOffset);

                                struct {
                                    if(animheader.animrot.flags & STUDIO_ANIMPTR_X)
                                        mstudioanimvalue_t x <fgcolor=cLtRed>;

                                    FSeek(valueOffset + (animheader.animrot.idx1 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animrot.flags & STUDIO_ANIMPTR_Y)
                                        mstudioanimvalue_t y <fgcolor=cLtRed>;

                                    FSeek(valueOffset + (animheader.animrot.idx2 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animrot.flags & STUDIO_ANIMPTR_Z)
                                        mstudioanimvalue_t z <fgcolor=cLtRed>;

                                } rotvalues;
                            }

                            if(animheader.flags & STUDIO_ANIM_ANIMSCALE_54)
                            {
                                valueOffset = startof(animheader.animscale) + (animheader.animscale.offset);
                                FSeek(valueOffset);

                                struct {
                                    if(animheader.animscale.flags & STUDIO_ANIMPTR_X)
                                        mstudioanimvalue_t x <fgcolor=cLtYellow>;

                                    FSeek(valueOffset + (animheader.animscale.idx1 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animscale.flags & STUDIO_ANIMPTR_Y)
                                        mstudioanimvalue_t y <fgcolor=cLtYellow>;

                                    FSeek(valueOffset + (animheader.animscale.idx2 * sizeof(mstudioanimvalue_t)));

                                    if(animheader.animscale.flags & STUDIO_ANIMPTR_Z)
                                        mstudioanimvalue_t z <fgcolor=cLtYellow>;

                                } scalevalues;
                            }

                            FSeek(startof(animheader) + animheader.size);
                        }
                    }
                } animation;
            }
        }

        if(animdesc[k].numikrules)
        {
            FSeek(startof(animdesc[k]) + animdesc[k].ikruleindex);
            mstudioikrule_t_v54 animikrule[animdesc[k].numikrules] <bgcolor=cGreen>;

            for(j = 0; j < animdesc[k].numikrules; j++)
            {
                if(animikrule[j].compressedikerror.sectionframes)
                {
                    numsections = Ceil((float)animdesc.numframes / (float)animikrule[j].compressedikerror.sectionframes);

                    FSeek(startof(animikrule[j]) + animikrule[j].compressedikerrorindex);
                    struct {
                        int sectionindexes[numsections] <bgcolor=cDkGreen>; // sometimes only one

                        for(l = 0; l < numsections; l++)
                        {
                            FSeek(startof(animikrule[j]) + sectionindexes[l]);
                            struct {
                                short offset[6] <bgcolor=0x779911>;

                                for(g = 0; g < 6; g++)
                                {
                                    if(offset[g])
                                    {
                                        FSeek(startof(offset) + offset[g]);
                                        struct {
                                            mstudioanimvalue_t animvalue <bgcolor=0x228822>;
                    
                                            if(animvalue.num.valid > 0)
                                                short value[animvalue.num.valid];
                                        } animvalueik;
                                    }
                                }
                            } compressedikerror_section;
                        }
                    } compressedikerror;
                }

                if(animikrule[j].szattachmentindex)
                {
                    FSeek(startof(animikrule[j]) + animikrule[j].szattachmentindex);
                    struct {
                        string ikattachment <fgcolor=cGreen>;
                    } attachmentstring;
                }
            }
        }
    
        if(animdesc[k].framemovementindex)
        {
            FSeek(startof(animdesc[k]) + animdesc[k].framemovementindex);
            mstudioframemovement_t_v54 framemovement <bgcolor=cLtGreen>;

            // it's impossible to tell if these are actual structs or just values, however
            // they are offset from the start of their parent
            struct {
                numsections = Ceil((float)animdesc.numframes / (float)framemovement.sectionframes);

                int sectionindexes[numsections] <bgcolor=0x99ffcc>; // sometimes only one

                for(j = 0; j < numsections; j++)
                {
                    FSeek(startof(framemovement) + sectionindexes[j]);
                    struct {
                        short offset[4] <bgcolor=0x77ccbb>;

                        for(g = 0; g < 4; g++)
                        {
                            if(offset[g])
                            {
                                FSeek(startof(offset) + offset[g]);
                                struct {
                                    mstudioanimvalue_t animvalue <bgcolor=0x99CC99>;
                                
                                    if(animvalue.num.valid > 0)
                                        short value[animvalue.num.valid - 1];
                                } animvalueframe;
                            }
                        }
                        
                    } framemovement_section;
                }
            } framemovement_data;
        }
    } animdesc_data;
}

if(seqdesc.unkcount)
{
    FSeek(startof(seqdesc) + seqdesc.unkindex);
    unkseqdata_t unkseqdata[seqdesc.unkcount] <bgcolor=0x9900BB>;
}


// if this throws let me know, I have yet to find anything here
if(numanims)
{
    for(i = 0; i < numanims; i++)
    {
        for(j = 0; j < 4; j++)
            Assert(!animdesc[i].unk1[j], "unknown animdesc value used");
    }
}


if(seqdesc.numevents)
{
    //for(i = 0; i < seqdesc.numevents; i++)
        //Assert(!seqevent.unk, "unknown event value used");
}


// create nice looking strings you can view
#include "../rseq/rseq_module_strings.bt"
