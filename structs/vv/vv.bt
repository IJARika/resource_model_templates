//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vvc, vvd, other (IDDV probably)
//   Authors: Valve
//   Version: 1 (vvc), 4 (vvd)
//   Purpose: Valve Vertex Files
//  Category: Struct
// File Mask: *.vvc, *.vvd
//  ID Bytes: 
//   History: 
//------------------------------------------------


#define MAX_NUM_LODS 8
#define MAX_NUM_BONES_PER_VERT 3


struct vertexFileHeader_t
{
	int id; // MODEL_VERTEX_FILE_ID
	int version; // MODEL_VERTEX_FILE_VERSION
	int checksum; // same as studiohdr_t, ensures sync

	int numLODs; // num of valid lods
	int numLODVertexes[MAX_NUM_LODS]; // num verts for desired root lod

    // in vvc this is the offset to vertex color
	int numFixups; // num of vertexFileFixup_t

    // in vvc this is the offset into a second uv layer
	int fixupTableStart; // offset from base to fixup table
	int vertexDataStart; // offset from base to vertex block
	int tangentDataStart; // offset from base to tangent block
};

struct vertexColorFileHeader_t
{
	int id; // IDCV
	int version; // 1
	int checksum; // same as studiohdr_t, ensures sync

	int numLODs; // num of valid lods
	int numLODVertexes[MAX_NUM_LODS]; // num verts for desired root lod

	int colorDataStart;
	int uv2DataStart;
};

struct vertexBoneWeightsExtraFileHeader_t
{
	int checksum; // same as studiohdr_t, ensures sync
    int version; // should be 1

	int numLODVertexes[MAX_NUM_LODS]; // maybe this but the others don't get filled?

	int weightDataStart; // index into mstudioboneweightextra_t array
};

struct vertexFileFixup_t
{
	int		lod;				// used to skip culled root lod
	int		sourceVertexID;		// absolute index from start of vertex/tangent blocks
	int		numVertexes;
};

struct mstudioboneweight_t
{
	float	weight[MAX_NUM_BONES_PER_VERT];
	unsigned char bone[MAX_NUM_BONES_PER_VERT]; // set to unsigned so we can read it
	byte	numbones;
};

// v54 weight stuff
struct mstudioboneweightextra_t
{
	short	weight <read=Str("%f", this / 32767.0)>;
	short   bone; 
};

struct mstudiopackedweight_t
{
    short weight[3] <read=Str("%f", this / 32767.0)>; 

    short pad; // what if

    int externalweightindex;
};

struct mstudioboneweight_t_v54
{
    union {       
        mstudiopackedweight_t packedweight;
        float weight[MAX_NUM_BONES_PER_VERT];
    } weights;

    unsigned char bone[MAX_NUM_BONES_PER_VERT]; // set to unsigned so we can read it
    byte numbones; // max is 16 in apex, 3 in titanfall 2 and before
};

struct mstudiovertex_t
{
	mstudioboneweight_t	m_BoneWeights;
	Vector m_vecPosition;
	Vector m_vecNormal;
	Vector2 m_vecTexCoord;
};

struct thinModelVertices_t
{
	int m_numBoneInfluences; // Number of bone influences per vertex, N
	float m_boneWeights; // This array stores (N-1) weights per vertex (unless N is zero)
	byte m_boneIndices; // This array stores N indices per vertex
	Vector m_vecPositions;
	uint m_vecNormals; // Normals are compressed into 16 bits apiece (see PackNormal_UBYTE4() )
};
