//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 48/49/52
//   Purpose: Valve/Respawn MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "./source_math.bt"
#include "./mdl_structs.bt"

// version before the header is created.
local int preversion = ReadInt(4);

// headers
if (preversion == 52)
{ 
    studiohdrv52_t mdlHeader <bgcolor=cLtBlue>;
    studiohdr2v52_t mdlSubHeader <bgcolor=cDkBlue>;
}
else
{
    studiohdr_t mdlHeader <bgcolor=cLtBlue>;
    studiohdr2_t mdlSubHeader <bgcolor=cDkBlue>;
}


// this is a check for non shipped models.
// this isn't essential for models to function, however when not present it should be four bytes instead of just nothing.
if (mdlHeader.version >= 52)
{
    if (mdlHeader.boneindex > mdlHeader.mayaindex)
        char mayabakery[mdlHeader.boneindex - mdlHeader.mayaindex] <fgcolor=cRed>;
}


// bones
FSeek(mdlHeader.boneindex);
if (mdlHeader.version == 52)
    mstudiobonev52_t bones[mdlHeader.numbones] <bgcolor=cLtGreen>;
else if (mdlHeader.version == 49)
    mstudiobonev49_t bones[mdlHeader.numbones] <bgcolor=cLtGreen>;
else
    mstudiobonev48_t bones[mdlHeader.numbones] <bgcolor=cLtGreen>;

local int jigglebonecount = 0;
local int i = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
}

mstudiobbox_t bboxes[bboxCount]  <bgcolor=0xa29418>;


// more bones
FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


// animation
FSeek(mdlHeader.localanimindex);
mstudioanimdesc_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;

//FSeek(mdlHeader.localseq_offset);

//mstudioanimdesc_t animseq[1] <bgcolor=0xf0b27a>;


// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
}

mstudiomodel_t models[modelCount]<bgcolor=cDkGray>;


// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchain_t ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
}

mstudioiklink_t iklinks[linkCount] <bgcolor=0x7d3c98>;

FSeek(mdlHeader.localikautoplaylockindex);
mstudioiklock_t iklocks[mdlHeader.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
}

mstudiomesh_t meshes[meshCount] <bgcolor=cLtGray>;


// various includes, materials, and groups
FSeek(mdlHeader.includemodelindex);
mstudiomodelgroup_t includemodels[mdlHeader.numincludemodels] <bgcolor=cLtBlue>;

FSeek(mdlHeader.textureindex);
mstudiotexture_t textures[mdlHeader.numtextures] <bgcolor=cGreen>;

FSeek(mdlHeader.cdtextureindex);
mstudiotexturedir_t cdmaterials[mdlHeader.numcdtextures] <bgcolor=cDkGreen>;

FSeek(mdlHeader.skinindex);
mstudioskingroup_t skingroup[mdlHeader.numskinfamilies] <bgcolor=cDkGreen>;

FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(mdlSubHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlSubHeader.numsrcbonetransform] <bgcolor=cDkGreen>;

if (mdlSubHeader.linearboneindex > 0)
{
    FSeek(mdlSubHeader.linearboneindex + 408);
    mstudiolinearbone_t linearbone <bgcolor=cGreen>;

    struct mstudiolinearbonedata_t
    {
        if(linearbone.flagsindex > 0)
            uint32 bone_flags[linearbone.numbones];
        if(linearbone.parentindex > 0)
            uint32 bone_parents[linearbone.numbones];
        
        if(linearbone.posindex > 0)
            Vector3 bone_pos[linearbone.numbones];
        if(linearbone.quatindex > 0)
	        Quaternion bone_quat[linearbone.numbones];
        if(linearbone.rotindex > 0)
	        RadianEuler bone_rot[linearbone.numbones];
        
        if(linearbone.posetoboneindex > 0)
            matrix3x4_t bone_poseToBone[linearbone.numbones];

        if(linearbone.posscaleindex > 0)
            Vector3 bone_posscale[linearbone.numbones];
        if(linearbone.rotscaleindex > 0)
	        Vector3 bone_rotscale[linearbone.numbones];
	
        if(linearbone.qalignmentindex > 0)
	        Quaternion bone_qAlignment[linearbone.numbones];
    };

    mstudiolinearbonedata_t linearbonedata <bgcolor=cLtGreen>;
};

if (mdlHeader.version == 52)
{
    // always 60 bytes when unused.
    FSeek(mdlSubHeader.unkindex + 408);
    char unk_bytes[mdlSubHeader.unkindex1 - mdlSubHeader.unkindex] <fgcolor=cRed>;
}

// unk_index1 always follows this, and always seems to be one byte in front of the string table.


// string table
FSeek(mdlSubHeader.sznameindex  + 408);
char stringtable[mdlHeader.length - (mdlSubHeader.sznameindex  + 408)] <fgcolor=cLtRed>;