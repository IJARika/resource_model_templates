//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: File: rmdl, rrig
//   Authors: Rika
//   Version: 54
// Increment: All
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.rmdl, *.rrig 
//  ID Bytes: 
//   History: 
//------------------------------------------------


/*V54 SEQUENCE MODULE*/


// do sequences, these are unchanged across all V54.
FSeek(mdlHeader.localseqindex);
mstudioseqdesc_t_v54 animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;

struct animboneflag_t
{   
    // don't think this is correct
    byte STUDIO_ANIM_RAWPOS_54 : 1;
    byte STUDIO_ANIM_RAWROT_54 : 1;
    byte STUDIO_ANIM_RAWSCALE_54 : 1;
    byte STUDIO_ANIM_UNK_54 : 1;    
};

struct boneflagarray_t
{
    
    for(i = 0; i < mdlHeader.numbones; i++)
        animboneflag_t boneflag <bgcolor=0xaa8822>;
};

struct mstudio_rle_anim_t_v54
{
	int16 size; // actually size and not next offset since it's always filled

    Vector48 rawpos;

    Quat64 rawrot;
};

// loop through all sequences to do it's data structures.
for(i = 0; i < mdlHeader.numlocalseq; i++)
{
    if(animseq[i].posekeyindex > 0)
    {
        FSeek(startof(animseq[i]) + animseq[i].posekeyindex);
        posekey_t posekey <bgcolor=0x55ee00>;
    }

    if(animseq[i].numevents > 0)
    {
        FSeek(startof(animseq[i]) + animseq[i].eventindex);
        for(j = 0; j < animseq[i].numevents; j++)
        {
            mstudioevent_t seqevent <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
        }
    }

    if(animseq[i].numautolayers > 0)
    {
        FSeek(startof(animseq[i]) + animseq[i].autolayerindex);
        for(j = 0; j < animseq[i].numautolayers; j++)
        {
            mstudioautolayer_t autolayers <bgcolor=0x226600>;
        }
    }
    
    FSeek(startof(animseq[i]) + animseq[i].weightlistindex);
    seqweightlist_t weightlist <bgcolor=0xe1f27a>;

    struct blendgroup_t
    {
        int16 blends[animseq[i].groupsize[0] * animseq[i].groupsize[1]];
    };
    
    FSeek(startof(animseq[i]) + animseq[i].animindexindex);
    blendgroup_t blendgroup <bgcolor=0xffff00>;

    //char padding[sizeof(blendgroup[i]) % 4];

    int16 padd;

    mstudioanimdesc_t_v54 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;

    FSeek(startof(animdesc[i]) + animdesc[i].animindex);
    BitfieldDisablePadding();
    boneflagarray_t flags;
    BitfieldEnablePadding();

    //byte padd1;

    mstudio_rle_anim_t_v54 wow;

}