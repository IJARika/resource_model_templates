//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: File: rmdl, rrig
//   Authors: Rika
//   Version: 54
// Increment: All
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.rmdl, *.rrig 
//  ID Bytes: 
//   History: 
//------------------------------------------------


/*V54 SEQUENCE MODULE*/


// do sequences, these are unchanged across all V54.
FSeek(mdlHeader.localseqindex);
mstudioseqdesc_t_v54 seqdesc[mdlHeader.numlocalseq] <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;

local int numanims = 0;

local int animheaderpos = 0;

// loop through all sequences to do it's data structures.
for(i = 1; i < 2; i++)
{
    if(seqdesc[i].posekeyindex > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].posekeyindex);
        posekey_t posekey <bgcolor=0x55ee00>;
    }

    if(seqdesc[i].numevents > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].eventindex);
        for(j = 0; j < seqdesc[i].numevents; j++)
        {
            mstudioevent_t_v54 seqevent <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
        }
    }

    if(seqdesc[i].numautolayers > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].autolayerindex);
        for(j = 0; j < seqdesc[i].numautolayers; j++)
        {
            mstudioautolayer_t autolayers <bgcolor=0x226600>;
        }
    }
    
    FSeek(startof(seqdesc[i]) + seqdesc[i].weightlistindex);
    seqweightlist_t weightlist <bgcolor=0xe1f27a>;
    
    FSeek(startof(seqdesc[i]) + seqdesc[i].animindexindex);
    blendgroup_t_v54 blendgroup <bgcolor=0xffff00>;

    numanims = seqdesc[i].groupsize[0] * seqdesc[i].groupsize[1];

    for(k = 0; k < 1; k++)
    {
        FSeek(startof(seqdesc[i]) + blendgroup[k].blends[k]);
        mstudioanimdesc_t_v54 animdesc <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
        
        FSeek(startof(animdesc[k]) + animdesc[k].animindex);
        boneflagarray_t flagarray;

        byte padd[sizeof(flagarray) % 2] <bgcolor=0xaaaa22>;

        for(j = 0; j < mdlHeader.numbones; j++)
        {
            if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
            {
                mstudio_rle_anim_t_v54 animheader <bgcolor=cBlue>;
                FSeek(startof(animheader[animheaderpos]) + animheader[animheaderpos].size);
                animheaderpos++;
            }
        }
    }

    

    /*FSeek(startof(animdesc[i]) + animdesc[i].animindex);

    boneflagarray_t flagarray;

    byte padd[sizeof(flagarray) % 2] <bgcolor=0xaaaa22>;

    /*for(j = 0; j < mdlHeader.numbones; j++)
    {
        if(flagarray.boneflag[j].STUDIO_ANIM_POS_54 || flagarray.boneflag[j].STUDIO_ANIM_ROT_54 || flagarray.boneflag[j].STUDIO_ANIM_SCALE_54)
            mstudio_rle_anim_t_v54 animheader <bgcolor=cBlue>;
    }*/
}