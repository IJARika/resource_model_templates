//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl, rrig
//   Authors: Rika
//   Version: 16
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.rmdl, *.rrig
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../rmdl/rmdl_structs.bt"

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;


// header
studiohdr_t_v16 mdlHeader <bgcolor=cLtBlue, read=ReadString(startof(this) + this.sznameindex)>;


// funny strings that work the same always
#include "../mdl/mdl_v52_module_mayastrings.bt"


// do bones
FSeek(mdlHeader.boneindex);
mstudiobone_t_v16 bones[mdlHeader.numbones] <bgcolor=cLtGreen, read=ReadString(startof(this) + this.sznameindex)>;


// do attachements
FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t_v16 attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca, read=Str("%s : %s", ReadString(startof(this) + this.sznameindex), ReadString(startof(bones[this.localbone]) + bones[this.localbone].sznameindex))>;


// global hitbox for v54 since it doesn't change
#include "../rmdl/rmdl_v16_module_hitbox.bt"


FSeek(mdlHeader.bonetablebynameindex);
ubyte bonebyname[mdlHeader.numbones] <read=ReadString(startof(bones[this]) + bones[this].sznameindex), bgcolor=cDkGreen>;



// seqs change for v12.2, or aseq v10.
#include "../rmdl/rmdl_v16_module_sequences.bt"



// models
// these change between v12.1/v13/v14 because Respawn.
FSeek(mdlHeader.bodypartindex);
if(mdlHeader.numbodyparts)
{
    struct {
    
        for(i = 0; i < mdlHeader.numbodyparts; i++)
        {
            FSeek(mdlHeader.bodypartindex + (sizeof(mstudiobodyparts_t_v16) * i));
            struct {
                mstudiobodyparts_t_v16 bodypart <bgcolor=cGray, read=ReadString(startof(this) + this.sznameindex)>;
        
                FSeek(startof(bodypart) + bodypart.modelindex);
                for(j = 0; j < bodypart.nummodels; j++)
                {
                    FSeek(startof(bodypart) + bodypart.modelindex + (sizeof(mstudiomodel_t_v16) * j));
                    struct {
                        mstudiomodel_t_v16 model;
    
                        FSeek(startof(model) + model.meshindex);
                        mstudiomesh_t_v16 meshes[model.nummeshes] <bgcolor=cLtGray>;
                    } model <bgcolor=cDkGray>;
                }
            } bodypart <read=ReadString(startof(this.bodypart) + this.bodypart.sznameindex)>;
        }
    
    } bodyparts <read=Str("%i bodyparts", mdlHeader.numbodyparts)>;
}


// setup nodes, not fully understood
// nodes have names
if(mdlHeader.numlocalnodes > 0)
{
    FSeek(mdlHeader.localnodenameindex);
    short nodename[mdlHeader.numlocalnodes] <bgcolor=cDkYellow, read=ReadString(mdlHeader.localnodenameindex + this)>;
    
    short nodedataindex[mdlHeader.numlocalnodes] <bgcolor=cYellow>;
}


FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t_v16 poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow, read=ReadString(startof(this) + this.sznameindex)>;


// do ikchains
FSeek(mdlHeader.ikchainindex);
mstudioikchain_t_v16 ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef, read=ReadString(startof(this) + this.sznameindex)>;

local int linkCount = 0;

// get link count
for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
}

// do links
mstudioiklink_t_v54 iklinks[linkCount] <bgcolor=0x7d3c98>;


// various includes, materials, and groups

// we no longer do include model because that's handled in the rpak header.


// do textures
FSeek(mdlHeader.textureindex);
mstudiotexture_t_v16 textures[mdlHeader.numtextures] <bgcolor=cGreen>;

// do skingroups
FSeek(mdlHeader.skinindex);
if(mdlHeader.numskinfamilies)
{
    struct {
        short texture[mdlHeader.numskinref] <read=ReadString(startof(textures[this]) + textures[this].sznameindex)>;
    } skingroup[mdlHeader.numskinfamilies] <bgcolor=cDkGreen>;
}

// do skingroup names if they exist
if(mdlHeader.numskinfamilies > 1)
{
    short skingroupnames[mdlHeader.numskinfamilies - 1] <fgcolor=cDkGreen, read=ReadString(this)>;
}

// do keyvalues, this remains unchanged in all models since it's just char data.
if(mdlHeader.keyvalueindex)
{
    FSeek(mdlHeader.keyvalueindex);
    string keyvalues_char <fgcolor=cLtBlue>;
}

// basically if the name is small enough to fit into 32 bytes it isn't stored in the string block
if(mdlHeader.sznameindex > sizeof(studiohdr_t_v16))
{
    FSeek(mdlHeader.sznameindex);
    char stringtable[mdlHeader.bonedataindex - mdlHeader.sznameindex] <fgcolor=cLtRed>;
}
else
{ 
    FSeek(mdlHeader.surfacepropindex);
    char stringtable[mdlHeader.bonedataindex - mdlHeader.surfacepropindex] <fgcolor=cLtRed>;
}


FSeek(mdlHeader.bonedataindex);
mstudiobonedata_t_v16 bonedata[mdlHeader.numbones] <bgcolor=cLtGreen>;


local int jigglebonecount = 0;

// get jiggle bone count
for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bonedata[i].proctype == 5) {
        jigglebonecount++;
    }
}

// do jigglebones
mstudiojigglebone_t_v54 jigglebones[jigglebonecount] <bgcolor=cGreen, read=ReadString(startof(bones[this.bone]) + bones[this.bone].sznameindex)>;


// related to physics bones?
if(mdlHeader.numprocbonesunk)
{
    FSeek(mdlHeader.procbonearrayindex);
    ubyte unkboneindex[mdlHeader.numprocbonesunk] <read=ReadString(startof(bones[this]) + bones[this].sznameindex), bgcolor=0x33AA22>; // index of bone??
    
    FSeek(mdlHeader.procbonemaskindex);
    byte unkbonearray[mdlHeader.numbones] <bgcolor=0x558822>; // used bones are not nulled here. number is index of "flex"
}

FSeek(mdlHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlHeader.numsrcbonetransform] <bgcolor=cDkGreen, read=ReadString(startof(this) + this.sznameindex)>;

#include "../rmdl/rmdl_v16_module_linearbone.bt"


// unchanged between subversions
#include "../rmdl/rmdl_v16_module_rui.bt"

/*// global string table setup, only changes for v14
#include "../rmdl/rmdl_v54_v14_module_stringtable.bt"


// unkdata headers changed in v12
#include "../rmdl/rmdl_v54_v12_module_unkdata.bt"


// unsure what this is for, same as v53
#include "../mdl/mdl_v53_module_unk3.bt"
*/

if(mdlHeader.unkcount3)
{
    FSeek(GetRMDLOffset(mdlHeader.unkindex3));
    short unk3[mdlHeader.unkcount3] <bgcolor=cLtYellow>;
}

// third set of core parts, done like this for spacing.
#include "../rmdl/rmdl_v16_vg.bt"


// unkdata
if(mdlHeader.bvh4index)
{
    FSeek(GetRMDLOffset(mdlHeader.bvh4index));
    unkheader_v54 unkhdr <bgcolor=cDkBlue>;
    unksectionheader_v54_v12 unksecthdr[unkhdr.numsections] <bgcolor=cBlue>;
    //unkheaderdata_v54 unkhdrdata <bgcolor=cDkBlue>;

    FSeek(startof(unkhdr) + unkhdr.dataindex2);
    unkheaderdata_v54 unkhdrdata <bgcolor=cDkBlue>;

    for(i = 0; i < unkhdr.numsections; i++)
    {
        FSeek(startof(unkhdr) + unksecthdr[i].dataindex2);
        unkdata2_t guh2 <bgcolor=0xFF9600>;
    }

    for(i = 0; i < unkhdr.numsections; i++)
    {
        FSeek(startof(unkhdr) + unksecthdr[i].nodeindex);
        BVH4Node_t parent_node <bgcolor=0xAA9600>;


        // todo read types and add children
    }
}