//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl, rrig
//   Authors: Valve, Rika, & Others
//   Version: 54
//   Purpose: Respawn MDL Structs
//  Category: Struct
// File Mask: *.rmdl, *.rrig
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define MAX_NUM_LODS 8

//local int i = 0;

// these are just all structs that I have mostly working/fitting, it does not mean they are correct.
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//========
// Headers


// main headers
struct studiohdrv54_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
    int materialtypesindex;
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	int numflexdesc;
	int flexdescindex;
 
	int meshindex; // SubmeshLodsOffset, might just be a mess offset

	int numflexcontrollers;
	int flexcontrollerindex;
 
	int numflexrules;
	int flexruleindex;
 
	int numikchains;
	int ikchainindex;

	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// unused for packed models
	int numincludemodels;
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex;
	
	// if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;

	float fadedistance;
	
	float gathersize; // what. from r5r struct

    int numunk_v54_early;
    int unkindex_v54_early;

	int unk_v54[2];

	// this is in all shipped models, probably part of their asset bakery. it should be 0x2CC.
	int mayaindex; // doesn't actually need to be written pretty sure, only four bytes when not present.

	int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;
	
	int linearboneindex;

	int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;
	
	int unk1_v54[7];

	// maybe this is for the string table since it always has one byte padding it?
	// this is probably for some section I haven't seen or a string that hasn't been filled out.
	int unkindex1; // byte before string table start?

	// this is now used for combined files in rpak, vtx, vvd, and vvc are all combined while vphy is separate.
	// the indexes are added to the offset in the rpak mdl_ header.
	// vphy isn't vphy, looks like a heavily modified vphy.
	int vtxindex; // VTX
	int vvdindex; // VVD / IDSV
	int vvcindex; // VVC / IDCV 
	int vphyindex; // VPHY / IVPS

	int vtxsize;
	int vvdsize;
	int vvcsize;
	int vphysize; // still used in models using vg

	// unk2_v54[3] is the chunk after following unkindex2's chunk
	int unk2_v54[3]; // the same four unks in v53 I think, the first index being unused now probably

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unk3_v54[3];

	int unkindex4; // chunk before unkindex3 sometimes

	int unk4_v54[3]; // same as unk3_v54_v121

    //int vgindex; // 0tVG
    //int unksize; // might be offset
    //int unksize1; // might be offset

};

struct studiohdrv54_v121_t
{
    int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
    int materialtypesindex;
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	// these are unknown since I don't know what they cut
	int numunk_v121;
	int unkindex_v121;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// unused for packed models
	int numincludemodels;
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex;

	int numunk1_v121;
	int unkindex1_v121;

    int boneremapindex;
    int numboneremaps;

    int unk_v54_v121[4];

    // section before bone remaps
    int unkindex2_v121;
    int numunk2_v121;

    // section before above section
	int unkindex3_v121;
    int numunk3_v121;

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2];

    // asset bakery strings if it has any
	int mayaindex;

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk3_v54_a[2]; // I think this section was split vs old v54

	// the indexes are added to the offset in the rpak mdl_ header.
	// vphy isn't vphy, looks like a heavily modified vphy.
    // something different about these now
	int vtxindex; // VTX
	int vvdindex; // VVD / IDSV
	int vvcindex; // VVC / IDCV 
	int vphyindex; // VPHY / IVPS

	int vtxsize;
	int vvdsize;
	int vvcsize;
	int vphysize;

    int unk3_v54_b; // second part of above

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];
};

struct studiohdrv54_v13_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
    int materialtypesindex;
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	// these are unknown since I don't know what they cut
	int numunk_v121;
	int unkindex_v121;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// unused for packed models
	int numincludemodels;
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex;

	int numunk1_v121;
	int unkindex1_v121;

    int boneremapindex;
    int numboneremaps;

    int unk_v54_v121[4];

    // section before bone remaps
    int unkindex2_v121;
    int numunk2_v121;

    // section before above section
	int unkindex3_v121;
    int numunk3_v121;

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2];

    int unk_v54_v13;

    // asset bakery strings if it has any
	int mayaindex;

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk3_v54_a[2]; // I think this section was split vs old v54

	// the indexes are added to the offset in the rpak mdl_ header.
	// vphy isn't vphy, looks like a heavily modified vphy.
    // something different about these now
	int vtxindex; // VTX
	int vvdindex; // VVD / IDSV
	int vvcindex; // VVC / IDCV 
	int vphyindex; // VPHY / IVPS

	int vtxsize;
	int vvdsize;
	int vvcsize;
	int vphysize;

    int unk3_v54_b; // second part of above

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];

    int unk1_v54_v13[3];
};

struct studiohdrv54_v14_t
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
	int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
	int checksum; // This has to be the same in the phy and vtx files to load!
	int unk; // This has been moved from studiohdr2 to the front of the main header.
	char name[64]; // The internal name of the model, padding with null bytes.
	                // Typically "my_model.mdl" will have an internal name of "my_model"
	int length; // Data size of MDL file in bytes.
 
	Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
	int flags;
  
	int numbones; // bones
	int boneindex;
 
	int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
	int numhitboxsets;
	int hitboxsetindex;
 
	int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
	int numlocalseq; // sequences
	int	localseqindex;

    int unk_v54_v14[2]; // added in v13 -> v14
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
 
	// mstudiotexture_t
	// short rpak path
	// raw textures
    int materialtypesindex;
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
	// this should always only be one, unless using vmts.
	// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
	// replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
	int numlocalattachments;
	int localattachmentindex;
 
	int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
	// these are unknown since I don't know what they cut
	int numunk_v121;
	int unkindex_v121;

	int numikchains;
	int ikchainindex;
 
	// this is rui meshes
	int numruimeshes;
	int ruimeshindex;
 
	int numlocalposeparameters;
	int localposeparamindex;
 
	int surfacepropindex;
 
	int keyvalueindex;
	int keyvaluesize;
 
	int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
	float mass;
	int contents;
	
	// unused for packed models
	int numincludemodels;
	int includemodelindex;
	
	uint32 virtualModel;

	int bonetablebynameindex;

	int numunk1_v121;
	int unkindex1_v121;

    int boneremapindex;
    int numboneremaps;

    int unk_v54_v121[4];

    // section before bone remaps
    int unkindex2_v121;
    int numunk2_v121;

    // section before above section
	int unkindex3_v121;
    int numunk3_v121;

    float fadedistance;
	
	float gathersize; // what. from r5r struct
	
	int unk_v54[2];

    int unk_v54_v13;

    // asset bakery strings if it has any
	int mayaindex;

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	int linearboneindex;

    int m_nBoneFlexDriverCount; // unsure if that's what it is in apex
	int m_nBoneFlexDriverIndex;

	int unk3_v54_a[2]; // I think this section was split vs old v54

	// the indexes are added to the offset in the rpak mdl_ header.
	// vphy isn't vphy, looks like a heavily modified vphy.
    // something different about these now
	int vtxindex; // VTX
	int vvdindex; // VVD / IDSV
	int vvcindex; // VVC / IDCV 
	int vphyindex; // VPHY / IVPS

	int vtxsize;
	int vvdsize;
	int vvcsize;
	int vphysize;

    int unk3_v54_b; // second part of above

    int unkindex3; // index to chunk after string block

    Vector3 mins; // min/max for Something
    Vector3 maxs; // seem to be the same as hull size

    int unkindex4; // chunk before unkindex2 sometimes

    int unk4_v54[3];

    int unk1_v54_v13[3];
};


//=============
// Bone Structs

// bones
// v54 is a heavily gutted v53 bone
struct mstudiobonev54_t
{
	int sznameindex;

	int parent; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos;
	Quaternion quat;
	RadianEuler rot;
	
	Vector3 unkvector; // the same as whatever v53 is

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	int proctype;
    int procindex; // procedural rule
	int physicsbone; // index into physically simulated bone
	
    int surfacepropidx; // index into string tablefor property name

	int contents; // See BSPFlags.h for the contents flags

    int unk;
	
	int surfacepropLookup; // unsure, the normal spot has data though
	
	int unk1;
};

struct mstudiobonev54_v121_t
{
	int sznameindex;

	int parent; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos;
	Quaternion quat;
	RadianEuler rot;
	
	Vector3 unkvector; // the same as whatever v53 is

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	int proctype;
    int procindex; // procedural rule
	int physicsbone; // index into physically simulated bone
	
    int surfacepropidx; // index into string tablefor property name

	int contents; // See BSPFlags.h for the contents flags
	
	int unk[2];
};

// jigglebone
struct mstudiojigglebonev54_t
{
    byte flags; // looks to be.

    byte unk;
    byte unk1;
    byte unk2;

	// general params
	float length; // how far from bone base, along bone, is tip
	float tipMass;

    float unkfloat; // v54 adds an extra value here but otherwise the same

	// flexible params
	float yawStiffness;
	float yawDamping;	
	float pitchStiffness;
	float pitchDamping;	
	float alongStiffness;
	float alongDamping;	

	// angle constraint
	float angleLimit; // maximum deflection of tip in radians
	
	// yaw constraint
	float minYaw; // in radians
	float maxYaw; // in radians
	float yawFriction;
	float yawBounce;
	
	// pitch constraint
	float minPitch; // in radians
	float maxPitch; // in radians
	float pitchFriction;
	float pitchBounce;

	// base spring
	float baseMass;
	float baseStiffness;
	float baseDamping;	
	float baseMinLeft;
	float baseMaxLeft;
	float baseLeftFriction;
	float baseMinUp;
	float baseMaxUp;
	float baseUpFriction;
	float baseMinForward;
	float baseMaxForward;
	float baseForwardFriction;
};

// attachment
struct mstudioattachmentv54_t
{
	int sznameindex;
	int		flags;

	int					localbone; // parent bone

	matrix3x4_t			localmatrix; // attachment point
};

// ikchain
struct mstudioikchainv54_t
{
	int sznameindex;

	int linktype;
	int numlinks;
	int linkindex;
    
    float	kneeDir;
};

// ikinfo
struct mstudioiklinkv54_t
{
	uint32 bone;
	Vector3	kneeDir; // ideal bending direction (per link, if applicable), unknown in v53
};

// linear bone

struct mstudiolinearbonev54_t	
{
    // they cut pos and rot scale, understandable since posscale was never used it tf|2
	int numbones;

	int flagsindex;

	int	parentindex;
	
	int	posindex;
	
	int quatindex;
	
	int rotindex;
	
	int posetoboneindex;
};

// bone id in alphabetical order
struct mstudioboneremaptable_t
{
    byte bone_id[mdlHeader.numboneremaps];
};


//===============
// Hitbox Structs


// hit box boxes
struct mstudiobboxv54_t
{
	int bone;
	int group; // intersection group

	Vector3 bbmin; // bounding box
	Vector3 bbmax;	

	int szhitboxnameindex; // offset to the name of the hitbox.
    
    int unk;
    int keyvalueindex; // used for KV names in string block, should be set to hitboxname if kv unneeded.
};


//==================
// Animation Structs


// seq descriptions
struct mstudioseqdescv54_t
{
	int baseptr;

	int	szlabelindex;

	int szactivitynameindex;

	int flags; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;
	
	Vector3 bbmin; // per sequence bounding box
	Vector3 bbmax;		

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait
	
	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

    int activitymodifierindex;
	int numactivitymodifiers;

	int unk[4];
};


//===================
// Model/Mesh Structs


// studio models
struct mstudiomodelv54_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	int unk[4];

    int unkindex;
    int unkindex1;
};

struct mstudiomodelv54_v121_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	//int unk;

    //int unkindex;
    //int unkindex1;
};

struct mstudiomodelv54_v13_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	int unk;

    //int unkindex;
    //int unkindex1;
};

struct mstudiomodelv54_v14_t
{
	char name[64];

	int unkindex2; // byte before string block

    // these are probably still used but get written over the name if nothing is set.
    //int type;
	//float boundingradius;

    char name2[8]; // it looks like they write the entire name
                   // then write over it with other values where needed
                   // why.

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
	int tangentsindex; // tangents Vector

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

    // same as v53, except trimming the fat
	int unk[3]; // bruh

    //int unkindex;
    //int unkindex1;
};

// meshes
struct mstudiomeshv54_t
{
	int material;

	int modelindex;

	int numvertices; // number of unique vertices/normals/texcoords
	int vertexoffset; // vertex mstudiovertex_t

	// Access thin/fat mesh vertex data (only one will return a non-NULL result)
	
	int numflexes; // vertex animation
	int flexindex;


	// special codes for material operations
	int materialtype;
	int materialparam;

	// a unique ordinal for this mesh
	int meshid;

	Vector3 center;

	mstudio_meshvertexdata_t vertexdata;
    
	int unused[2];
};

struct mstudiomeshv54_v121_t
{
	int material;

	int modelindex;

	int numvertices; // number of unique vertices/normals/texcoords
	int unk; // relates to number of vertices
	
	// a unique ordinal for this mesh
	int meshid;

    Vector3 center;

	// a unique ordinal for this mesh
	//int meshid;

	mstudio_meshvertexdata_t vertexdata;
    
	int unused[2];
};


//=================
// Material Structs


// skin info
struct mstudiotexturev54_t
{
	int sznameindex;

	int64 guid;
};

// texture types, new in v54
enum <byte> MaterialShaderType_t
{
  RGDU = 0x0,
  RGDP = 0x1,
  RGDC = 0x2,
  SKNU = 0x3,
  SKNP = 0x4,
  SKNC = 0x5,
  WLDU = 0x6,
  WLDC = 0x7,
  PTCU = 0x8,
  PTCS = 0x9,
};


//====
// RUI


struct mstudioruivertmapv54_t
{
    // not sure of the order on these
    int16 vertid1;
    int16 vertid2;
    int16 vertid3;
};

struct mstudioruifourthvertv54_t
{
    // not sure of the order on these
    int16 vertid4;
};

struct mstudioruimeshv54_t
{
    int16 numparents; // apparently you can have meshes parented to more than one bone(?)
    int16 numvertices; // number of verts
    int16 numfaces; // number of faces (quads)

    int16 unk;

    int parentindex; // this gets padding out front of it to even off the struct

    int vertexindex; // offset into smd style vertex data
    int fourthvertmapindex; // they now fully map the vertices for each quad
    int vertmapindex; // offsets into a vertex map for each quad
    int facedataindex; // offset into uv section

    char szruimeshname[parentindex - 28]; // have to subtract header to get actual size (padding included)

    int16 parent[numparents]; // parent(s) bone of mesh

    mstudioruivertmapv54_t vertexmap[numfaces]; // vertex map for each face
    mstudioruifourthvertv54_t fourthvertmap[numfaces];
    mstudioruivert_t vertex[numvertices];

    mstudioruimesface_t facedata[numfaces];
};


//========
// Unknown

struct unkheaderv54
{
    int dataindex1;
    int dataindex2;
    int dataindex3;

    int numsection;
};

struct unksectionheaderv54
{
    int unk;

    int dataindex1;
    int dataindex2;
    int dataindex3;

    float unkfloat[3]; // unsure if this is a vector

    int unk1;
};

// v12
struct unksectionheaderv54_v12
{
    int unk;

    int dataindex1;
    int dataindex2;
    int dataindex3;

    int dataindex4; // new

    int unknew;

    float unkfloat[3]; // unsure if this is a vector

    int unk1;
};

struct unkheaderdatav54
{
    int unk[2];
    int unk1;
    int unk2;
};

// for sections near bone remap in 12.1 plus

// lod related maybe
struct unkindex3sect
{
    int unk[2];

    float unkfloat;

    int unk1;
};

struct unkindex2sect
{
    int unk[4];
};

struct unkindex1sect
{
    int unk[2];

    float unkfloat;

    int unk1[9];
};