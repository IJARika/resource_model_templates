//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rmdl, rrig
//   Authors: Rika
//   Version: 54
// Increment: 8/9/10/11(?)
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.rmdl, *.rrig
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../rmdl/rmdl_structs.bt"

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;


// headers
studiohdr_t_v54 hdr <bgcolor=cLtBlue, read=ReadString(startof(this) + this.sznameindex)>;


// funny strings that work the same always
#include "../mdl/mdl_v52_module_mayastrings.bt"


// global section here because it's unchanged from v8-v12, but required for two templates
#include "../rmdl/rmdl_v54_module_bonejiggleattach.bt"


// global hitbox for v54 since it doesn't change
#include "../rmdl/rmdl_v54_module_hitbox.bt"


FSeek(hdr.bonetablebynameindex);
ubyte bonebyname[hdr.numbones] <read=ReadString(startof(bones[this]) + bones[this].sznameindex), bgcolor=cDkGreen>;


// global sequences, unchanged across all v54 so far.
#include "../rmdl/rmdl_v54_module_sequences.bt"

// models
#include "../mdl/mdl_module_bodyparts.bt"


// v54 node
#include "../rmdl/rmdl_v54_module_nodes.bt"


FSeek(hdr.localposeparamindex);
mstudioposeparamdesc_t poseparm[hdr.numlocalposeparameters] <bgcolor=cYellow, read=ReadString(startof(this) + this.sznameindex)>;


// unchanged between subversions
#include "../rmdl/rmdl_v54_module_ikchain.bt"


// unchanged between subversions
#include "../mdl/mdl_v53_module_rui.bt"


// various includes, materials, and groups

// we no longer do include model because that's handled in the rpak header.

// I do an include file because these are the same across all v54 (for now),
// and I really don't wanna have to update every template every time I change something.
#include "../rmdl/rmdl_v54_module_textures.bt"


// do keyvalues, this remains unchanged in all models since it's just char data.
FSeek(hdr.keyvalueindex);
char keyvalues_char[hdr.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(hdr.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[hdr.numsrcbonetransform] <bgcolor=cDkGreen, read=ReadString(startof(this) + this.sznameindex)>;


// unchanged between subversions
#include "../rmdl/rmdl_v54_module_linearbone.bt"


// global string table setup, only changes for v14
#include "../rmdl/rmdl_v54_module_stringtable.bt"

void ParseNodeType(__int64 pNodeStart, __int64 pLeafStart, int nodeIndex, int nodeType)
{
    switch(nodeType)
    {
    case 0:
        CreateBVHNodes(pNodeStart, pLeafStart, nodeIndex);
        break;
    case 1:
        break;
    case 2:
        break;
    case 5:
    {
        FSeek(pLeafStart + (nodeIndex * 4));
        
        struct {
            CollPackedTriLeaf_t packedTri<bgcolor=cDkYellow>;
            CollTri_t tri[packedTri.highestTriIndex+1] <bgcolor=cLtYellow>;
        } packedTriLeaf;

        break;
    }
    default:
        FSeek(pLeafStart + (nodeIndex * 4));
        char bvh_leaf <fgcolor=0x5fff7c>;
        break;
    }

}

struct bvh_node_func_t(__int64 pNodeStart, __int64 pLeafStart, int nodeIndex)
{
    FSeek(pNodeStart + (sizeof(BVH4Node_t) * nodeIndex));
    BVH4Node_t bvh_node <fgcolor=0xa06397>;

    ParseNodeType(pNodeStart, pLeafStart, bvh_node.index0, bvh_node.child0_type);
    ParseNodeType(pNodeStart, pLeafStart, bvh_node.index1, bvh_node.child1_type);
    ParseNodeType(pNodeStart, pLeafStart, bvh_node.index2, bvh_node.child2_type);
    ParseNodeType(pNodeStart, pLeafStart, bvh_node.index3, bvh_node.child3_type);
};

void CreateBVHNodes(__int64 pNodeStart, __int64 pLeafStart, int nodeIndex)
{
    FSeek(pLeafStart); // "Invalid structure. Ending position was in front of starting position."
    //FSeek(pStart + (sizeof(BVH4Node_t) * nodeIndex));
    bvh_node_func_t node(pNodeStart, pLeafStart, nodeIndex);
}

if(hdr.bvh4index > 0)
{
    FSeek(hdr.bvh4index);
    mstudiocollmodel_t collmodel <bgcolor=cDkBlue>;

    for(i = 0; i < collmodel.headerCount; ++i)
    {
        FSeek(startof(collmodel) + sizeof(collmodel) + (i * sizeof(mstudiocollheader_t)));
        struct {
            mstudiocollheader_t collheader <bgcolor=cPurple>;

            FSeek(startof(collmodel) + collheader.vertIndex);
            char vertexData[collheader.bvhLeafIndex - collheader.vertIndex] <fgcolor=0xb083c7>;

            FSeek(startof(collmodel) + collheader.bvhNodeIndex);
            CreateBVHNodes(startof(collmodel) + collheader.bvhNodeIndex, startof(collmodel) + collheader.bvhLeafIndex, 0);
        } collHeaderData;
    };
    
    FSeek(startof(collmodel) + collmodel.surfacePropsIndex);
    char surfaceProperties[collmodel.contentMasksIndex - collmodel.surfacePropsIndex] <bgcolor=cLtYellow>;

    FSeek(startof(collmodel) + collmodel.contentMasksIndex);
    char contentMasks[collmodel.surfaceNamesIndex - collmodel.contentMasksIndex] <bgcolor=cLtRed>;
}


// unsure what this is for, same as v53
#include "../mdl/mdl_module_bone_followers.bt"


// related data chunks here

//unksectiondata unksectdata1[unkhdr.numsection] <bgcolor=cBlue>;