//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Valve, Rika, & Others
//   Version: 47/48/49/52/53
//   Purpose: Valve/Respawn MDL Structs
//  Category: Struct
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------

#define MAX_NUM_LODS 8
#define MAX_NUM_BONES_PER_VERT 3

//local int i = 0;

// these are just all structs that I have mostly working/fitting, it does not mean they are correct.
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//========
// Headers


struct mdlflags_t
{
    // This flag is set if no hitbox information was specified
    int STUDIOHDR_FLAGS_AUTOGENERATED_HITBOX : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_ENV_CUBEMAP : 1;
    
    // Use this when there are translucent parts to the model but we're not going to sort it 
    int STUDIOHDR_FLAGS_FORCE_OPAQUE : 1;
    
    // Use this when we want to render the opaque parts during the opaque pass
    // and the translucent parts during the translucent pass
    int STUDIOHDR_FLAGS_TRANSLUCENT_TWOPASS : 1;
    
    // This is set any time the .qc files has $staticprop in it
    // Means there's no bones and no transforms
    int STUDIOHDR_FLAGS_STATIC_PROP : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_FB_TEXTURE : 1;
    
    // This flag is set by studiomdl.exe if a separate "$shadowlod" entry was present
    //  for the .mdl (the shadow lod is the last entry in the lod list if present)
    int STUDIOHDR_FLAGS_HASSHADOWLOD : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_BUMPMAPPING : 1;
    
    // NOTE:  This flag is set when we should use the actual materials on the shadow LOD
    // instead of overriding them with the default one (necessary for translucent shadows)
    int STUDIOHDR_FLAGS_USE_SHADOWLOD_MATERIALS : 1;
    
    // NOTE:  This flag is set when we should use the actual materials on the shadow LOD
    // instead of overriding them with the default one (necessary for translucent shadows)
    int STUDIOHDR_FLAGS_OBSOLETE : 1;
    
    int STUDIOHDR_FLAGS_UNUSED : 1;
    
    // NOTE:  This flag is set at mdl build time
    int STUDIOHDR_FLAGS_NO_FORCED_FADE : 1;
    
    // NOTE:  The npc will lengthen the viseme check to always include two phonemes
    int STUDIOHDR_FLAGS_FORCE_PHONEME_CROSSFADE : 1;
    
    // This flag is set when the .qc has $constantdirectionallight in it
    // If set, we use constantdirectionallightdot to calculate light intensity
    // rather than the normal directional dot product
    // only valid if STUDIOHDR_FLAGS_STATIC_PROP is also set
    int STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT : 1;
    
    // Flag to mark delta flexes as already converted from disk format to memory format
    int STUDIOHDR_FLAGS_FLEXES_CONVERTED : 1;
    
    // Indicates the studiomdl was built in preview mode
    int STUDIOHDR_FLAGS_BUILT_IN_PREVIEW_MODE : 1;
    
    // Ambient boost (runtime flag)
    int STUDIOHDR_FLAGS_AMBIENT_BOOST : 1;
    
    // Don't cast shadows from this model (useful on first-person models)
    int STUDIOHDR_FLAGS_DO_NOT_CAST_SHADOWS : 1;
    
    // alpha textures should cast shadows in vrad on this model (ONLY prop_static!)
    int STUDIOHDR_FLAGS_CAST_TEXTURE_SHADOWS : 1;
    
    // Model has a quad-only Catmull-Clark SubD cage
    int STUDIOHDR_FLAGS_SUBDIVISION_SURFACE : 1;
    
    // flagged on load to indicate no animation events on this model
    int STUDIOHDR_FLAGS_NO_ANIM_EVENTS	 : 1;
    
    // If flag is set then studiohdr_t.flVertAnimFixedPointScale contains the
    // scale value for fixed point vert anim data, if not set then the
    // scale value is the default of 1.0 / 4096.0.  Regardless use
    // studiohdr_t::VertAnimFixedPointScale() to always retrieve the scale value
    int STUDIOHDR_FLAGS_VERT_ANIM_FIXED_POINT_SCALE : 1;

    // these are later V49 flags

    // If flag is set then model data is processed for EDGE
    // the flag is set at tool time when producing PS3-format assets
    int STUDIOHDR_FLAGS_PS3_EDGE_FORMAT : 1;
    
    // this is a specific case to indicate a model is over budget
    int STUDIOHDR_FLAGS_OVER_BUDGET : 1;
    
    // this is a specific case to indicate a model is over budget
    int STUDIOHDR_FLAGS_IGNORE_BUDGETS : 1;
    
    // internally generated combined model
    int STUDIOHDR_FLAGS_COMBINED : 1;
    
    // Model has an additional set of UVs
    int STUDIOHDR_FLAGS_EXTRA_VERTEX_DATA : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_BAKED_VERTEX_LIGHTING_IS_INDIRECT_ONLY : 1;

    int unused : 1;
    int unused1 : 1;
    int unused2 : 1;
    int unused3 : 1;
};

struct rmdlflags_t
{
    // This flag is set if no hitbox information was specified
    int STUDIOHDR_FLAGS_AUTOGENERATED_HITBOX : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_ENV_CUBEMAP : 1;
    
    // Use this when there are translucent parts to the model but we're not going to sort it 
    int STUDIOHDR_FLAGS_FORCE_OPAQUE : 1;
    
    // Use this when we want to render the opaque parts during the opaque pass
    // and the translucent parts during the translucent pass
    int STUDIOHDR_FLAGS_TRANSLUCENT_TWOPASS : 1;
    
    // This is set any time the .qc files has $staticprop in it
    // Means there's no bones and no transforms
    int STUDIOHDR_FLAGS_STATIC_PROP : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_FB_TEXTURE : 1;
    
    // This flag is set by studiomdl.exe if a separate "$shadowlod" entry was present
    //  for the .mdl (the shadow lod is the last entry in the lod list if present)
    int STUDIOHDR_FLAGS_HASSHADOWLOD : 1;
    
    // NOTE:  This flag is set at loadtime, not mdl build time so that we don't have to rebuild
    // models when we change materials.
    int STUDIOHDR_FLAGS_USES_BUMPMAPPING : 1;
    
    // NOTE:  This flag is set when we should use the actual materials on the shadow LOD
    // instead of overriding them with the default one (necessary for translucent shadows)
    int STUDIOHDR_FLAGS_USE_SHADOWLOD_MATERIALS : 1;
    
    // NOTE:  This flag is set when we should use the actual materials on the shadow LOD
    // instead of overriding them with the default one (necessary for translucent shadows)
    int STUDIOHDR_FLAGS_OBSOLETE : 1;
    
    int STUDIOHDR_FLAGS_UNUSED : 1;
    
    // NOTE:  This flag is set at mdl build time
    int STUDIOHDR_FLAGS_NO_FORCED_FADE : 1;
    
    // NOTE:  The npc will lengthen the viseme check to always include two phonemes
    int STUDIOHDR_FLAGS_FORCE_PHONEME_CROSSFADE : 1;
    
    // This flag is set when the .qc has $constantdirectionallight in it
    // If set, we use constantdirectionallightdot to calculate light intensity
    // rather than the normal directional dot product
    // only valid if STUDIOHDR_FLAGS_STATIC_PROP is also set
    int STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT : 1;
    
    // Flag to mark delta flexes as already converted from disk format to memory format
    int STUDIOHDR_FLAGS_FLEXES_CONVERTED : 1;
    
    // Indicates the studiomdl was built in preview mode
    int STUDIOHDR_FLAGS_BUILT_IN_PREVIEW_MODE : 1;
    
    // Ambient boost (runtime flag)
    int STUDIOHDR_FLAGS_AMBIENT_BOOST : 1;
    
    // Don't cast shadows from this model (useful on first-person models)
    int STUDIOHDR_FLAGS_DO_NOT_CAST_SHADOWS : 1;
    
    // alpha textures should cast shadows in vrad on this model (ONLY prop_static!)
    int STUDIOHDR_FLAGS_CAST_TEXTURE_SHADOWS : 1;
    
    // Model has a quad-only Catmull-Clark SubD cage
    int STUDIOHDR_FLAGS_SUBDIVISION_SURFACE : 1;
    
    // flagged on load to indicate no animation events on this model
    int STUDIOHDR_FLAGS_NO_ANIM_EVENTS	 : 1;
    
    // If flag is set then studiohdr_t.flVertAnimFixedPointScale contains the
    // scale value for fixed point vert anim data, if not set then the
    // scale value is the default of 1.0 / 4096.0.  Regardless use
    // studiohdr_t::VertAnimFixedPointScale() to always retrieve the scale value
    int STUDIOHDR_FLAGS_VERT_ANIM_FIXED_POINT_SCALE : 1;

    int unused : 1; // likely exists

    int unk : 1; // known used in v53, used a lot on props
    int unk1 : 1; // known used in v52 'envball.mdl'
    int unk2 : 1; // seen used in v54 'ptpov_doubletake.rmdl'

    int unused4 : 1;
    int unused5 : 1;
    int unused6 : 1;
    int unused7 : 1;
    int unused8 : 1;
    int unused9 : 1;
};

enum <int> contents_flags
{
    CONTENTS_EMPTY = 0x0, // nonsolid
    CONTENTS_SOLID = 0x1, // solid
    CONTENTS_GRATE = 0x8, // grate
    CONTENTS_MONSTER = 0x2000000, // monster
    CONTENTS_LADDER = 0x20000000 // ladder
};

string ReadContents(uint flags)
{
    string value = "";

    if(flags == 0)
        return "CONTENTS_EMPTY";

    int i = 0;
    int flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x1:
            value += "CONTENTS_SOLID";
            break;
        case 0x8:
            value += "CONTENTS_GRATE";
            break;
        case 0x2000000:
            value += "CONTENTS_MONSTER";
            break;
        case 0x20000000:
            value += "CONTENTS_LADDER";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}

struct studiohdr_t_v47
{
    int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
    int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
    int checksum; // This has to be the same in the phy and vtx files to load!
    char name[64]; // The internal name of the model, padding with null bytes.
                    // Typically "my_model.mdl" will have an internal name of "my_model"
    int length; // Data size of MDL file in bytes.
 
    Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
    mdlflags_t flags;
  
    int numbones; // bones
	int boneindex;
 
    int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
    int numhitboxsets;
	int hitboxsetindex;
 
    int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
    int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
    // raw textures
	int numtextures;
	int textureindex;
 
    /// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
    // replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
    int numlocalattachments;
	int localattachmentindex;
 
    int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    int numflexdesc;
	int flexdescindex;
 
    int numflexcontrollers;
	int flexcontrollerindex;
 
    int numflexrules;
	int flexruleindex;
 
    int numikchains;
	int ikchainindex;
	
    int nummouths;
	int mouthindex;
 
    int numlocalposeparameters;
	int localposeparamindex;
 
    int surfacepropindex <read=ReadString(this)>;
 
    int keyvalueindex;
	int keyvaluesize;
 
    int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
 
    float mass;
	int contents <read=ReadContents(this)>;
 
    // external animations, models, etc.
	int numincludemodels;
	int includemodelindex;
    
    uint32 virtualModel;
 
    int szanimblocknameindex <read=ReadString(this)>;	
	int numanimblocks;
	int animblockindex;
	uint32 animblockModel;

	int bonetablebynameindex;

    // used by tools only that don't cache, but persist mdl's peer data
	// engine uses virtualModel to back link to cache pointers
	uint32 pVertexBase;
	uint32 pIndexBase;
    
    // if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;
    
    int unused1[7];
};

// main headers
struct studiohdr_t_v48
{
    int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
    int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
    int checksum; // This has to be the same in the phy and vtx files to load!
    char name[64]; // The internal name of the model, padding with null bytes.
                    // Typically "my_model.mdl" will have an internal name of "my_model"
    int length; // Data size of MDL file in bytes.
 
    Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
    mdlflags_t flags;
  
    int numbones; // bones
	int boneindex;
 
    int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
    int numhitboxsets;
	int hitboxsetindex;
 
    int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
    int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
    // raw textures
	int numtextures;
	int textureindex;
 
    /// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
    // replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
    int numlocalattachments;
	int localattachmentindex;
 
    int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    int numflexdesc;
	int flexdescindex;
 
    int numflexcontrollers;
	int flexcontrollerindex;
 
    int numflexrules;
	int flexruleindex;
 
    int numikchains;
	int ikchainindex;
	
    int nummouths;
	int mouthindex;
 
    int numlocalposeparameters;
	int localposeparamindex;
 
    int surfacepropindex <read=ReadString(this)>;
 
    int keyvalueindex;
	int keyvaluesize;
 
    int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
 
    float mass;
	int contents <read=ReadContents(this)>;
 
    // external animations, models, etc.
	int numincludemodels;
	int includemodelindex;
    
    uint32 virtualModel;
 
    int szanimblocknameindex <read=ReadString(this)>;	
	int numanimblocks;
	int animblockindex;
	uint32 animblockModel;

	int bonetablebynameindex;
    
    // used by tools only that don't cache, but persist mdl's peer data
	// engine uses virtualModel to back link to cache pointers
	uint32 pVertexBase;
	uint32 pIndexBase;
    
    // if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;

	int unused4; // zero out if version < 47

	int numflexcontrollerui;
	int flexcontrolleruiindex;

    float flVertAnimFixedPointScale;
    int unused3; // this index must be cached by the loader, not saved in the file
                           // unused in v48 but it isn't worth making another struct over that.
    
	int studiohdr2index;
	
    // NOTE: No room to add stuff? Up the .mdl file format version 
	// [and move all fields in studiohdr2_t into studiohdr_t and kill studiohdr2_t],
	// or add your stuff to studiohdr2_t. See NumSrcBoneTransforms/SrcBoneTransform for the pattern to use.
	int unused2;
};

struct studiohdr_t_v49
{
    int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
    int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
    int checksum; // This has to be the same in the phy and vtx files to load!
    char name[64]; // The internal name of the model, padding with null bytes.
                    // Typically "my_model.mdl" will have an internal name of "my_model"
    int length; // Data size of MDL file in bytes.
 
    Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
    mdlflags_t flags;
  
    int numbones; // bones
	int boneindex;
 
    int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
    int numhitboxsets;
	int hitboxsetindex;
 
    int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
    int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
    // raw textures
	int numtextures;
	int textureindex;
 
    /// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
    // replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
    int numlocalattachments;
	int localattachmentindex;
 
    int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    int numflexdesc;
	int flexdescindex;
 
    int numflexcontrollers;
	int flexcontrollerindex;
 
    int numflexrules;
	int flexruleindex;
 
    int numikchains;
	int ikchainindex;
	
    int nummouths;
	int mouthindex;
 
    int numlocalposeparameters;
	int localposeparamindex;
 
    int surfacepropindex <read=ReadString(this)>;
 
    int keyvalueindex;
	int keyvaluesize;
 
    int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
 
    float mass;
	int contents <read=ReadContents(this)>;
 
    // external animations, models, etc.
	int numincludemodels;
	int includemodelindex;
    
    uint32 virtualModel;
 
    int szanimblocknameindex <read=ReadString(this)>;	
	int numanimblocks;
	int animblockindex;
	uint32 animblockModel;

	int bonetablebynameindex;
    
    // used by tools only that don't cache, but persist mdl's peer data
	// engine uses virtualModel to back link to cache pointers
	uint32 pVertexBase;
	uint32 pIndexBase;
    
    // if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;

	int unused4; // zero out if version < 47

	int numflexcontrollerui;
	int flexcontrolleruiindex;

    float flVertAnimFixedPointScale;
    int surfacepropLookup; // this index must be cached by the loader, not saved in the file
                           // unused in v48 but it isn't worth making another struct over that.
    
	int studiohdr2index;
	
    // NOTE: No room to add stuff? Up the .mdl file format version 
	// [and move all fields in studiohdr2_t into studiohdr_t and kill studiohdr2_t],
	// or add your stuff to studiohdr2_t. See NumSrcBoneTransforms/SrcBoneTransform for the pattern to use.
	int unused2;
};

struct studiohdr_t_v52
{
	int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
    int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
    int checksum; // This has to be the same in the phy and vtx files to load!
    char name[64]; // The internal name of the model, padding with null bytes.
                    // Typically "my_model.mdl" will have an internal name of "my_model"
    int length; // Data size of MDL file in bytes.
 
    Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
    rmdlflags_t flags;
  
    // highest observed: 250
    int numbones; // bones
	int boneindex;
 
    int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
    int numhitboxsets;
	int hitboxsetindex;
 
    int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
    int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
    // raw textures
	int numtextures;
	int textureindex;
 
    /// raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
    // replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
    int numlocalattachments;
	int localattachmentindex;
 
    int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    int numflexdesc;
	int flexdescindex;
 
    int numflexcontrollers;
	int flexcontrollerindex;
 
    int numflexrules;
	int flexruleindex;
 
    int numikchains;
	int ikchainindex;
	
    int nummouths;
	int mouthindex;
 
    int numlocalposeparameters;
	int localposeparamindex;
 
    int surfacepropindex <read=ReadString(this)>;
 
    int keyvalueindex;
	int keyvaluesize;
 
    int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
 
    float mass;
	int contents <read=ReadContents(this)>;
 
    // external animations, models, etc.
	int numincludemodels;
	int includemodelindex;
    
    uint32 virtualModel;

	int szanimblocknameindex <read=ReadString(this)>;	
	int numanimblocks;
	int animblockindex;
	uint32 animblockModel;

	int bonetablebynameindex;
    
    // used by tools only that don't cache, but persist mdl's peer data
	// engine uses virtualModel to back link to cache pointers
	uint32 pVertexBase;
	uint32 pIndexBase;
    
    // if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;

	float fadedistance;

	int numflexcontrollerui;
	int flexcontrolleruiindex;

    float flVertAnimFixedPointScale;
    int surfacepropLookup;	// this index must be cached by the loader, not saved in the file
    
	// NOTE: No room to add stuff? Up the .mdl file format version 
	// [and move all fields in studiohdr2_t into studiohdr_t and kill studiohdr2_t],
	// or add your stuff to studiohdr2_t. See NumSrcBoneTransforms/SrcBoneTransform for the pattern to use.
	int studiohdr2index;
	
	int mayaindex; // in v52 not every model has these strings, only four bytes when not present.
};

struct studiohdr_t_v53
{
    int id; // Model format ID, such as "IDST" (0x49 0x44 0x53 0x54)
    int version; // Format version number, such as 48 (0x30,0x00,0x00,0x00)
    int checksum; // This has to be the same in the phy and vtx files to load!
	int sznameindex <read=ReadString(startof(this) + this - 12)>; // This has been moved from studiohdr2 to the front of the main header.
    char name[64]; // The internal name of the model, padding with null bytes.
                    // Typically "my_model.mdl" will have an internal name of "my_model"
    int length; // Data size of MDL file in bytes.
 
    Vector3 eyeposition;	// ideal eye position

	Vector3 illumposition;	// illumination center
	
	Vector3 hull_min;		// ideal movement hull size
	Vector3 hull_max;			

	Vector3 view_bbmin;		// clipping bounding box
	Vector3 view_bbmax;		
 
    rmdlflags_t flags;
  
    // highest observed: 250
    // max is definitely 256 because 8bit uint limit
    int numbones; // bones
	int boneindex;
 
    int numbonecontrollers; // bone controllers
	int bonecontrollerindex;
 
    int numhitboxsets;
	int hitboxsetindex;
 
    int numlocalanim; // animations/poses
	int localanimindex; // animation descriptions
 
    int numlocalseq; // sequences
	int	localseqindex;
 
	int activitylistversion; // initialization flag - have the sequences been indexed?
	int eventsindexed;
 
    // mstudiotexture_t
    // short rpak path
	// raw textures
	int numtextures; // the material limit exceeds 128, probably 256.
	int textureindex;
 
    // this should always only be one, unless using vmts.
    // raw textures search paths
	int numcdtextures;
	int cdtextureindex;
 
    // replaceable textures tables
	int numskinref;
	int numskinfamilies;
	int skinindex;
 
	int numbodyparts;		
	int bodypartindex;
 
    int numlocalattachments;
	int localattachmentindex;
 
    int numlocalnodes;
	int localnodeindex;
	int localnodenameindex;
 
    int numflexdesc;
	int flexdescindex;
 
    int numflexcontrollers;
	int flexcontrollerindex;
 
    int numflexrules;
	int flexruleindex;
 
    int numikchains;
	int ikchainindex;

    int numruimeshes;
    int ruimeshindex;
 
    int numlocalposeparameters;
	int localposeparamindex;
 
    int surfacepropindex <read=ReadString(this)>;
 
    int keyvalueindex;
	int keyvaluesize;
 
    int numlocalikautoplaylocks;
	int localikautoplaylockindex;
 
    float mass;
	int contents <read=ReadContents(this)>;
 
    // external animations, models, etc.
	int numincludemodels;
	int includemodelindex;
    
    uint32 virtualModel;

    // animblock is either completely cut, this is because they no longer use .ani files.

	int bonetablebynameindex;
    
    // if STUDIOHDR_FLAGS_CONSTANT_DIRECTIONAL_LIGHT_DOT is set,
	// this value is used to calculate directional components of lighting 
	// on static props
	byte constdirectionallightdot;

	// set during load of mdl data to track *desired* lod configuration (not actual)
	// the *actual* clamped root lod is found in studiohwdata
	// this is stored here as a global store to ensure the staged loading matches the rendering
	byte rootLOD;
	
	// set in the mdl data to specify that lod configuration should only allow first numAllowRootLODs
	// to be set as root LOD:
	//	numAllowedRootLODs = 0	means no restriction, any lod can be set as root lod.
	//	numAllowedRootLODs = N	means that lod0 - lod(N-1) can be set as root lod, but not lodN or lower.
	byte numAllowedRootLODs;

	byte unused;

	float fadedistance; // set to -1 to never fade. set above 0 if you want it to fade out, distance is in feet.
                        // player/titan models seem to inherit this value from the first model loaded in menus.
                        // works oddly on entities, probably only meant for static props

	int numflexcontrollerui;
	int flexcontrolleruiindex;
    
    // used by tools only that don't cache, but persist mdl's peer data
	// engine uses virtualModel to back link to cache pointers
    // might not be correct
	uint32 pVertexBase; // float flVertAnimFixedPointScale;
	uint32 pIndexBase; // int surfacepropLookup;

    // this is in all shipped models, probably part of their asset bakery. it should be 0x2CC.
    // doesn't actually need to be written pretty sure, only four bytes when not present.
    // this is not completely true as some models simply have nothing, such as animation models.
	int mayaindex;

    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;
	
	int linearboneindex;

	int m_nBoneFlexDriverCount;
	int m_nBoneFlexDriverIndex;
    
    // for static props (and maybe others)
    // Precomputed Per-Triangle AABB data
    int aabbindex;
    int numaabb;
    int numaabb1;
    int numaabb2;

    // always "" or "Titan"
    int unkstringindex <read=ReadString(startof(mdlHeader) + mdlHeader.unkstringindex)>;

    // ANIs are no longer used and this is reflected in many structs
    // Start of interal file data
    int vtxindex; // VTX
	int vvdindex; // VVD / IDSV
    int vvcindex; // VVC / IDCV 
    int vphyindex; // VPHY / IVPS

    int vtxsize; // VTX
    int vvdsize; // VVD / IDSV
    int vvcsize; // VVC / IDCV 
    int vphysize; // VPHY / IVPS

    // this data block is related to the vphy, if it's not present the data will not be written
    // definitely related to phy, apex phy has this merged into it
    int unkmemberindex1; // section between vphy and vtx.?
    int numunkmember1; // only seems to be used when phy has one solid

    int unk; // might be count for index below

    int unkindex3; // goes to the same spot as vtx normally.

    int unused1[60];

};

// sub header
// v48/49 are the same
struct studiohdr2_t
{
	// NOTE: For forward compat, make sure any methods in this struct
	// are also available in studiohdr_t so no leaf code ever directly references
	// a studiohdr2_t structure
	int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	float flMaxEyeDeflection; // default to cos(30) if not set
	
	int linearboneindex;

	int sznameindex <read=ReadString(startof(this) + this - 20)>;

	int m_nBoneFlexDriverCount;
	int m_nBoneFlexDriverIndex;

	int reserved[56];
};

struct studiohdr2_t_v52
{
    int numsrcbonetransform;
	int srcbonetransformindex;

	int	illumpositionattachmentindex;

	float flMaxEyeDeflection; // default to cos(30) if not set
	
	int linearboneindex;

	int sznameindex <read=ReadString(startof(this) + this - 20)>;

	int m_nBoneFlexDriverCount;
	int m_nBoneFlexDriverIndex;
    
    // for static props (and maybe others)
    // Precomputed Per-Triangle AABB data
    int aabbindex;
    int numaabb;
    int numaabb1;
    int numaabb2;

    // always "" or "Titan"
    int unkstringindex <read=ReadString(startof(mdlSubHeader) + mdlSubHeader.unkstringindex)>;

	int reserved[39];
};


//=============
// Bone Structs


// bones
enum boneprocflags
{
    STUDIO_PROC_AXISINTERP = 1,
    STUDIO_PROC_QUATINTERP = 2,
    STUDIO_PROC_AIMATBONE = 3,
    STUDIO_PROC_AIMATATTACH = 4,
    STUDIO_PROC_JIGGLE = 5,
    STUDIO_PROC_TWIST_MASTER = 6,
    STUDIO_PROC_TWIST_SLAVE = 7
};

// for poseToBone:

// postion is where the origin is relative to this bone, so any transforms are a. inverted, and b. additive of any parents.
// or just the distance/directions/transformation needed to travel to place it at the origin

// the quaternion's rotation matrix is mapped assuming the provide image is the layout:
// https://wikimedia.org/api/rest_v1/media/math/render/svg/2036e2c76a8e1c3638fbec4e148d0a9034d1a453

//   c0     c1     c2        c3
// a m00; d m01; g m02; posX m03; // r0
// b m10; e m11; h m12; PosY m13; // r1
// c m20; f m21; i m22; posZ m23; // r2

// works good enough but might not be good for edge cases with unparented bones.
int ReadParentBone(int bone)
{
    int realbone = 0;

    if(bone < 0)
        realbone = 0;
    else
        realbone = bone;

    return realbone;
}

struct mstudiobone_t_v47
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int parent <read=ReadString(startof(bones[ReadParentBone(this)]) + bones[ReadParentBone(this)].sznameindex)>; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation

	// compression scale
	Vector3 posscale; // scale muliplier for bone position in animations
	Vector3 rotscale; // scale muliplier for bone rotation in animations

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	boneprocflags proctype;
    int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone
	
    int surfacepropidx <read=ReadString(startof(this) + this - 176)>; // index into string tablefor property name

	int contents <read=ReadContents(this)>; // See BSPFlags.h for the contents flags

	int unused[8]; // remove as appropriate
};

struct mstudiobone_t_v49
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int parent <read=ReadString(startof(bones[ReadParentBone(this)]) + bones[ReadParentBone(this)].sznameindex)>; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation

	// compression scale
	Vector3 posscale; // scale muliplier for bone position in animations
	Vector3 rotscale; // scale muliplier for bone rotation in animations

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	boneprocflags proctype;
    int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone

    int surfacepropidx <read=ReadString(startof(this) + this - 176)>; // index into string tablefor property name
	
	int contents <read=ReadContents(this)>; // See BSPFlags.h for the contents flags
	
	int surfacepropLookup; // this index must be cached by the loader, not saved in the file
	
	int unused[7]; // remove as appropriate
};

struct mstudiobone_t_v52
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int parent <read=ReadString(startof(bones[ReadParentBone(this)]) + bones[ReadParentBone(this)].sznameindex)>; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation
	
	// compression scale
	Vector3 posscale; // scale muliplier for bone position in animations
	Vector3 rotscale; // scale muliplier for bone rotation in animations

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	boneprocflags proctype;
    int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone

    int surfacepropidx <read=ReadString(startof(this) + this - 176)>; // index into string tablefor property name
	
	int contents <read=ReadContents(this)>; // See BSPFlags.h for the contents flags
	
	int surfacepropLookup; // this index must be cached by the loader, not saved in the file
	
	Vector3 unkvector;	
	Vector3 unkvector1;
	
	int unused[1]; // remove as appropriate
};

struct mstudiobone_t_v53
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int parent <read=ReadString(startof(bones[ReadParentBone(this)]) + bones[ReadParentBone(this)].sznameindex)>; // parent bone
	int bonecontroller[6]; // bone controller index, -1 == none

	// default values
	Vector3 pos; // base bone position
	Quaternion quat;
	RadianEuler rot; // base bone rotation
	
	Vector3 unkvector; // scale, porter named this though so like yea.
                       // pretty sure this is related to the new data type in mstudioanim
	
	// compression scale
	Vector3 posscale; // scale muliplier for bone position in animations
                      // posscale in v53 is not used as the scale is stored in the animation bone headers.
	Vector3 rotscale; // scale muliplier for bone rotation in animations

	Vector3 unkvector1; // compression scale for scale

	matrix3x4_t poseToBone;
	Quaternion qAlignment;

    int flags;
	boneprocflags proctype;
    int procindex; // procedural rule offset
	int physicsbone; // index into physically simulated bone

    int surfacepropidx <read=ReadString(startof(this) + this - 200)>; // index into string tablefor property name
	
	int contents <read=ReadContents(this)>; // See BSPFlags.h for the contents flags
	
	int surfacepropLookup; // this index must be cached by the loader, not saved in the file
	
    // these two are related
	int16 unkid; // id is for unk section after phy
    int16 unktoggle; // gets set to '1' when id is not -1
	
	int unused[7]; // remove as appropriate
};

struct jiggleboneflags_t
{
	int JIGGLE_IS_FLEXIBLE : 1;
	int JIGGLE_IS_RIGID : 1;
	int JIGGLE_HAS_YAW_CONSTRAINT : 1;
	int JIGGLE_HAS_PITCH_CONSTRAINT : 1;
	int JIGGLE_HAS_ANGLE_CONSTRAINT : 1;
	int JIGGLE_HAS_LENGTH_CONSTRAINT : 1;
	int JIGGLE_HAS_BASE_SPRING : 1;
    int unused : 25;
};

// jigglebone
struct mstudiojigglebone_t
{
	jiggleboneflags_t flags;

	// general params
	float length; // how far from bone base, along bone, is tip
	float tipMass;

	// flexible params
	float yawStiffness;
	float yawDamping;	
	float pitchStiffness;
	float pitchDamping;	
	float alongStiffness;
	float alongDamping;	

	// angle constraint
	float angleLimit; // maximum deflection of tip in radians
	
	// yaw constraint
	float minYaw; // in radians
	float maxYaw; // in radians
	float yawFriction;
	float yawBounce;
	
	// pitch constraint
	float minPitch; // in radians
	float maxPitch; // in radians
	float pitchFriction;
	float pitchBounce;

	// base spring
	float baseMass;
	float baseStiffness;
	float baseDamping;	
	float baseMinLeft;
	float baseMaxLeft;
	float baseLeftFriction;
	float baseMinUp;
	float baseMaxUp;
	float baseUpFriction;
	float baseMinForward;
	float baseMaxForward;
	float baseForwardFriction;
};

// flexdriver
struct mstudioboneflexdriver_t
{
	int m_nBoneIndex;			// Bone to drive flex controller
	int m_nControlCount;		// Number of flex controllers being driven
	int m_nControlIndex;		// Index into data where controllers are (relative to this)

	int unused[3];
};

// attachments
struct mstudioattachment_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;
	int flags;

	int localbone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>; // parent bone

	matrix3x4_t localmatrix; // attachment point

    //    c0         c1         c2       c3
    //float m00 float m01 float m02 posX m03 // r0
    //float m10 float m11 float m12 posY m13 // r1
    //float m20 float m21 float m22 PosZ m23 // r2

	int	unused[8];
};

// bone id in alphabetical order
struct mstudiobonenametable_t
{
    for(i = 0; i < mdlHeader.numbones; i++)
        ubyte bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;
};

// ikchain
struct mstudioikchain_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int linktype;
	int numlinks;
	int linkindex;
};

struct mstudioikchainv53_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int linktype;
	int numlinks;
	int linkindex;
    
    float unk; // no clue what this does tbh, tweaking it does nothing
               // default value: 0.707f
    
    int unused[3]; // these get cut in apex so I can't imagine this is used
};

// ikinfo
struct mstudioiklink_t
{
	int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;
	Vector3	kneeDir; // ideal bending direction (per link, if applicable), unknown in v53
	Vector3	unused0; // unused in v49
};

// iklock
struct mstudioiklock_t
{
	int chain;
	float flPosWeight;
	float flLocalQWeight;
	int flags;

	int unused[4];
};

// pose parameter desc
struct mstudioposeparamdesc_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int flags; // ????
	float start; // starting value
	float end; // ending value
	float loop;	// looping range, 0 for no looping, 360 for rotations, etc.
};

// source bone transform
struct mstudiosrcbonetransform_t
{
	int sznameindex;

	matrix3x4_t	pretransform;	
	matrix3x4_t	posttransform;	
};

// linear bone
struct mstudiolinearbone_t	
{
	int numbones;

	int flagsindex;

	int	parentindex;
	
	int	posindex;
	
	int quatindex;
	
	int rotindex;
	
	int posetoboneindex;
	
	int	posscaleindex;
	
	int	rotscaleindex;
	
	int	qalignmentindex;
	
	int unused[6];
};


//===============
// Hitbox Structs


// hboxset
struct mstudiohitboxset_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int numhitboxes;
	int hitboxindex;
};

enum <int> hboxgroup
{
    Generic = 0,
    Head = 1,
    Chest = 2,
    Stomach = 3,
    Left_Arm = 4,
    Right_Arm = 5,
    Left_Leg = 6,
    Right_Leg = 7,
    Neck = 8
};

// hit box boxes
struct mstudiobbox_t
{
	int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;
	hboxgroup group; // intersection group

	Vector3 bbmin; // bounding box
	Vector3 bbmax;	

	int szhitboxnameindex <read=ReadString(startof(this) + this - 32)>; // offset to the name of the hitbox.
	
	int unused[8];
};

struct mstudiobbox_t_v53
{
	int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;
	hboxgroup group; // intersection group

	Vector3 bbmin; // bounding box
	Vector3 bbmax;	

	int szhitboxnameindex <read=ReadString(startof(this) + this - 32)>; // offset to the name of the hitbox.
    
    int critoverride; // overrides the group to be a crit, 0 or 1. might be group override since group 1 is head.
    int keyvalueindex <read=ReadString(startof(this) + this - 40)>; // indexes into a kv group if used, mostly for titans.

	int unused[6];
};


//==================
// Animation Structs


// sequence and autolayer flags
#define STUDIO_LOOPING	0x0001		// ending frame should be the same as the starting frame
#define STUDIO_SNAP		0x0002		// do not interpolate between previous animation and this one
#define STUDIO_DELTA	0x0004		// this sequence "adds" to the base sequences, not slerp blends
#define STUDIO_AUTOPLAY	0x0008		// temporary flag that forces the sequence to always play
#define STUDIO_POST		0x0010		// 
#define STUDIO_ALLZEROS	0x0020		// this animation/sequence has no real animation data
#define STUDIO_FRAMEANIM 0x0040		// animation is encoded as by frame x bone instead of RLE bone x frame
#define STUDIO_CYCLEPOSE 0x0080		// cycle index is taken from a pose parameter index
#define STUDIO_REALTIME	0x0100		// cycle index is taken from a real-time clock, not the animations cycle index
#define STUDIO_LOCAL	0x0200		// sequence has a local context sequence
#define STUDIO_HIDDEN	0x0400		// don't show in default selection views
#define STUDIO_OVERRIDE	0x0800		// a forward declared sequence (empty)
#define STUDIO_ACTIVITY	0x1000		// Has been updated at runtime to activity index
#define STUDIO_EVENT	0x2000		// Has been updated at runtime to event index on server
#define STUDIO_WORLD	0x4000		// sequence blends in worldspace
#define STUDIO_NOFORCELOOP 0x8000	// do not force the animation loop
#define STUDIO_EVENT_CLIENT 0x10000	// Has been updated at runtime to event index on client

// v54 flags
#define STUDIO_ANIMDESC_54_UNK 0x20000
#define STUDIO_ANIMDESC_54_UNK1 0x40000

string ReadAnimDescFlags(int flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    int flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x1:
            value += "STUDIO_LOOPING";
            break;
        case 0x2:
            value += "STUDIO_SNAP";
            break;
        case 0x4:
            value += "STUDIO_DELTA";
            break;
        case 0x8:
            value += "STUDIO_AUTOPLAY";
            break;
        case 0x10:
            value += "STUDIO_POST";
            break;
        case 0x20:
            value += "STUDIO_ALLZEROS";
            break;
        case 0x40:
            value += "STUDIO_FRAMEANIM";
            break;
        case 0x80:
            value += "STUDIO_CYCLEPOSE";
            break;
        case 0x100:
            value += "STUDIO_REALTIME";
            break;
        case 0x200:
            value += "STUDIO_LOCAL";
            break;
        case 0x400:
            value += "STUDIO_HIDDEN";
            break;
        case 0x800:
            value += "STUDIO_OVERRIDE";
            break;
        case 0x1000:
            value += "STUDIO_ACTIVITY";
            break;
        case 0x2000:
            value += "STUDIO_EVENT";
            break;
        case 0x4000:
            value += "STUDIO_WORLD";
            break;
        case 0x8000:
            value += "STUDIO_NOFORCELOOP";
            break;
        case 0x10000:
            value += "STUDIO_EVENT_CLIENT";
            break;
        case 0x20000:
            value += "STUDIO_ANIMDESC_54_UNK";
            break;
        case 0x40000:
            value += "STUDIO_ANIMDESC_54_UNK1";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}

// animdesc, what.
struct mstudioanimdesc_t_v48
{
	int baseptr;

	int sznameindex <read=ReadString(startof(this) + this - 4)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int	nummovements;
	int movementindex;

	int unused1[6]; // remove as appropriate (and zero if loading older versions)	

	int animblock;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl
	int animblockikruleindex; // non-zero when IK data is stored in animblock file

	int numlocalhierarchy;
	int localhierarchyindex;;

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used

	short zeroframespan; // frames per span
	short zeroframecount; // number of spans
	int zeroframeindex;

	float zeroframestalltime; // saved during read stalls

};

struct mstudioanimdesc_t_v49
{
	int baseptr;

	int sznameindex <read=ReadString(startof(this) + this - 4)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int	nummovements;
	int movementindex;

    int ikrulezeroframeindex;

	int unused1[5]; // remove as appropriate (and zero if loading older versions)	

	int animblock;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl
	int animblockikruleindex; // non-zero when IK data is stored in animblock file

	int numlocalhierarchy;
	int localhierarchyindex;;

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used

	short zeroframespan; // frames per span
	short zeroframecount; // number of spans
	int zeroframeindex;

	float zeroframestalltime; // saved during read stalls
};

struct mstudioanimdesc_t_v52
{
	int baseptr;

	int sznameindex <read=ReadString(startof(this) + this - 4)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int	nummovements;
	int movementindex;

    int ikrulezeroframeindex;

    int compressedikerrorindex;

	int unused1[4]; // remove as appropriate (and zero if loading older versions)	

	int animblock;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl
	int animblockikruleindex; // non-zero when IK data is stored in animblock file

	int numlocalhierarchy;
	int localhierarchyindex;;

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used

	short zeroframespan; // frames per span
	short zeroframecount; // number of spans
	int zeroframeindex;

	float zeroframestalltime; // saved during read stalls
};

//typedef int offset <read=Str("%d  =>  %d", this, this - parentof(this).baseptr)>;
struct mstudioanimdesc_t_v53
{
	int baseptr;

	int sznameindex <read=ReadString(startof(this) + this - 4)>;

	float fps; // frames per second	
	int flags <read=ReadAnimDescFlags(this)>; // looping/non-looping flags

	int numframes;

	// piecewise movement
	int nummovements;
	int movementindex;

	int compressedikerrorindex;
	int animindex; // non-zero when anim data isn't in sections

	int numikrules;
	int ikruleindex; // non-zero when IK data is stored in the mdl

	int numlocalhierarchy;
	int localhierarchyindex;

	int sectionindex;
	int sectionframes; // number of frames used in each fast lookup section, zero if not used

    // these all get cut in apex which means this is 99% unused, it would also grow the unused section back to 8 ints which further adds proof.
	//short zeroframespan; // frames per span
	//short zeroframecount; // number of spans
	//int zeroframeindex;
    //float zeroframestalltime; // saved during read stalls

    int unused[8];
};

struct mstudioanimsections_t
{
	int animblock;
	int animindex;
};

struct mstudioanimsections_t_53
{
	int animindex;
};

struct sectionindexes_t
{
    mstudioanimsections_t sectionoffsets[(animdesc[i].numframes / animdesc[i].sectionframes) + 2] <bgcolor=cLtBlue>;
};

struct sectionindexes_t_53
{
    mstudioanimsections_t_53 sectionoffsets[(animdesc[i].numframes / animdesc[i].sectionframes) + 2] <bgcolor=cLtBlue>;
};

// v48/49/52 flags
// v52 might've added flags for scale
#define STUDIO_ANIM_RAWPOS	0x01 // Vector48
#define STUDIO_ANIM_RAWROT	0x02 // Quaternion48
#define STUDIO_ANIM_ANIMPOS	0x04 // mstudioanim_valueptr_t
#define STUDIO_ANIM_ANIMROT	0x08 // mstudioanim_valueptr_t
#define STUDIO_ANIM_DELTA	0x10
#define STUDIO_ANIM_RAWROT2	0x20 // Quaternion64

// v53 flags
#define STUDIO_ANIM_DELTA_53    0x01 // this appears to be delta until proven otherwise
// These work as toggles, flag enabled is raw data, flag disabled is pointers, see 'STUDIO_ANIM_READBONE_53' for exception.
#define STUDIO_ANIM_RAWPOS_53	0x02 // Vector48
#define STUDIO_ANIM_RAWROT_53	0x04 // Quaternion48
#define STUDIO_ANIM_RAWSCALE_53	0x08 // Vector48
// if above flag is disabled and below is enabled there is special exceptions
// I don't actually think this is correct, as the issue I thought this flag solved was related to position, not rotation,
// which this flag seems to relate to.
// only appears in model that have raw rotation data disabled and when the pointer has no values
#define STUDIO_ANIM_UNK_53 0x10 // read bone data if any of the above are disabled, only observed for rotation

string ReadAnimFlags(byte flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    byte flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x1:
            value += "STUDIO_ANIM_RAWPOS";
            break;
        case 0x2:
            value += "STUDIO_ANIM_RAWROT";
            break;
        case 0x4:
            value += "STUDIO_ANIM_ANIMPOS";
            break;
        case 0x8:
            value += "STUDIO_ANIM_ANIMROT";
            break;
        case 0x10:
            value += "STUDIO_ANIM_DELTA";
            break;
        case 0x20:
            value += "STUDIO_ANIM_RAWROT2";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}

string ReadAnimFlagsV53(byte flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    byte flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 8; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x1:
            value += "STUDIO_ANIM_DELTA_53";
            break;
        case 0x2:
            value += "STUDIO_ANIM_RAWPOS_53";
            break;
        case 0x4:
            value += "STUDIO_ANIM_RAWROT_53";
            break;
        case 0x8:
            value += "STUDIO_ANIM_RAWSCALE_53";
            break;
        case 0x10:
            value += "STUDIO_ANIM_UNK_53";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}

struct mstudioanim_valueptr_t
{
    int16 offset[3];
};

// 'mstudioanim_t' in 48
struct mstudio_rle_anim_t
{
	ubyte bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>; // alien swarm/csgo says this is a signed int but that doesn't work well for our purposes.
	byte flags <read=ReadAnimFlags(this)>; // weighing options

    int16 nextoffset;

    if(flags & STUDIO_ANIM_ANIMROT)
        mstudioanim_valueptr_t animrot; // pRotV

	if(flags & STUDIO_ANIM_ANIMPOS)
	    mstudioanim_valueptr_t animpos; // pPosV

	if(flags & STUDIO_ANIM_RAWROT)
	    Quat48 rawrot; // pQuat48

	if(flags & STUDIO_ANIM_RAWROT2)
	    Quat64 rawrot2; // pQuat64

	if (flags & STUDIO_ANIM_RAWPOS)
	    Vector48 rawpos; // pPos
};

// same as above but the struct is always the same size
struct mstudio_rle_anim_t_v53
{
	float posscale; // does what posscale is used for

	ubyte bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>; // unsigned byte, bone limit exceeds 128 so has to be. also means max bones is 255.
	byte flags <read=ReadAnimFlagsV53(this)>;

	int16 unk; // normally null data
	
    if(flags & STUDIO_ANIM_RAWROT_53)
	    Quat64 rawrot; // pQuat64
    else
    {
        mstudioanim_valueptr_t animrot; // pRotV
        int16 unused; // pretty sure
    }

	if (flags & STUDIO_ANIM_RAWPOS_53)
	    Vector48 rawpos; // pPos
    else
        mstudioanim_valueptr_t animpos; // pPosV

    // named by porter
    if (flags & STUDIO_ANIM_RAWSCALE_53)
	    Vector48 rawscale; // new in v53
    else
        mstudioanim_valueptr_t animscale;

	int nextoffset;
};

// ik rule
enum ikruletype
{
    IK_SELF = 1,
    IK_WORLD = 2,
    IK_GROUND = 3,
    IK_RELEASE = 4,
    IK_ATTACHMENT = 5,
    IK_UNLATCH = 6
};

struct mstudioikrule_t
{
	int index;

	ikruletype type;
	int chain;

	int	bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;

	int slot;	// iktarget slot.  Usually same as chain.
	float height;
	float radius;
	float floor;
	Vector3 pos;
	Quaternion q;

	int compressedikerrorindex;
	
    int unused2;

	int iStart;
	int ikerrorindex;

	float start;	// beginning of influence
	float peak;	// start of full influence
	float tail;	// end of full influence
	float end;	// end of all influence

	float unused3;	// 
	float contact;	// frame footstep makes ground concact
	float drop;		// how far down the foot should drop when reaching for IK
	float top;		// top of the foot box

	int unused6;
	int unused7;
	int unused8;

	int szattachmentindex;		// name of world attachment

	int unused[7];
};


struct mstudioikrule_t_v53
{
    int index;
    ikruletype type;
    int chain;
    int bone <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>;

    int slot; // iktarget slot. Usually same as chain.
    float height;
    float radius;
    float floor;
    Vector3 pos;
    Quaternion q;

    int compressedikerrorindex;

    int iStart;
    int ikerrorindex;

    float start; // beginning of influence
    float peak; // start of full influence
    float tail; // end of full influence
    float end; // end of all influence

    float contact; // frame footstep makes ground concact
    float drop; // how far down the foot should drop when reaching for IK
    float top; // top of the foot box

    int szattachmentindex; // name of world attachment

    int unk; // there is an int here in apex and 9 unused doesn't make sense.

    int unused[8];
};

struct mstudiocompressedikerror_t
{
	float scale[6]; // these values are the same as what posscale (if it was used) and rotscale are.
	int16 offset[6];
};

struct mstudiocompressedikerror_t_v52
{
	float scale[4]; // first three values are the same as what posscale (if it was used) is, fourth is similar to unkvector1.
	int16 offset[4];
};

struct mstudioikerror_t
{
	Vector3 pos;
	Quaternion q;
};

struct mstudioikrulezeroframe_t
{
	int16		chain;
	int16		slot;
	hfloat		start;	// beginning of influence
	hfloat		peak;	// start of full influence
	hfloat		tail;	// end of full influence
	hfloat		end;	// end of all influence
};

// sequence descriptions
struct mstudioseqdescv48_t
{
	int baseptr;

	int	szlabelindex <read=ReadString(startof(this) + this - 4)>;

	int szactivitynameindex <read=ReadString(startof(this) + this - 8)>;

	int flags; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;
	
	Vector3 bbmin; // per sequence bounding box
	Vector3 bbmax;		

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait
	
	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int	keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

	int unused[7];
};

struct mstudioseqdescv49_t
{
	int baseptr;

	int	szlabelindex <read=ReadString(startof(this) + this - 4)>;

	int szactivitynameindex <read=ReadString(startof(this) + this - 8)>;

	int flags; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;
	
	Vector3 bbmin; // per sequence bounding box
	Vector3 bbmax;		

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait
	
	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int	keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

    int activitymodifierindex;
	int numactivitymodifiers;

	int unused[5];
};

struct mstudioseqdesc_t_v53
{
	int baseptr;

	int	szlabelindex <read=ReadString(startof(this) + this - 4)>;

	int szactivitynameindex <read=ReadString(startof(this) + this - 8)>;

	int flags; // looping/non-looping flags

	int activity; // initialized at loadtime to game DLL values
	int actweight;

	int numevents;
	int eventindex;
	
	Vector3 bbmin; // per sequence bounding box
	Vector3 bbmax;		

	int numblends;

	// Index into array of shorts which is groupsize[0] x groupsize[1] in length
	int animindexindex;

	int movementindex; // [blend] float array for blended movement
	int groupsize[2];
	int paramindex[2]; // X, Y, Z, XR, YR, ZR
	float paramstart[2]; // local (0..1) starting value
	float paramend[2]; // local (0..1) ending value
	int paramparent;

	float fadeintime; // ideal cross fate in time (0.2 default)
	float fadeouttime; // ideal cross fade out time (0.2 default)

	int localentrynode; // transition node at entry
	int localexitnode; // transition node at exit
	int nodeflags; // transition rules

	float entryphase; // used to match entry gait
	float exitphase; // used to match exit gait
	
	float lastframe; // frame that should generation EndOfSequence

	int nextseq; // auto advancing sequences
	int pose; // index of delta animation between end and nextseq

	int numikrules;

	int numautolayers;
	int autolayerindex;

	int weightlistindex;

	int posekeyindex;

	int numiklocks;
	int iklockindex;

	// Key values
	int keyvalueindex;
	int keyvaluesize;

	int cycleposeindex; // index of pose parameter to use as cycle index

    int activitymodifierindex;
	int numactivitymodifiers;

    // likely two unks here because you're supposed to grow back to 8 ints and not 10

	int unused[10]; // some might be used or they might've just been reseting space like on bones.
};

struct posekey_t
{
    float unk[seqdesc[i].groupsize[0] + seqdesc[i].groupsize[1]];
};

enum eventtype
{
    NEW_EVENT_STYLE = ( 1 << 10 ),
};

struct mstudioevent_t
{
	float cycle;
	int	event;
	eventtype type; // this will be 0 if old style I'd imagine
	char options[64];

	int szeventindex <read=ReadString(startof(this) + this - 76)>;
};

// autolayer flags
//							0x0001
//							0x0002
//							0x0004
//							0x0008
#define STUDIO_AL_POST		0x0010		// 
//							0x0020
#define STUDIO_AL_SPLINE	0x0040		// convert layer ramp in/out curve is a spline instead of linear
#define STUDIO_AL_XFADE		0x0080		// pre-bias the ramp curve to compense for a non-1 weight, assuming a second layer is also going to accumulate
//							0x0100
#define STUDIO_AL_NOBLEND	0x0200		// animation always blends at 1.0 (ignores weight)
//							0x0400
//							0x0800
#define STUDIO_AL_LOCAL		0x1000		// layer is a local context sequence
//							0x2000
#define STUDIO_AL_POSE		0x4000		// layer blends using a pose parameter instead of parent cycle
#define STUDIO_AL_UNK_53	0x8000		// added in v53 (probably)
                                        // I love this game I love this game I love this game I love this game I love this game I love this game

string ReadAutoLayerFlags(int flags)
{
    string value = "";

    if(flags == 0)
        return "NONE";

    int i = 0;
    int flag = 0;

    int flagsFound = 0;

    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        if(flag != 0)
        {
            flagsFound++;
        }
    }

    int flagCounter = 0;
    for(i = 0; i < 32; i++)
    {
        flag = flags & (1 << i);

        switch(flag)
        {
        case 0:
            break;
        case 0x10:
            value += "STUDIO_AL_POST";
            break;
        case 0x40:
            value += "STUDIO_AL_SPLINE";
            break;
        case 0x80:
            value += "STUDIO_AL_XFADE";
            break;
        case 0x200:
            value += "STUDIO_AL_NOBLEND";
            break;
        case 0x1000:
            value += "STUDIO_AL_LOCAL";
            break;
        case 0x4000:
            value += "STUDIO_AL_POSE";
            break;
        case 0x8000:
            value += "STUDIO_AL_UNK_53";
            break;
        default:
            value += Str("UNK_%x", flag);
            break;
        }

        if(flag != 0)
        {
            flagCounter++;
            if(flagCounter < flagsFound)
            {
                value += " | ";
            }
        }
    }

    return value;
}


struct mstudioautolayer_t
{
	short iSequence;
	short iPose;

	int flags <read=ReadAutoLayerFlags(this)>;
	float start;	// beginning of influence
	float peak;	// start of full influence
	float tail;	// end of full influence
	float end;	// end of all influence
};

struct mstudioactivitymodifier_t
{	
	int sznameindex <read=ReadString(startof(this) + this)>;
};

struct mstudioactivitymodifier_t_v53
{	
	int sznameindex <read=ReadString(startof(this) + this)>;

    boolean unk; // 0 or 1 observed.
};

struct seqweightlist_t
{
    float boneweight[mdlHeader.numbones];
};

struct blendgroup_t
{
    int16 blends[seqdesc[i].groupsize[0] * seqdesc[i].groupsize[1]];
};

// demand loaded sequence groups
struct mstudiomodelgroup_t
{
	int szlabelindex; // textual name
	int sznameindex <read=ReadString(startof(this) + this - 4)>; // file name
};


//===================
// Model/Mesh Structs


// body part index
struct mstudiobodyparts_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;
	int nummodels;
	int base;
	int modelindex; // index into models array
};

// studio models
struct mstudiomodel_t
{
	char name[64];

	int type;

	float boundingradius;

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
                     // offset by vertexindex number of bytes into vvd verts
	int tangentsindex; // tangents Vector
                       // offset by tangentsindex number of bytes into vvd tangents

	// Access thin/fat mesh vertex data (only one will return a non-NULL result)

	int numattachments;
	int attachmentindex;

	int	numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;
    
    // sections of this are removed as needed.
	int unused[10]; // remove as appropriate
                    // first two get used in v47
};

struct mstudiomodel_t_v52
{
	char name[64];

	int type;

	float boundingradius;

	int nummeshes;	
	int meshindex;

	// cache purposes
	int numvertices; // number of unique vertices/normals/texcoords
	int vertexindex; // vertex Vector
                     // offset by vertexindex number of bytes into vvd verts
	int tangentsindex; // tangents Vector
                       // offset by tangentsindex number of bytes into vvd tangents

	int numattachments;
	int attachmentindex;

    // might be cut
	int numeyeballs;
	int eyeballindex;

	//mstudio_modelvertexdata_t vertexdata;

	int unk[4];

    int unkindex;
    int unkindex1;

    int unused[4];
};

// meshes
struct mstudio_meshvertexdata_t
{
    int unk;    

	int numLODVertexes[MAX_NUM_LODS];
};


struct mstudiomesh_t
{
	int material <read=ReadString(startof(textures[this]) + textures[this].sznameindex)>;

	int modelindex;

	int numvertices; // number of unique vertices/normals/texcoords
	int vertexoffset; // vertex mstudiovertex_t
                      // offset by vertexoffset number of verts into vvd vertexes, relative to the models offset

	// Access thin/fat mesh vertex data (only one will return a non-NULL result)
	
	int numflexes; // vertex animation
	int flexindex;

	// special codes for material operations
	int materialtype;
	int materialparam;

	// a unique ordinal for this mesh
	int meshid;

	Vector3 center;

	mstudio_meshvertexdata_t vertexdata;
    
	int unused[8]; // remove as appropriate
};

struct mstudioboneweight_t
{
	float	weight[MAX_NUM_BONES_PER_VERT];
	char	bone[MAX_NUM_BONES_PER_VERT]; 
	byte	numbones;
};

struct mstudiovertex_t
{
	mstudioboneweight_t	m_BoneWeights;
	Vector3 m_vecPosition;
	Vector3 m_vecNormal;
	Vector2 m_vecTexCoord;
};


//=================
// Material Structs


// cdmaterials
struct mstudiotexturedir_t
{
	int sznameindex <read=ReadString(this)>; // file name
};

// skin info
struct mstudiotexture_t_v47
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int flags;
	int used;
    int unused1;

    int unk;
	
    int unused[11];
};

struct mstudiotexture_t
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int flags;
	int used;
    int unused1;
	
    int unused[12];
};

struct mstudiotexture_t_v53
{
	int sznameindex <read=ReadString(startof(this) + this)>;

	int flags;
	int used;
    int unused1;
	
	int unused[7];
};

// skin groups
struct mstudioskingroup_t
{
    for(i = 0; i < mdlHeader.numskinref; i++)
        int16 textureId <read=ReadString(startof(textures[this]) + textures[this].sznameindex)>;
};


//====
// RUI


struct mstudiorruiheader_t
{
    int unk; // unsure, it doesn't line up
    int ruimeshindex;
};

// vertex map for a quad
struct mstudioruivertmap_t
{
    // order of vertices for triangles:
    // 1st tri: 1-3-2
    // 2nd tri: 4-2-3

    // three vertex set for base triangle
    // 1-3
    // sometimes this is just for tris and only has three verts.
    int16 vertstartid;
    int16 vertendid;

    // fourth vert for second triangle
    // 4
    int16 vertextraid;
};

struct mstudioruivert_t
{
    int parent; // relative to global mesh parent, assumed

    Vector3 vertexpos; // position of vertex relative to bone
};

struct mstudioruimesface_t
{
    // these values are for the two vertices that are not shared
    // for the other do as such:
    // vertex 2: take x from vextex 1 and y from vextex 4
    // vertex 2: take x from vextex 4 and y from vextex 1

    // normal smd uv, seems to calculate for other values
    Vector2 faceuvmin; // vertex 1
    Vector2 faceuvmax; // vertex 4

    // these could likely be calculated by doing math with a height/width scale
    // scale of the ui element
    Vector2 facescalemin; // vertex 1
    Vector2 facescalemax; // vertex 4
};

struct mstudioruimesh_t
{
    int numparents; // apparently you can have meshes parented to more than one bone(?)    
    int numvertices; // number of verts
    int numfaces; // number of faces (quads)

    int parentindex; // this gets padding out front of it to even off the struct

    int vertexindex; // offset into smd style vertex data
    int vertmapindex; // offsets into a vertex map for each quad
    int facedataindex; // offset into uv section

    byte unk[4]; // zero sometimes, others not. has to do with face clipping.

    char szruimeshname[parentindex - 32]; // have to subtract header to get actual size (padding included)

    int16 parent[numparents] <read=ReadString(startof(bones[this]) + bones[this].sznameindex)>; // parent(s) bone of mesh

    mstudioruivertmap_t vertexmap[numfaces]; // vertex map for each face  
    mstudioruivert_t vertex[numvertices];

    mstudioruimesface_t facedata[numfaces];
};


//=======================
// Per Triangle Collision


struct pertriheader_t
{
    int version; // unsure if this is an actual version or type
                 // set to '2' for static prop.
    
    // aabb sizes, same as hulls
    Vector3 bbmin;
	Vector3 bbmax;		

    int unused[8]; // hopefully, checks out with other mdl structs 
};

struct aabbsection1
{
    int16 unk[3];
    int16 unk1[3];
    
    // sometimes negative
    int unk2[2];
};

struct aabbtype
{
    int16 unk[3];
    int16 unk1;
};

struct aabbsection2
{
    int16 unk[6];

    int unk1;
    
    aabbtype unk2[12];
};

struct aabbsection3
{
    Quat48 unk;
};


//========
// Unknown


// struct near end of file.
struct unkphysectionhdr_t
{
    int unk; // parent/flags?
    int numunk1; // quaternion, edges?
    int numunk2; // unk member, faces?
    int numvertices; // vector

    int dataindex; // offset to related data chunk
};

struct unkphysectiondatatype_t
{
    Vector3 unkvector; // min/max?
    Vector3 unkvector1; // min/max?
    
    ubyte unk[4]; // flags? four separate bytes?
};


//=====
// Misc


struct mstudionodename_t
{
    int sznameindex <read=ReadString(this)>;
};

struct mstudionodedata
{
    byte nodedata[mdlHeader.numlocalnodes];
};