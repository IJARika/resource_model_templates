//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 53
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../phy/vphy.bt"
#include "../vtx/vtx.bt"
#include "../vv/vv.bt"

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;


// headers
studiohdr_t_v53 mdlHeader <bgcolor=cLtBlue>;

// this is a check for non shipped models.
if (mdlHeader.boneindex > mdlHeader.mayaindex && mdlHeader.mayaindex != 0)
{
    char mayabakery[mdlHeader.boneindex - mdlHeader.mayaindex] <fgcolor=cRed>;
};


// bones
FSeek(mdlHeader.boneindex);
mstudiobone_t_v53 bones[mdlHeader.numbones] <bgcolor=cLtGreen>; // get names working

local int jigglebonecount = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
};

mstudiobboxv53_t bboxes[bboxCount]  <bgcolor=0xa29418>;


// more bones
FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


// animation
FSeek(mdlHeader.localanimindex);
// mstudioanimdescv53_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;
//NOTE: Using this loop instead of above array so that the "offset" variables are calculated correctly.
for (i = 0; i < mdlHeader.numlocalanim; ++i)
{
	mstudioanimdescv53_t animdesc <bgcolor=0xdc7633>;
}

// Animation Data
local int numanimboneheader = 0;
local int numikrule = 0;
for (i = 0; i < mdlHeader.numlocalanim; ++i)
{
	FSeek(animdesc[i].animindex - animdesc[i].baseptr);
	for (j = 0; j < mdlHeader.numbones; ++j)
	{
        
		mstudioanimv53_t animheader <bgcolor=(this.nextoffset == 0 ? cDkBlue : cBlue )>;
		numanimboneheader += 1;
        FSkip(animheader[numanimboneheader - 1].nextoffset - 32);
        
		if (animheader[numanimboneheader - 1].nextoffset <= 0) 
		{
			// Read in unused empty data structure at the end of the list.
			//RAnimBoneHeader animBoneHeaders <bgcolor=cDkBlue>;
			break;
		}
	};
	// Read in unused empty data structure at the end of the list.
	//RAnimBoneHeader animBoneHeaders <bgcolor=cDkBlue>;

	// Animation IK Rules
	FSeek(animdesc[i].ikruleindex - animdesc[i].baseptr);
	for (j = 0; j < animdesc[i].numikrules; ++j)
	{
		mstudioikrule_t animikrule <bgcolor=cGreen>;
		numikrule += 1;
	};
};

FSeek(mdlHeader.localseqindex);
mstudioseqdescv53_t animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a>;


// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
};

mstudiomodel_t_v52 models[modelCount]<bgcolor=cDkGray>;


// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchainv53_t ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
};

mstudioiklink_t iklinks[linkCount] <bgcolor=0x7d3c98>;

FSeek(mdlHeader.localikautoplaylockindex);
mstudioiklock_t iklocks[mdlHeader.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
};

mstudiomesh_t meshes[meshCount] <bgcolor=cLtGray>;


// rui
if (mdlHeader.numruimeshes > 0)
{
    FSeek(mdlHeader.ruimeshindex);
    mstudiorruiheader_t ruiheader[mdlHeader.numruimeshes] <fgcolor=cLtGreen>;

    // some padding here to make it even I think.
    //char ruiheader_filler[12];
    
    FSeek(mdlHeader.ruimeshindex + ruiheader[0].ruimeshindex);
    mstudioruimesh_t ruimesh[mdlHeader.numruimeshes] <fgcolor=cGreen, optimize=false>;
    //float ruidata[(mdlHeader.textureindex - (mdlHeader.ruimeshindex + ruiheader[0].ruimesh_offset)) / 4] <fgcolor=cGreen>;
};


// various includes, materials, and groups
FSeek(mdlHeader.includemodelindex);
mstudiomodelgroup_t includemodels[mdlHeader.numincludemodels] <bgcolor=cLtBlue>;

FSeek(mdlHeader.textureindex);
mstudiotexturev53_t textures[mdlHeader.numtextures] <bgcolor=cGreen>;

FSeek(mdlHeader.cdtextureindex);
mstudiotexturedir_t cdmaterials[mdlHeader.numcdtextures] <bgcolor=cDkGreen>;

FSeek(mdlHeader.skinindex);
mstudioskingroup_t skingroup[mdlHeader.numskinfamilies] <bgcolor=cDkGreen>;

FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(mdlHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlHeader.numsrcbonetransform] <bgcolor=cDkGreen>;

if (mdlHeader.linearboneindex > 0)
{
    FSeek(mdlHeader.linearboneindex);
    mstudiolinearbone_t linearbone <bgcolor=cGreen>;
    
    struct mstudiolinearbonedata_t
    {
        if(linearbone.flagsindex > 0)
            uint32 bone_flags[linearbone.numbones];
        if(linearbone.parentindex > 0)
            uint32 bone_parents[linearbone.numbones];
        
        if(linearbone.posindex > 0)
            Vector3 bone_pos[linearbone.numbones];
        if(linearbone.quatindex > 0)
	        Quaternion bone_quat[linearbone.numbones];
        if(linearbone.rotindex > 0)
	        RadianEuler bone_rot[linearbone.numbones];
        
        if(linearbone.posetoboneindex > 0)
            matrix3x4_t bone_poseToBone[linearbone.numbones];

        if(linearbone.posscaleindex > 0)
            Vector3 bone_posscale[linearbone.numbones];
        if(linearbone.rotscaleindex > 0)
	        Vector3 bone_rotscale[linearbone.numbones];
	
        if(linearbone.qalignmentindex > 0)
	        Quaternion bone_qAlignment[linearbone.numbones];
    };

    mstudiolinearbonedata_t linearbonedata <bgcolor=cLtGreen>;

};


struct unksectiondata
{
    

};

// per tri aabb data
FSeek(mdlHeader.aabbindex);
aabbheader_t aabb_hdr <fgcolor=cDkRed>; // header completely nulled out if unused.

if (mdlHeader.numaabb != 0 || mdlHeader.numaabb1 != 0 || mdlHeader.numaabb2 != 0)
{
    aabbsection1 unk_bytes1[mdlHeader.numaabb] <fgcolor=cRed>;
    aabbsection2 unk_bytes2[mdlHeader.numaabb1] <fgcolor=cRed>;
    aabbsection3 unk_bytes3[mdlHeader.numaabb2] <fgcolor=cRed>;
};


// unk_index1 always follows this, and always seems to be one byte in front of the string table.


// string table
FSeek(mdlHeader.sznameindex);

local int64 stringtable_size;

if(mdlHeader.vphysize >= 0 || mdlHeader.vtxsize >= 0)
{
    if(mdlHeader.vtxsize >= 0 && mdlHeader.vphysize == 0)
    {
        stringtable_size = mdlHeader.vtxindex - mdlHeader.sznameindex;
    }
    else
    {
        stringtable_size = mdlHeader.vphyindex - mdlHeader.sznameindex;
    }
}
else
{
    stringtable_size = mdlHeader.unkindex3 - mdlHeader.sznameindex;
}

char stringtable[stringtable_size] <fgcolor=cLtRed>;


// vphy
FSeek(mdlHeader.vphyindex);

struct vphygroup_t
{   
    phyheader_t vphy_header <bgcolor=cLtRed>;
    physection_t vphy_section[vphy_header.numsolids] <optimize=false>;
    
    local int64 charSize = mdlHeader.vphysize;
    
    for (i = 0; i < vphy_header.numsolids; i++)
    {
        charSize -= vphy_section[i].surfaceheader.size + 4;
    };
    
    charSize -= 16;
    
    FSeek(startof(vphy_header) + (mdlHeader.vphysize - charSize));
    char vphy_stringdata[charSize] <fgcolor=cRed>;
};


if (mdlHeader.vphyindex > 0)
{
    vphygroup_t vphy;
};


// can't get it working outside here :/
i = 0;

struct unkphysectiondatachunk_t
{
    Quaternion unkquat[unksechdr[i].numunk1] <bgcolor=cLtBlue>;
    
    unkphysectiondatatype_t unktype[unksechdr[i].numunk2] <bgcolor=cDkBlue>;

    Vector3 vertex[unksechdr[i].numvertices] <bgcolor=cBlue>; // vertices

    i++;
};

if (mdlHeader.vphysize > 0)
{
    local int numunk1 = 0;

    if(mdlHeader.numunkmember1 > 0)
    {
        numunk1 = mdlHeader.numunkmember1;
    }
    else
    {
        numunk1 = vphy.vphy_header.numsolids;
    }

    FSeek(mdlHeader.unkmemberindex1);
    unkphysectionhdr_t unksechdr[numunk1] <bgcolor=cBlue>;
    unkphysectiondatachunk_t unksecdatachunk[numunk1] <fgcolor=cLtYellow, optimize=false>;
};

// vtx
FSeek(mdlHeader.vtxindex);

struct vtxgroup
{
    FileHeader_t vtx_header <bgcolor=cLtPurple>;
    BodyPartHeader_t vtx_partheader[vtx_header.numBodyParts] <bgcolor=cPurple>;

    // gets the total amount of parts.
    local int vtxPartCount = 0;

    for (i = 0; i < vtx_header.numBodyParts; ++i)
    {
       vtxPartCount += vtx_partheader[i].numModels;
    };

    ModelHeader_t vtx_modelheader[vtxPartCount] <bgcolor=cDkPurple>;

    // gets the total amount of LODs.
    local int vtxLodCount = 0;

    for (i = 0; i < vtxPartCount; ++i)
    {
       vtxLodCount += vtx_modelheader[i].numLODs;
    };

    ModelLODHeader_t vtx_lodheader[vtxLodCount] <bgcolor=cLtPurple>;

    // gets the total amount of LODs.
    local int vtxMeshCount = 0;

    for (i = 0; i < vtxLodCount; ++i)
    {
       vtxMeshCount += vtx_lodheader[i].numMeshes;
    };

    MeshHeader_t vtx_meshheader[vtxMeshCount] <bgcolor=cPurple>;

    // gets the total amount of strip groups.
    local int vtxStripGrpCount = 0;

    for (i = 0; i < vtxLodCount; ++i)
    {
       vtxStripGrpCount += vtx_meshheader[i].numStripGroups;
    };

    StripGroupHeader_t vtx_stripgrphdr[vtxStripGrpCount] <bgcolor=cDkPurple>;
    
    //char piss[33];

    // gets the total amount of strips.
    /*local int vtxStripCount = 0;

    for (i = 0; i < vtxStripGrpCount; ++i)
    {
       vtxStripCount += vtx_stripgrphdr[i].numStrips;
    }

    StripHeader_t vtx_strips[4];*/

};

if (mdlHeader.vtxsize > 0)
    vtxgroup vtx <fgcolor=0xe8daef>;


// vvd
struct vvdgroup
{
    FSeek(mdlHeader.vvdindex);
    vertexFileHeader_t vv_header <bgcolor=cYellow>;

    if(vv_header.fixupTableStart > 0)
    {
        FSeek(startof(vv_header) + vv_header.fixupTableStart);
        vertexFileFixup_t vv_fixup[vv_header.numFixups] <bgcolor=cDkYellow>;
    }
    
    if(vv_header.vertexDataStart > 0)
    {
        FSeek(startof(vv_header) + vv_header.vertexDataStart);
        mstudiovertex_t vv_vert[vv_header.numLODVertexes[0]] <bgcolor=cLtYellow>;
    }
    
    if(vv_header.tangentDataStart > 0)
    {
        FSeek(startof(vv_header) + vv_header.tangentDataStart);
        Vector4 vv_tangent[vv_header.numLODVertexes[0]] <bgcolor=cLtYellow>;
    }
};

if (mdlHeader.vvdsize > 0)
{
    FSeek(mdlHeader.vvdindex);
    vvdgroup vvd;
}

// vvc
struct vvcgroup
{
    FSeek(mdlHeader.vvcindex);
    vertexFileHeader_t vv_header <bgcolor=cYellow>;

    int unkpervertdata[vv_header.numLODVertexes[0]] <bgcolor=cDkYellow>;\

    // leaving this here however the rest of the data has two ints per vert
    if(vv_header.fixupTableStart > 0)
    {
        FSeek(startof(vv_header) + vv_header.fixupTableStart);
        vertexFileFixup_t vv_fixup[vv_header.numFixups] <bgcolor=cDkYellow>;
    }
};

if (mdlHeader.vvcsize > 0)
{
    FSeek(mdlHeader.vvcindex);
    vvcgroup vvc;
}