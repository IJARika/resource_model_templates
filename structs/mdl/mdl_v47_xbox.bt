//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 47 Xbox
//   Purpose: Valve MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"
#include "../mdl/mdl_structs_xbox.bt"

local int i = 0;
local int j = 0;


studiohdr_t_v47_xbox mdlHeader <bgcolor=cLtBlue>;


/// bones
FSeek(mdlHeader.boneindex);
mstudiobone_t_v47_xbox bones[mdlHeader.numbones] <bgcolor=cLtGreen>;

local int jigglebonecount = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t_v47_xbox attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
}

mstudiobbox_t_v47_xbox bboxes[bboxCount]  <bgcolor=0xa29418>;


// more bones
FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


/*// animation
FSeek(mdlHeader.localanimindex);
if (mdlHeader.version < 49)
    mstudioanimdescv48_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;
else
    mstudioanimdescv49_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;


// Animation Data
local int numanimboneheader = 0;
local int numikrule = 0;
for (i = 0; i < mdlHeader.numlocalanim; ++i)
{
	FSeek(animdesc[i].animindex - animdesc[i].baseptr);
	for (j = 0; j < mdlHeader.numbones; ++j)
	{
        
		mstudioanim_t animheader <bgcolor=(this.nextoffset == 0 ? cDkBlue : cBlue )>;
		numanimboneheader += 1;
        FSkip(animheader[numanimboneheader - 1].nextoffset - 4);
        
		if (animheader[numanimboneheader - 1].nextoffset <= 0) 
		{
			// Read in unused empty data structure at the end of the list.
			//RAnimBoneHeader animBoneHeaders <bgcolor=cDkBlue>;
			break;
		}
	};
	// Read in unused empty data structure at the end of the list.
	//RAnimBoneHeader animBoneHeaders <bgcolor=cDkBlue>;

	// Animation IK Rules
	FSeek(animdesc[i].ikruleindex - animdesc[i].baseptr);
	for (j = 0; j < animdesc[i].numikrules; ++j)
	{
		mstudioikrule_t animikrule <bgcolor=cGreen>;
		numikrule += 1;
	};
};


FSeek(mdlHeader.localseqindex);
if (mdlHeader.version < 49)
    mstudioseqdescv48_t animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a>;
else
    mstudioseqdescv49_t animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a>;
*/


// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t_v47_xbox bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
}

mstudiomodel_t_v47_xbox models[modelCount]<bgcolor=cDkGray>;




// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchain_t_v47_xbox ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
}

mstudioiklink_t_v47_xbox iklinks[linkCount] <bgcolor=0x7d3c98>;

FSeek(mdlHeader.localikautoplaylockindex);
mstudioiklock_t_v47_xbox iklocks[mdlHeader.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
}

mstudiomesh_t_v47_xbox meshes[meshCount] <bgcolor=cLtGray>;


// various includes, materials, and groups
FSeek(mdlHeader.includemodelindex);
mstudiomodelgroup_t includemodels[mdlHeader.numincludemodels] <bgcolor=cLtBlue>;

FSeek(mdlHeader.textureindex);
mstudiotexture_t_v47_xbox textures[mdlHeader.numtextures] <bgcolor=cGreen>;

FSeek(mdlHeader.cdtextureindex);
mstudiotexturedir_t cdmaterials[mdlHeader.numcdtextures] <bgcolor=cDkGreen>;

FSeek(mdlHeader.skinindex);
mstudioskingroup_t skingroup[mdlHeader.numskinfamilies] <bgcolor=cDkGreen>;

FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;

// string table
FSeek(mdlHeader.sznameindex);
char stringtable[mdlHeader.length - mdlHeader.sznameindex] <fgcolor=cLtRed>;