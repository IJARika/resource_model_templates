//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 47
//   Purpose: Valve MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"
#include "../mdl/mdl_structs.bt"

local int i = 0;
local int j = 0;
local int k = 1;
local int x = 0;


studiohdr_t_v47 mdlHeader <bgcolor=cLtBlue>;


// bones
FSeek(mdlHeader.boneindex);
mstudiobone_t_v47 bones[mdlHeader.numbones] <bgcolor=cLtGreen>;

local int jigglebonecount = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
}

mstudiobbox_t bboxes[bboxCount]  <bgcolor=0xa29418>;


// more bones
FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


// animation
FSeek(mdlHeader.localanimindex);
if (mdlHeader.version < 49)
    mstudioanimdesc_t_v48 animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
if(mdlHeader.version == 49)
    mstudioanimdesc_t_v49 animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;
if(mdlHeader.version == 52)
    mstudioanimdesc_t_v52 animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633, read=ReadString(startof(this) + this.sznameindex)>;


// Animation Data
local int numanimboneheader = 0;
local int numsectionanimboneheader = 0;
local int numikrule = 0;
local int numsections = 0;
local int sectionlength = 0;

for (i = 0; i < mdlHeader.numlocalanim; ++i)
{
	if(animdesc[i].sectionframes > 0)
    {
        FSeek(startof(animdesc[i]) + animdesc[i].sectionindex);
        sectionindexes_t sectionindexes;
        numsections++;
        sectionlength = (animdesc[i].numframes / animdesc[i].sectionframes) + 2;

        for(j = 0; j < sectionlength; j++)
        {
            FSeek(startof(animdesc[i]) + sectionindexes[numsections - 1].sectionoffsets[j].sectionoffset);

            for (k = 0; k < mdlHeader.numbones; ++k)
            {   
                mstudioanim_t sectionanimheader <bgcolor=(this.nextoffset == 0 ? 0xFF1122 : 0x771122 )>;
                numsectionanimboneheader += 1;
                FSeek(startof(sectionanimheader[numsectionanimboneheader - 1]));
                FSkip(sectionanimheader[numsectionanimboneheader - 1].nextoffset);

                if (sectionanimheader[numsectionanimboneheader - 1].nextoffset <= 0) 
		        {
			        break;
		        }
            };
        };
    }

	if(animdesc[i].sectionframes == 0)
    {
        FSeek(animdesc[i].animindex - animdesc[i].baseptr);
	    for (j = 0; j < mdlHeader.numbones; ++j)
	    {
            
		    mstudioanim_t animheader <bgcolor=(this.nextoffset == 0 ? cDkBlue : cBlue )>;
		    numanimboneheader += 1;
            FSeek(startof(animheader[numanimboneheader - 1]));
            FSkip(animheader[numanimboneheader - 1].nextoffset);
            
		    if (animheader[numanimboneheader - 1].nextoffset <= 0) 
		    {
			    // Read in unused empty data structure at the end of the list.
			    //RAnimBoneHeader animBoneHeaders <bgcolor=cDkBlue>;
			    break;
		    }
	    };
    }

	// Animation IK Rules
	FSeek(animdesc[i].ikruleindex - animdesc[i].baseptr);
	for (j = 0; j < animdesc[i].numikrules; ++j)
	{
		mstudioikrule_t animikrule <bgcolor=cGreen>;
		numikrule += 1;
	};

    for(j = -animdesc[i].numikrules; j < 0; j++)
    {
        if(animikrule[numikrule + j].compressedikerrorindex > 0)
        {
            FSeek(startof(animikrule[numikrule + j]) + animikrule[numikrule + j].compressedikerrorindex);
            mstudiocompressedikerror_t ikcompressederror <bgcolor=cDkGreen>;
        }
    }

    if(mdlHeader.version == 52)
    {
        if(animdesc[i].compressedikerrorindex > 0)
        {
            FSeek(startof(animdesc[i]) + animdesc[i].compressedikerrorindex);
            mstudiocompressedikerror_t_v52 ikcompressederrorNEW <bgcolor=cLtGreen>;
        }
    }
};


/*FSeek(mdlHeader.localseqindex);
if (mdlHeader.version <= 48)
    mstudioseqdescv48_t seqdesc[mdlHeader.numlocalseq] <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;
if (mdlHeader.version >= 49)
    mstudioseqdescv49_t seqdesc[mdlHeader.numlocalseq] <bgcolor=0xf0b27a, read=Str("%s : %s", ReadString(startof(this) + this.szlabelindex), ReadString(startof(this) + this.szactivitynameindex))>;


for(i = 0; i < mdlHeader.numlocalseq; i++)
{
    if(seqdesc[i].posekeyindex > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].posekeyindex);
        posekey_t posekey <bgcolor=0x55ee00>;
    }

    if(seqdesc[i].numevents > 0)
    {
        FSeek(startof(seqdesc[i]) + seqdesc[i].eventindex);
        for(j = 0; j < seqdesc[i].numevents; j++)
        {
            mstudioevent_t seqevent <bgcolor=0x21fe7a, read=ReadString(startof(this) + this.szeventindex)>;
        }
    }

    FSeek(startof(seqdesc[i]) + seqdesc[i].autolayerindex);
    for(j = 0; j < seqdesc[i].numautolayers; j++)
    {
        mstudioautolayer_t autolayers <bgcolor=0x226600>;
    }

    FSeek(startof(seqdesc[i]) + seqdesc[i].weightlistindex);
    seqweightlist_t weightlist <bgcolor=0xe1f27a>;

    struct blendgroup_t
    {
        int16 blends[seqdesc[i].groupsize[0] * seqdesc[i].groupsize[1]];
    };
    
    FSeek(startof(seqdesc[i]) + seqdesc[i].animindexindex);
    blendgroup_t blendgroup <bgcolor=0xffff00>;

    FSeek(startof(seqdesc[i]) + seqdesc[i].activitymodifierindex);
    for(j = 0; j < seqdesc[i].numactivitymodifiers; j++)
    {
        mstudioactivitymodifier_t activitymodifier <bgcolor=0x119900, read=ReadString(startof(this) + this.sznameindex)>;
    }
}*/



// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
}


if (mdlHeader.version > 49)
    mstudiomodel_t_v52 models[modelCount]<bgcolor=cDkGray>;
else
    mstudiomodel_t models[modelCount]<bgcolor=cDkGray>;




// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchain_t ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
}

mstudioiklink_t iklinks[linkCount] <bgcolor=0x7d3c98>;

FSeek(mdlHeader.localikautoplaylockindex);
mstudioiklock_t iklocks[mdlHeader.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
}

mstudiomesh_t meshes[meshCount] <bgcolor=cLtGray>;


// I do an include file because these are mostly the same across all mdl versions,
// and I really don't wanna have to update every template every time I change something.
#include "../mdl/mdl_module_texturesincludemdl.bt"


// do keyvalues, this remains unchanged in all models since it's just char data.
FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;


// string table
//FSeek(mdlSubHeader.sznameindex  + 408);
//char stringtable[mdlHeader.length - (mdlSubHeader.sznameindex  + 408)] <fgcolor=cLtRed>;