//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: mdl
//   Authors: Rika
//   Version: 53
//   Purpose: Respawn MDL Files
//  Category: Model
// File Mask: *.mdl
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "./source_math.bt"
#include "./mdl_structs.bt"
#include "./vphy.bt"
#include "./vtx.bt"


// headers
studiohdrv53_t mdlHeader <bgcolor=cLtBlue>;

// this is a check for non shipped models.
if (mdlHeader.boneindex > mdlHeader.mayaindex)
{
    char mayabakery[mdlHeader.boneindex - mdlHeader.mayaindex] <fgcolor=cRed>;
};


// bones
FSeek(mdlHeader.boneindex);
mstudiobonev53_t bones[mdlHeader.numbones] <bgcolor=cLtGreen>; // get names working

local int jigglebonecount = 0;
local int i = 0;

local char s_jigglebonename;

for (i = 0; i < mdlHeader.numbones; ++i)
{
    if (bones[i].proctype == 5) {
        jigglebonecount++;
        
        s_jigglebonename = bones[i].sznameindex;
    }
}

mstudiojigglebone_t jigglebones[jigglebonecount] <bgcolor=cGreen, name = s_jigglebonename>;

FSeek(mdlHeader.localattachmentindex);
mstudioattachment_t attachments[mdlHeader.numlocalattachments]  <bgcolor=0xcff5ca>;


// hitbox
FSeek(mdlHeader.hitboxsetindex);
mstudiohitboxset_t hboxset[mdlHeader.numhitboxsets]  <bgcolor=0xf2e46a>;

// have to do this because some things actually do have more than one.
local int bboxCount = 0;

for (i = 0; i < mdlHeader.numhitboxsets; ++i)
{
   bboxCount += hboxset[i].numhitboxes;
};

mstudiobboxv53_t bboxes[bboxCount]  <bgcolor=0xa29418>;


// more bones
FSeek(mdlHeader.bonetablebynameindex);
mstudiobonenametable_t bonenames <bgcolor=cDkGreen>;


// animation
FSeek(mdlHeader.localanimindex);
mstudioanimdescv53_t animdesc[mdlHeader.numlocalanim] <bgcolor=0xdc7633>;

FSeek(mdlHeader.localseqindex);
mstudioseqdescv53_t animseq[mdlHeader.numlocalseq] <bgcolor=0xf0b27a>;


// models
FSeek(mdlHeader.bodypartindex);
mstudiobodyparts_t bodyparts[mdlHeader.numbodyparts] <bgcolor=cGray>;

local int modelCount = 0;

for (i = 0; i < mdlHeader.numbodyparts; ++i)
{
   modelCount += bodyparts[i].nummodels;
};

mstudiomodelv53_t models[modelCount]<bgcolor=cDkGray>;


// ik
FSeek(mdlHeader.ikchainindex);
mstudioikchainv53_t ikchains[mdlHeader.numikchains] <bgcolor=0xe8daef>;

local int linkCount = 0;

for (i = 0; i < mdlHeader.numikchains; ++i)
{
   linkCount += ikchains[i].numlinks;
};

mstudioiklink_t iklinks[linkCount] <bgcolor=0x7d3c98>;

FSeek(mdlHeader.localikautoplaylockindex);
mstudioiklock_t iklocks[mdlHeader.numlocalikautoplaylocks] <bgcolor=0xe8daef>;

FSeek(mdlHeader.localposeparamindex);
mstudioposeparamdesc_t poseparm[mdlHeader.numlocalposeparameters] <bgcolor=cYellow>;


// meshes
// can't find an offset for this so it goes here.
local int meshCount = 0;

for (i = 0; i < modelCount; ++i)
{
   meshCount += models[i].nummeshes;
};

mstudiomesh_t meshes[meshCount] <bgcolor=cLtGray>;


// rui
if (mdlHeader.numruimeshes > 0)
{
    FSeek(mdlHeader.ruimeshindex);
    mstudiorruiheader_t ruiheader[mdlHeader.numruimeshes] <fgcolor=cLtGreen>;

    // some padding here to make it even I think.
    //char ruiheader_filler[12];
    
    FSeek(mdlHeader.ruimeshindex + ruiheader[0].ruimesh_offset);
    char ruidata[mdlHeader.textureindex - (mdlHeader.ruimeshindex + ruiheader[0].ruimesh_offset)] <fgcolor=cGreen>;
};

// various includes, materials, and groups
FSeek(mdlHeader.includemodelindex);
mstudiomodelgroup_t includemodels[mdlHeader.numincludemodels] <bgcolor=cLtBlue>;

FSeek(mdlHeader.textureindex);
mstudiotexturev53_t textures[mdlHeader.numtextures] <bgcolor=cGreen>;

FSeek(mdlHeader.cdtextureindex);
mstudiotexturedir_t cdmaterials[mdlHeader.numcdtextures] <bgcolor=cDkGreen>;

FSeek(mdlHeader.skinindex);
mstudioskingroup_t skingroup[mdlHeader.numskinfamilies] <bgcolor=cDkGreen>;

FSeek(mdlHeader.keyvalueindex);
char keyvalues_char[mdlHeader.keyvaluesize] <fgcolor=cLtBlue>;


FSeek(mdlHeader.srcbonetransformindex);
mstudiosrcbonetransform_t srcbonetransform[mdlHeader.numsrcbonetransform] <bgcolor=cDkGreen>;

if (mdlHeader.linearboneindex > 0)
{
    FSeek(mdlHeader.linearboneindex);
    mstudiolinearbone_t linearbone <bgcolor=cGreen>;
    
    struct mstudiolinearbonedata_t
    {
        if(linearbone.flagsindex > 0)
            uint32 bone_flags[linearbone.numbones];
        if(linearbone.parentindex > 0)
            uint32 bone_parents[linearbone.numbones];
        
        if(linearbone.posindex > 0)
            Vector3 bone_pos[linearbone.numbones];
        if(linearbone.quatindex > 0)
	        Quaternion bone_quat[linearbone.numbones];
        if(linearbone.rotindex > 0)
	        RadianEuler bone_rot[linearbone.numbones];
        
        if(linearbone.posetoboneindex > 0)
            matrix3x4_t bone_poseToBone[linearbone.numbones];

        if(linearbone.posscaleindex > 0)
            Vector3 bone_posscale[linearbone.numbones];
        if(linearbone.rotscaleindex > 0)
	        Vector3 bone_rotscale[linearbone.numbones];
	
        if(linearbone.qalignmentindex > 0)
	        Quaternion bone_qAlignment[linearbone.numbones];
    };

    mstudiolinearbonedata_t linearbonedata <bgcolor=cLtGreen>;

};


// always 60 bytes when unused, only used when linear bone is not (afaik).
FSeek(mdlHeader.unkindex);
char unk_bytes[mdlHeader.unkindex1 - mdlHeader.unkindex] <fgcolor=cRed>;

// unk_index1 always follows this, and always seems to be one byte in front of the string table.

// string table
FSeek(mdlHeader.sznameindex);

local int64 stringtable_size;

if(mdlHeader.vphyindex == 0)
    stringtable_size = mdlHeader.vtxindex - mdlHeader.sznameindex;
else
    stringtable_size = mdlHeader.vphyindex - mdlHeader.sznameindex;

char stringtable[stringtable_size] <fgcolor=cLtRed>;


// vphy
FSeek(mdlHeader.vphyindex);

struct vphygroup_t
{   
    phyheader_t vphy_header <bgcolor=cLtRed>;
    compactsurfaceheader_t vphy_section[vphy_header.solidCount] <bgcolor=cLtRed, optimize=false>;

    local int64 charSize = mdlHeader.vphysize;

    for (i = 0; i < vphy_header.solidCount; i++)
    {
        charSize -= vphy_section[i].size + 4;
    };

    charSize -= 16;
    
    // there is something extra after the normal phy :/
    char vphy_stringdata[charSize] <bgcolor=cDkRed>; 
};

if (mdlHeader.vphyindex > 0)
{
    vphygroup_t vphy <fgcolor=cLtYellow>;
};

FSeek(mdlHeader.unkindex2);
unkbytes1header unkbytes1[vphy.vphy_header.solidCount];
float unkbytesfloat1[(mdlHeader.vtxindex - (mdlHeader.unkindex2 + unkbytes1[0].unkindex)) / 4];
//uint32 unkbytes1[(mdlHeader.vtxindex - mdlHeader.unkindex2) / 4];


// vtx
FSeek(mdlHeader.vtxindex);

struct vtxgroup_t
{
    FileHeader_t vtx_header <bgcolor=cLtPurple>;
    BodyPartHeader_t vtx_partheader[vtx_header.numBodyParts] <bgcolor=cPurple>;

    // gets the total amount of parts.
    local int vtxPartCount = 0;

    for (i = 0; i < vtx_header.numBodyParts; ++i)
    {
       vtxPartCount += vtx_partheader[i].numModels;
    };

    ModelHeader_t vtx_modelheader[vtxPartCount] <bgcolor=cDkPurple>;

    // gets the total amount of LODs.
    local int vtxLodCount = 0;

    for (i = 0; i < vtxPartCount; ++i)
    {
       vtxLodCount += vtx_modelheader[i].numLODs;
    };

    ModelLODHeader_t vtx_lodheader[vtxLodCount] <bgcolor=cLtPurple>;

    // gets the total amount of LODs.
    local int vtxMeshCount = 0;

    for (i = 0; i < vtxLodCount; ++i)
    {
       vtxMeshCount += vtx_lodheader[i].numMeshes;
    };

    MeshHeader_t vtx_meshheader[vtxMeshCount] <bgcolor=cPurple>;

    // gets the total amount of strip groups.
    local int vtxStripGrpCount = 0;

    for (i = 0; i < vtxLodCount; ++i)
    {
       vtxStripGrpCount += vtx_meshheader[i].numStripGroups;
    };

    StripGroupHeader_t vtx_stripgrphdr[vtxStripGrpCount] <bgcolor=cDkPurple>;
    
    char piss[33];

    // gets the total amount of strips.
    /*local int vtxStripCount = 0;

    for (i = 0; i < vtxStripGrpCount; ++i)
    {
       vtxStripCount += vtx_stripgrphdr[i].numStrips;
    }

    StripHeader_t vtx_strips[4];*/

};

vtxgroup_t vtx <fgcolor=0xe8daef>; 