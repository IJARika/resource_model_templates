//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vphy
//   Authors: Rika & Others
//   Version: 16
//   Purpose: Valve Physics Files
//  Category: Struct
// File Mask: *.phy
//  ID Bytes: 
//   History: 
//------------------------------------------------


// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//=====
// vphy


struct phyheader_t
{
	int size; // Size of this header section (generally 16), this is also version.
	int id; // Often zero, unknown purpose.
	int solidCount; // Number of solids in file
	int checkSum; // checksum of source .mdl file (4-bytes)
};

struct compactsurfaceheader_t
{
	int size;
	int id;
	short version;

	short modeltype;

	int surfacesize;

	Vector dragaxisareas;

	int axismaparea;
};

struct swapcompactsurfaceheader_t
{
	int		size; // size of the content after this byte
	int		vphysicsID;
	short	version;
	short	modelType;
	int		surfaceSize;
	Vector	dragAxisAreas;
	int		axisMapSize;
};

struct legacysurfaceheader_t
{
	Vector mass_center;
	Vector rotation_inertia;

	float upper_limit_radius;

    // big if true
	int	max_deviation : 24;
	int	byte_size : 8;
	int	offset_ledgetree_root;

    int dummy[3]; // dummy[2] is id
};

struct trianglefaceheader_t
{
    int vertexindex; // from this member to verts
    int parent; // parent bone, starting at 1
    int flags;
    int numfaces;
};

// add this since we can actually read bone names
struct trianglefaceheader_t_v53
{
    int vertexindex; // from this member to verts
    int parent <read=ReadString(startof(bones[this - 1]) + bones[this - 1].sznameindex)>; // parent bone, starting at 1
    int flags;
    int numfaces;
};

struct trianglevertmap_t
{
    byte faceindex;
    byte unkdata[3];

    int16 vertid;
    byte unkdata1[2];

    int16 vertid1;
    byte unkdata2[2];

    int16 vertid2;
    byte unkdata3[2];
};

struct phyvertex_t
{
    Vector pos; // relative to bone
    float unk;
};

struct phynode_t
{
    int rightnodeindex;
    int convexindex;

    Vector center;
    float radius;

    int bboxsize; // volume?
};


struct physection_t
{
    swapcompactsurfaceheader_t surfaceheader <bgcolor=cLtRed, fgcolor=cLtYellow>;
    legacysurfaceheader_t surfaceheader2 <bgcolor=cLtRed, fgcolor=cYellow>;
    trianglefaceheader_t trihdr <bgcolor=cDkRed, fgcolor=cDkYellow>;
    trianglevertmap_t vertmap[trihdr.numfaces] <bgcolor=cDkRed, fgcolor=cLtYellow, optimize=false>;
    
    local int numfaces = 0;
    local int numtrihdr = 1;

    while(FTell() < trihdr.vertexindex + startof(trihdr))
    {   
        trianglefaceheader_t trihdr <bgcolor=cDkRed, fgcolor=cDkYellow>;
        trianglevertmap_t vertmap[trihdr.numfaces] <bgcolor=cDkRed, fgcolor=cLtYellow, optimize=false>;

        numtrihdr++;
    }

    for(x = 0; x < numtrihdr; x++)
    {
        numfaces += trihdr[x].numfaces;
    }

    local int numvertices = 0;
    
    for(i = 0; i < numfaces; i++)
    {
            numvertices = vertmap[i].vertid > numvertices ? vertmap[i].vertid : numvertices;
            numvertices = vertmap[i].vertid1 > numvertices ? vertmap[i].vertid1 : numvertices;
            numvertices = vertmap[i].vertid2 > numvertices ? vertmap[i].vertid2 : numvertices;   
    }
    
    numvertices++;
    
    FSeek(startof(trihdr[0]) + trihdr[0].vertexindex);
    phyvertex_t vertices[numvertices] <bgcolor=cDkRed, fgcolor=cYellow, optimize=false>;

    FSeek(startof(surfaceheader2) + surfaceheader2.offset_ledgetree_root);

    while(FTell() - startof(surfaceheader) < surfaceheader.size)
    {
        phynode_t node <bgcolor=cRed, optimize=false>;
    }
};