//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vphy
//   Authors: Rika & Others
//   Version: 16
//   Purpose: Valve Physics Files
//  Category: Struct
// File Mask: *.phy
//  ID Bytes: 
//   History: 
//------------------------------------------------


// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//=====
// vphy


struct phyheader_t
{
	int size; // Size of this header section (generally 16), this is also version.
	int id; // Often zero, unknown purpose.
	int solidCount; // Number of solids in file
	int checkSum; // checksum of source .mdl file (4-bytes)
};

struct compactsurfaceheader_t
{
	int size;
	int id;
	short version;

	short modeltype;

	int surfacesize;

	Vector dragaxisareas;

	int axismaparea;
};

struct swapcompactsurfaceheader_t
{
	int		size; // size of the content after this byte
	int		vphysicsID;
	short	version;
	short	modelType;
	int		surfaceSize;
	Vector	dragAxisAreas;
	int		axisMapSize;
};

struct legacysurfaceheader_t
{
	Vector mass_center;
	Vector rotation_inertia;

	float upper_limit_radius;

    // big if true
	int	max_deviation : 8;
    int	byte_size : 24;
	int	offset_ledgetree_root;

    int dummy[3]; // dummy[2] is id
};

struct compactledge_t
{
	int c_point_offset; // byte offset from 'this' to (ledge) point array
	union {
		int ledgetree_node_offset; // 32bit ssize_t
		int client_data;	// if indicates a non terminal ledge
	} offsets;
    BitfieldDisablePadding();
	unsigned int has_chilren_flag : 2;
	bool is_compact_flag : 2;  // if false than compact ledge uses points outside this piece of memory
	unsigned int dummy : 4;
	unsigned int size_div_16 : 24;
    BitfieldEnablePadding();
	short n_triangles;
	short for_future_use;
};

// add this since we can actually read bone names
struct trianglefaceheader_t_v53
{
    int vertexindex; // from this member to verts
    int parent <read=ReadString(startof(bones[this - 1]) + bones[this - 1].sznameindex)>; // parent bone, starting at 1
    int flags;
    int numfaces;
};

struct compactedge_t
{
	unsigned int	start_point_index : 16; // point index
	int				opposite_index : 15; // rel to this // maybe extra array, 3 bits more than tri_index/pierce_index
	unsigned int	is_virtual : 1;
};

struct compacttriangle_t
{
	unsigned int tri_index : 12; // used for upward navigation
	unsigned int pierce_index : 12;
	unsigned int material_index : 7;
	unsigned int is_virtual : 1;

	// three edges
	compactedge_t c_three_edges[3];
};

struct phyvertex_t
{
    Vector pos; // relative to bone
    char pad[4]; // align to 16 bytes
};

struct compactledgenode_t
{
	int offset_right_node; // (if != 0 than children
	int offset_compact_ledge; //(if != 0, pointer to hull that contains all subelements
	Vector center;	// in object_coords
	float radius; // size of sphere
	unsigned char box_sizes[3];
	unsigned char free_0;
};


struct physection_t
{
    swapcompactsurfaceheader_t surfaceheader <bgcolor=cLtRed, fgcolor=cLtYellow>;
    legacysurfaceheader_t surfaceheader2 <bgcolor=cLtRed, fgcolor=cYellow>;
    compactledge_t ledge <bgcolor=cDkRed, fgcolor=cDkYellow>;
    compacttriangle_t tri[ledge.n_triangles] <bgcolor=cDkRed, fgcolor=cLtYellow, optimize=false>;
    
    local int numfaces = 0;
    local int numledge = 1;

    while(FTell() < ledge.c_point_offset + startof(ledge))
    {   
        compactledge_t ledge <bgcolor=cDkRed, fgcolor=cDkYellow>;
        compacttriangle_t tri[ledge.n_triangles] <bgcolor=cDkRed, fgcolor=cLtYellow, optimize=false>;

        numledge++;
    }

    for(x = 0; x < numledge; x++)
    {
        numfaces += ledge[x].n_triangles;
    }

    local int numvertices = 0;
    
    for(i = 0; i < numfaces; i++)
    {
            numvertices = tri[i].c_three_edges[0].start_point_index > numvertices ? tri[i].c_three_edges[0].start_point_index : numvertices;
            numvertices = tri[i].c_three_edges[1].start_point_index > numvertices ? tri[i].c_three_edges[1].start_point_index : numvertices;
            numvertices = tri[i].c_three_edges[2].start_point_index > numvertices ? tri[i].c_three_edges[2].start_point_index : numvertices;
    }
    
    numvertices++;
    
    FSeek(startof(ledge[0]) + ledge[0].c_point_offset);
    phyvertex_t vertices[numvertices] <bgcolor=cDkRed, fgcolor=cYellow, optimize=false>;

    FSeek(startof(surfaceheader2) + surfaceheader2.offset_ledgetree_root);

    while(FTell() - startof(surfaceheader) < surfaceheader.size)
    {
        compactledgenode_t ledgenode <bgcolor=cRed, optimize=false>;
    }
};