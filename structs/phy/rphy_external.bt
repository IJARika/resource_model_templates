//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: rphy
//   Authors: Rika & Others
//   Version: 20
//   Purpose: Respawn Physics Files
//  Category: Model
// File Mask: *.phy
//  ID Bytes: 
//   History: 
//------------------------------------------------


#include "../source_math.bt"

local int i = 0;


// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


//=====
// vphy


struct phyheader_t
{
	int size; // Size of this header section
	int id; // version?
	int numsolids; // Number of solids in file
	int checksum; // checksum of source .mdl file (4-bytes)

    int keyvalueindex; // string block or size of data after this member
};

struct phyheader_t_v16
{
	short numsolids; // Number of solids in file
    unsigned short keyvalueindex; // funny rmdl v16 offset
};

struct phyheader2_t
{
    // respawn aligns to 8

	__int64 surfaceindex; // index into surfaces, 64bit for conversion into ptr
	int numsolids; // Number of solids in file

    FSkip(4); // me when compilier alignment

	int unk;

    FSkip(4); // me when compilier alignment

    int size; // size of surfaces
};

struct surfaceheader_t
{
	__int64 meshindex; // 64bit for conversion into ptr
    __int64 numsolids;    

    float unkfloat;

    int unk[2];

    // idx 0, and 4 match the floats in meshheader
    struct {
        float unkfloatarray[4];
    } unkfloat1[5];

    int unk1;

    // differs slightly from model but should be the mostly same assuming it is one solid.
    // this is PER SOLID so on multi-solid phys this will be smaller than the models
    Vector bbmin;
    Vector bbmax;

    int unk2[2];
};

struct trianglefaceheader_t
{
    float unkfloat[3]; // first might not be float

    float unkfloat1;

    __int64 vertoffset; // 64bit for conversion into ptr
    __int64 numverts;

    __int64 faceoffset; // 64bit for conversion into ptr
    __int64 numfaces;    

    // numunk2
    __int64 unk2offset; // 64bit for conversion into ptr
    __int64 numunk2;  
};

struct phyvertex_t
{
    Vector pos; // relative to bone
    int unk;
};

struct phynode_t
{
    int rightnodeindex;
    int convexindex;

    Vector center;
    float radius;

    int bboxsize; // volume?
};

phyheader_t header <bgcolor=cLtRed>;
phyheader2_t subheader <bgcolor=cRed>;

for(i = 0; i < header.numsolids; i++)
{
    FSeek(startof(subheader) + subheader.surfaceindex + sizeof(surfaceheader_t) * i);
    struct {
        surfaceheader_t surfaceheader <bgcolor=cLtRed, fgcolor=cLtYellow>;

        local int offset = 0;

        FSeek(startof(subheader) + surfaceheader.meshindex);
        trianglefaceheader_t mesh <bgcolor=cBlue>;

        FSeek(startof(subheader) + mesh.vertoffset);
        Vector vert[mesh.numverts] <bgcolor=cDkBlue, fgcolor=cLtYellow>;

        FSeek(startof(subheader) + mesh.faceoffset);
        struct {
            byte vertex[32];
        } face[mesh.numfaces] <bgcolor=cBlue, fgcolor=cLtYellow>;

        // array of face indexes, whar?
        struct {
            byte face[4];
        } unk[mesh.numunk2] <bgcolor=cDkBlue, fgcolor=cLtYellow>;

    } physection;
}

FSeek(header.keyvalueindex);

local int charSize = FileSize() - header.keyvalueindex;

char vphy_stringdata[charSize] <fgcolor=cRed>;