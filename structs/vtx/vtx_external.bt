//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vtx
//   Authors: Valve
//   Version: 7
//   Purpose: Valve Mesh Strip File
//  Category: Model
// File Mask: *.vtx, *.sw.vtx, *.dx80.vtx, *.dx90.vtx, *.dx11.vtx
//  ID Bytes: 
//   History: 
//------------------------------------------------


// this structure is in <mod folder>/src/public/optimize.h
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.

#include "../source_math.bt"
#include "../vtx/vtx.bt"

local int i;
local int j;
local int k;
local int l;
local int m;
local int n;
local int o;
local int p;


FileHeader_t vtx_header <bgcolor=cLtPurple>;

for (i = 0; i < vtx_header.numBodyParts; ++i)
{
    FSeek(startof(vtx_header) + vtx_header.bodyPartOffset + (sizeof(BodyPartHeader_t) * i));
    struct {
        BodyPartHeader_t vtx_partheader <bgcolor=cPurple>;
    
        for(j = 0; j < vtx_partheader.numModels; j++)
        {
            FSeek(startof(vtx_partheader) + vtx_partheader.modelOffset + (sizeof(ModelHeader_t) * j));
            struct {
                ModelHeader_t vtx_modelheader <bgcolor=cDkPurple>;
        
                for(k = 0; k < vtx_modelheader.numLODs; k++)
                {
                    FSeek(startof(vtx_modelheader) + vtx_modelheader.lodOffset + (sizeof(ModelLODHeader_t) * k));
                    struct {
                        ModelLODHeader_t vtx_lodheader <bgcolor=cLtPurple>;
                    
                        for(l = 0; l < vtx_lodheader.numMeshes; l++)
                        {
                            FSeek(startof(vtx_lodheader) + vtx_lodheader.meshOffset + (sizeof(MeshHeader_t) * l));
                            struct {
                                MeshHeader_t vtx_meshheader <bgcolor=cPurple>;
                
                                for(m = 0; m < vtx_meshheader.numStripGroups; m++)
                                {
                                    FSeek(startof(vtx_meshheader) + vtx_meshheader.stripGroupHeaderOffset);
                                    StripGroupHeader_t vtx_stripgrphdr <bgcolor=cDkPurple>;
                    
                                    for(n = 0; n < vtx_stripgrphdr.numStrips; n++)
                                    {
                                        FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.stripOffset + (sizeof(StripHeader_t) * n));
                                        struct {
                                            StripHeader_t vtx_strip <bgcolor=cLtPurple>;
                        
                                            FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.vertOffset + (vtx_strip.vertOffset * sizeof(Vertex_t)));
                                            Vertex_t vtx_stripverts[vtx_strip.numVerts] <bgcolor=cPurple>;
                    
                                            FSeek(startof(vtx_stripgrphdr) + vtx_stripgrphdr.indexOffset + (vtx_strip.indexOffset * 2));
                                            unsigned short indice[vtx_strip.numIndices] <bgcolor=cDkPurple>;
                    
                                            if(vtx_strip.boneStateChangeOffset)
                                            {
                                                FSeek(startof(vtx_strip) + vtx_strip.boneStateChangeOffset);
                                                BoneStateChangeHeader_t bonestate[vtx_strip.numBoneStateChanges] <bgcolor=cLtPurple>;
                                            }
                                        } strip;
                                    }
                                }
                            } mesh;
                        }
                    } model_lod;
                }
            } model;
        }
    } bodypart;
};


FSeek(startof(vtx_header) + vtx_header.materialReplacementListOffset);
MaterialReplacementListHeader_t materiallist[vtx_header.numLODs] <bgcolor=0xDD00AA>;