//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: vtx
//   Authors: Valve
//   Version: 7
//   Purpose: Valve Mesh Strip File
//  Category: Struct
// File Mask: *.vtx, *.sw.vtx, *.dx80.vtx, *.dx90.vtx, *.dx11.vtx
//  ID Bytes: 
//   History: 
//------------------------------------------------


// this structure is in <mod folder>/src/public/optimize.h
// a lot of these are from either valvedevwiki, the public source sdk 2013 code, and crowbar.


#define MAX_NUM_LODS 8
#define MAX_NUM_BONES_PER_VERT 3


//====
// vtx


struct FileHeader_t
{
	// file version as defined by OPTIMIZED_MODEL_FILE_VERSION (currently 7)
	int version;

	// hardware params that affect how the model is to be optimized.
	int vertCacheSize;
	int16 maxBonesPerStrip;
	int16 maxBonesPerTri;
	int maxBonesPerVert;

	// must match checkSum in the .mdl
	int checksum;

	int numLODs; // Also specified in ModelHeader_t's and should match

	// Offset to materialReplacementList Array. one of these for each LOD, 8 in total
	int materialReplacementListOffset;

    // Defines the size and location of the body part array
	int numBodyParts;
	int bodyPartOffset;
};

struct BodyPartHeader_t
{
	// Model array
	int numModels;
	int modelOffset;
};

struct ModelHeader_t
{
	//LOD mesh array
	int numLODs;   //This is also specified in FileHeader_t
	int lodOffset;
};

struct ModelLODHeader_t
{
    //Mesh array
	int numMeshes;
	int meshOffset;

	float switchPoint;
};

enum <ubyte> MeshFlags_t
{ 
	// these are both material properties, and a mesh has a single material.
	MESH_IS_TEETH	= 0x01, 
	MESH_IS_EYES	= 0x02
};

struct MeshHeader_t
{
	int numStripGroups;
	int stripGroupHeaderOffset;

	MeshFlags_t flags;
};

enum <ubyte> StripGroupFlags_t
{
	STRIPGROUP_IS_HWSKINNED		 = 0x02,
	STRIPGROUP_IS_DELTA_FLEXED	 = 0x04,
	STRIPGROUP_SUPPRESS_HW_MORPH = 0x08,	// NOTE: This is a temporary flag used at run time.
};

struct StripGroupHeader_t
{
	// These are the arrays of all verts and indices for this mesh.  strips index into this.
	int numVerts;
	int vertOffset;

	int numIndices;
	int indexOffset;

	int numStrips;
	int stripOffset;

	StripGroupFlags_t flags;

	// The following fields are only present if MDL version is >=49
	// Points to an array of unsigned shorts (16 bits each)
	int numTopologyIndices;
	int topologyOffset;
};

enum <ubyte> StripHeaderFlags_t
{
	STRIP_IS_TRILIST		= 0x01,
	STRIP_IS_QUADLIST_REG	= 0x02,		// Regular sub-d quads
	STRIP_IS_QUADLIST_EXTRA = 0x04		// Extraordinary sub-d quads
};


// A strip is a piece of a stripgroup which is divided by bones 
struct StripHeader_t
{
	int numIndices;
	int indexOffset;

	int numVerts;    
	int vertOffset;

	short numBones;

	StripHeaderFlags_t flags;

	int numBoneStateChanges;
	int boneStateChangeOffset;

	// MDL Version 49 and up only
	int numTopologyIndices;
	int topologyOffset;
};

struct Vertex_t
{
	// these index into the mesh's vert[origMeshVertID]'s bones
	unsigned char boneWeightIndex[MAX_NUM_BONES_PER_VERT];
	unsigned char numBones;

	unsigned short origMeshVertID;

	// for sw skinned verts, these are indices into the global list of bones
	// for hw skinned verts, these are hardware bone indices
	char boneID[MAX_NUM_BONES_PER_VERT];
};

struct MaterialReplacementHeader_t
{
	short materialID;
	int replacementMaterialNameOffset;
};

struct MaterialReplacementListHeader_t
{
	int numReplacements;
	int replacementOffset;
};

struct BoneStateChangeHeader_t
{
	int hardwareID;
	int newBoneID;
};

struct vertgroup
{
    Vertex_t vtx_stripverts[vtx_stripgrphdr[i].numVerts] <bgcolor=cPurple>;
};

struct indicegroup
{
    int16 indice[vtx_stripgrphdr[i].numIndices] <bgcolor=cDkPurple>;
};

struct bonestategroup
{
    BoneStateChangeHeader_t bonestate[vtx_strips[i].numBoneStateChanges] <bgcolor=cLtPurple>;
};