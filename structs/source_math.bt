//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: Rika
//   Version: 
//   Purpose: Math :)
//  Category: Dependancy
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// math stuff used by all structs.

// vector
struct Vector2
{
    float x;
    float y;
};

struct Vector3
{
    float x;
    float y;
    float z;
};

struct Vector4
{
    float x;
    float y;
    float z;
    float w;
};

// packed vector
struct Vector48
{
    hfloat x;
    hfloat y;
    hfloat z;
};

// quaternion
struct Quaternion
{
    float x;
    float y;
    float z;
    float w;
};

// packed quaternion
struct Quat32
{
	uint x : 11 <read=Str("%f", (this - 1024) * (1 / 1024.0))>;
	uint y : 10 <read=Str("%f", (this - 512) * (1 / 512.0))>;
	uint z : 10 <read=Str("%f", (this - 512) * (1 / 512.0))>;
	uint wneg : 1;
};

struct Quat48
{
	uint16 x : 16 <read=Str("%f", (this - 32768) * (1 / 32768.5))>;
	uint16 y : 16 <read=Str("%f", (this - 32768) * (1 / 32768.5))>;
	uint16 z : 15 <read=Str("%f", (this - 16384) * (1 / 16384.5))>; // broken
	uint16 wneg : 1;
};

struct Quat64
{
    uint64 x : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 y : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 z : 21 <read=Str("%f", (this - 1048576) * (1 / 1048576.5))>;
    uint64 wneg : 1;

    //  <read=ReadShort(sqrt( 1 - x * x - y * y - z * z ))>
};

struct RadianEuler
{
    // for when you want radians in float.
    float x;
    float y;
    float z;
};

struct matrix3x4_t
{
    // unsure if that's how it actually works

    // row 1, x
    float c0r0; // x
    float c1r0; // x
    float c2r0; // x
    float c3r0; // x

    // row 2, y
    float c0r1; // y
    float c1r1; // y
    float c2r1; // y
    float c3r1; // y
        
    // row 3, z
    float c0r2; // z
    float c1r2; // z
    float c2r2; // z
    float c3r2; // z
};